"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/xstate";
exports.ids = ["vendor-chunks/xstate"];
exports.modules = {

/***/ "(ssr)/./node_modules/xstate/es/Actor.js":
/*!*****************************************!*\
  !*** ./node_modules/xstate/es/Actor.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDeferredActor: () => (/* binding */ createDeferredActor),\n/* harmony export */   createInvocableActor: () => (/* binding */ createInvocableActor),\n/* harmony export */   createNullActor: () => (/* binding */ createNullActor),\n/* harmony export */   isActor: () => (/* binding */ isActor),\n/* harmony export */   isSpawnedActor: () => (/* binding */ isSpawnedActor),\n/* harmony export */   toActorRef: () => (/* binding */ toActorRef)\n/* harmony export */ });\n/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_virtual/_tslib.js */ \"(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/xstate/es/utils.js\");\n/* harmony import */ var _serviceScope_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./serviceScope.js */ \"(ssr)/./node_modules/xstate/es/serviceScope.js\");\n\n\n\nfunction createNullActor(id) {\n    var _a;\n    return _a = {\n        id: id,\n        send: function() {\n            return void 0;\n        },\n        subscribe: function() {\n            return {\n                unsubscribe: function() {\n                    return void 0;\n                }\n            };\n        },\n        getSnapshot: function() {\n            return undefined;\n        },\n        toJSON: function() {\n            return {\n                id: id\n            };\n        }\n    }, _a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function() {\n        return this;\n    }, _a;\n}\n/**\r\n * Creates a deferred actor that is able to be invoked given the provided\r\n * invocation information in its `.meta` value.\r\n *\r\n * @param invokeDefinition The meta information needed to invoke the actor.\r\n */ function createInvocableActor(invokeDefinition, machine, context, _event) {\n    var _a;\n    var invokeSrc = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toInvokeSource)(invokeDefinition.src);\n    var serviceCreator = (_a = machine === null || machine === void 0 ? void 0 : machine.options.services) === null || _a === void 0 ? void 0 : _a[invokeSrc.type];\n    var resolvedData = invokeDefinition.data ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapContext)(invokeDefinition.data, context, _event) : undefined;\n    var tempActor = serviceCreator ? createDeferredActor(serviceCreator, invokeDefinition.id, resolvedData) : createNullActor(invokeDefinition.id); // @ts-ignore\n    tempActor.meta = invokeDefinition;\n    return tempActor;\n}\nfunction createDeferredActor(entity, id, data) {\n    var tempActor = createNullActor(id); // @ts-ignore\n    tempActor.deferred = true;\n    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(entity)) {\n        // \"mute\" the existing service scope so potential spawned actors within the `.initialState` stay deferred here\n        var initialState_1 = tempActor.state = (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_1__.provide)(undefined, function() {\n            return (data ? entity.withContext(data) : entity).initialState;\n        });\n        tempActor.getSnapshot = function() {\n            return initialState_1;\n        };\n    }\n    return tempActor;\n}\nfunction isActor(item) {\n    try {\n        return typeof item.send === \"function\";\n    } catch (e) {\n        return false;\n    }\n}\nfunction isSpawnedActor(item) {\n    return isActor(item) && \"id\" in item;\n} // TODO: refactor the return type, this could be written in a better way but it's best to avoid unneccessary breaking changes now\nfunction toActorRef(actorRefLike) {\n    var _a;\n    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((_a = {\n        subscribe: function() {\n            return {\n                unsubscribe: function() {\n                    return void 0;\n                }\n            };\n        },\n        id: \"anonymous\",\n        getSnapshot: function() {\n            return undefined;\n        }\n    }, _a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function() {\n        return this;\n    }, _a), actorRefLike);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL0FjdG9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFnRDtBQUNxQztBQUN6QztBQUU1QyxTQUFTTSxnQkFBZ0JDLEVBQUU7SUFDekIsSUFBSUM7SUFFSixPQUFPQSxLQUFLO1FBQ1ZELElBQUlBO1FBQ0pFLE1BQU07WUFDSixPQUFPLEtBQUs7UUFDZDtRQUNBQyxXQUFXO1lBQ1QsT0FBTztnQkFDTEMsYUFBYTtvQkFDWCxPQUFPLEtBQUs7Z0JBQ2Q7WUFDRjtRQUNGO1FBQ0FDLGFBQWE7WUFDWCxPQUFPQztRQUNUO1FBQ0FDLFFBQVE7WUFDTixPQUFPO2dCQUNMUCxJQUFJQTtZQUNOO1FBQ0Y7SUFDRixHQUFHQyxFQUFFLENBQUNQLHVEQUFnQkEsQ0FBQyxHQUFHO1FBQ3hCLE9BQU8sSUFBSTtJQUNiLEdBQUdPO0FBQ0w7QUFDQTs7Ozs7Q0FLQyxHQUVELFNBQVNPLHFCQUFxQkMsZ0JBQWdCLEVBQUVDLE9BQU8sRUFBRUMsT0FBTyxFQUFFQyxNQUFNO0lBQ3RFLElBQUlYO0lBRUosSUFBSVksWUFBWWxCLHlEQUFjQSxDQUFDYyxpQkFBaUJLLEdBQUc7SUFDbkQsSUFBSUMsaUJBQWlCLENBQUNkLEtBQUtTLFlBQVksUUFBUUEsWUFBWSxLQUFLLElBQUksS0FBSyxJQUFJQSxRQUFRTSxPQUFPLENBQUNDLFFBQVEsTUFBTSxRQUFRaEIsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxFQUFFLENBQUNZLFVBQVVLLElBQUksQ0FBQztJQUM5SixJQUFJQyxlQUFlVixpQkFBaUJXLElBQUksR0FBR3hCLHFEQUFVQSxDQUFDYSxpQkFBaUJXLElBQUksRUFBRVQsU0FBU0MsVUFBVU47SUFDaEcsSUFBSWUsWUFBWU4saUJBQWlCTyxvQkFBb0JQLGdCQUFnQk4saUJBQWlCVCxFQUFFLEVBQUVtQixnQkFBZ0JwQixnQkFBZ0JVLGlCQUFpQlQsRUFBRSxHQUFHLGFBQWE7SUFFN0pxQixVQUFVRSxJQUFJLEdBQUdkO0lBQ2pCLE9BQU9ZO0FBQ1Q7QUFDQSxTQUFTQyxvQkFBb0JFLE1BQU0sRUFBRXhCLEVBQUUsRUFBRW9CLElBQUk7SUFDM0MsSUFBSUMsWUFBWXRCLGdCQUFnQkMsS0FBSyxhQUFhO0lBRWxEcUIsVUFBVUksUUFBUSxHQUFHO0lBRXJCLElBQUk1QixvREFBU0EsQ0FBQzJCLFNBQVM7UUFDckIsOEdBQThHO1FBQzlHLElBQUlFLGlCQUFpQkwsVUFBVU0sS0FBSyxHQUFHN0IseURBQU9BLENBQUNRLFdBQVc7WUFDeEQsT0FBTyxDQUFDYyxPQUFPSSxPQUFPSSxXQUFXLENBQUNSLFFBQVFJLE1BQUssRUFBR0ssWUFBWTtRQUNoRTtRQUVBUixVQUFVaEIsV0FBVyxHQUFHO1lBQ3RCLE9BQU9xQjtRQUNUO0lBQ0Y7SUFFQSxPQUFPTDtBQUNUO0FBQ0EsU0FBU1MsUUFBUUMsSUFBSTtJQUNuQixJQUFJO1FBQ0YsT0FBTyxPQUFPQSxLQUFLN0IsSUFBSSxLQUFLO0lBQzlCLEVBQUUsT0FBTzhCLEdBQUc7UUFDVixPQUFPO0lBQ1Q7QUFDRjtBQUNBLFNBQVNDLGVBQWVGLElBQUk7SUFDMUIsT0FBT0QsUUFBUUMsU0FBUyxRQUFRQTtBQUNsQyxFQUFFLGlJQUFpSTtBQUVuSSxTQUFTRyxXQUFXQyxZQUFZO0lBQzlCLElBQUlsQztJQUVKLE9BQU9SLDJEQUFRQSxDQUFFUSxDQUFBQSxLQUFLO1FBQ3BCRSxXQUFXO1lBQ1QsT0FBTztnQkFDTEMsYUFBYTtvQkFDWCxPQUFPLEtBQUs7Z0JBQ2Q7WUFDRjtRQUNGO1FBQ0FKLElBQUk7UUFDSkssYUFBYTtZQUNYLE9BQU9DO1FBQ1Q7SUFDRixHQUFHTCxFQUFFLENBQUNQLHVEQUFnQkEsQ0FBQyxHQUFHO1FBQ3hCLE9BQU8sSUFBSTtJQUNiLEdBQUdPLEVBQUMsR0FBSWtDO0FBQ1Y7QUFFMkciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRjaC1tYWtlci8uL25vZGVfbW9kdWxlcy94c3RhdGUvZXMvQWN0b3IuanM/YmIzYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gJy4vX3ZpcnR1YWwvX3RzbGliLmpzJztcbmltcG9ydCB7IHN5bWJvbE9ic2VydmFibGUsIHRvSW52b2tlU291cmNlLCBtYXBDb250ZXh0LCBpc01hY2hpbmUgfSBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCB7IHByb3ZpZGUgfSBmcm9tICcuL3NlcnZpY2VTY29wZS5qcyc7XG5cbmZ1bmN0aW9uIGNyZWF0ZU51bGxBY3RvcihpZCkge1xuICB2YXIgX2E7XG5cbiAgcmV0dXJuIF9hID0ge1xuICAgIGlkOiBpZCxcbiAgICBzZW5kOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH0sXG4gICAgc3Vic2NyaWJlOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB1bnN1YnNjcmliZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSxcbiAgICBnZXRTbmFwc2hvdDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9LFxuICAgIHRvSlNPTjogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaWQ6IGlkXG4gICAgICB9O1xuICAgIH1cbiAgfSwgX2Fbc3ltYm9sT2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sIF9hO1xufVxuLyoqXHJcbiAqIENyZWF0ZXMgYSBkZWZlcnJlZCBhY3RvciB0aGF0IGlzIGFibGUgdG8gYmUgaW52b2tlZCBnaXZlbiB0aGUgcHJvdmlkZWRcclxuICogaW52b2NhdGlvbiBpbmZvcm1hdGlvbiBpbiBpdHMgYC5tZXRhYCB2YWx1ZS5cclxuICpcclxuICogQHBhcmFtIGludm9rZURlZmluaXRpb24gVGhlIG1ldGEgaW5mb3JtYXRpb24gbmVlZGVkIHRvIGludm9rZSB0aGUgYWN0b3IuXHJcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVJbnZvY2FibGVBY3RvcihpbnZva2VEZWZpbml0aW9uLCBtYWNoaW5lLCBjb250ZXh0LCBfZXZlbnQpIHtcbiAgdmFyIF9hO1xuXG4gIHZhciBpbnZva2VTcmMgPSB0b0ludm9rZVNvdXJjZShpbnZva2VEZWZpbml0aW9uLnNyYyk7XG4gIHZhciBzZXJ2aWNlQ3JlYXRvciA9IChfYSA9IG1hY2hpbmUgPT09IG51bGwgfHwgbWFjaGluZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogbWFjaGluZS5vcHRpb25zLnNlcnZpY2VzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FbaW52b2tlU3JjLnR5cGVdO1xuICB2YXIgcmVzb2x2ZWREYXRhID0gaW52b2tlRGVmaW5pdGlvbi5kYXRhID8gbWFwQ29udGV4dChpbnZva2VEZWZpbml0aW9uLmRhdGEsIGNvbnRleHQsIF9ldmVudCkgOiB1bmRlZmluZWQ7XG4gIHZhciB0ZW1wQWN0b3IgPSBzZXJ2aWNlQ3JlYXRvciA/IGNyZWF0ZURlZmVycmVkQWN0b3Ioc2VydmljZUNyZWF0b3IsIGludm9rZURlZmluaXRpb24uaWQsIHJlc29sdmVkRGF0YSkgOiBjcmVhdGVOdWxsQWN0b3IoaW52b2tlRGVmaW5pdGlvbi5pZCk7IC8vIEB0cy1pZ25vcmVcblxuICB0ZW1wQWN0b3IubWV0YSA9IGludm9rZURlZmluaXRpb247XG4gIHJldHVybiB0ZW1wQWN0b3I7XG59XG5mdW5jdGlvbiBjcmVhdGVEZWZlcnJlZEFjdG9yKGVudGl0eSwgaWQsIGRhdGEpIHtcbiAgdmFyIHRlbXBBY3RvciA9IGNyZWF0ZU51bGxBY3RvcihpZCk7IC8vIEB0cy1pZ25vcmVcblxuICB0ZW1wQWN0b3IuZGVmZXJyZWQgPSB0cnVlO1xuXG4gIGlmIChpc01hY2hpbmUoZW50aXR5KSkge1xuICAgIC8vIFwibXV0ZVwiIHRoZSBleGlzdGluZyBzZXJ2aWNlIHNjb3BlIHNvIHBvdGVudGlhbCBzcGF3bmVkIGFjdG9ycyB3aXRoaW4gdGhlIGAuaW5pdGlhbFN0YXRlYCBzdGF5IGRlZmVycmVkIGhlcmVcbiAgICB2YXIgaW5pdGlhbFN0YXRlXzEgPSB0ZW1wQWN0b3Iuc3RhdGUgPSBwcm92aWRlKHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIChkYXRhID8gZW50aXR5LndpdGhDb250ZXh0KGRhdGEpIDogZW50aXR5KS5pbml0aWFsU3RhdGU7XG4gICAgfSk7XG5cbiAgICB0ZW1wQWN0b3IuZ2V0U25hcHNob3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gaW5pdGlhbFN0YXRlXzE7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB0ZW1wQWN0b3I7XG59XG5mdW5jdGlvbiBpc0FjdG9yKGl0ZW0pIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gdHlwZW9mIGl0ZW0uc2VuZCA9PT0gJ2Z1bmN0aW9uJztcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuZnVuY3Rpb24gaXNTcGF3bmVkQWN0b3IoaXRlbSkge1xuICByZXR1cm4gaXNBY3RvcihpdGVtKSAmJiAnaWQnIGluIGl0ZW07XG59IC8vIFRPRE86IHJlZmFjdG9yIHRoZSByZXR1cm4gdHlwZSwgdGhpcyBjb3VsZCBiZSB3cml0dGVuIGluIGEgYmV0dGVyIHdheSBidXQgaXQncyBiZXN0IHRvIGF2b2lkIHVubmVjY2Vzc2FyeSBicmVha2luZyBjaGFuZ2VzIG5vd1xuXG5mdW5jdGlvbiB0b0FjdG9yUmVmKGFjdG9yUmVmTGlrZSkge1xuICB2YXIgX2E7XG5cbiAgcmV0dXJuIF9fYXNzaWduKChfYSA9IHtcbiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9LFxuICAgIGlkOiAnYW5vbnltb3VzJyxcbiAgICBnZXRTbmFwc2hvdDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sIF9hW3N5bWJvbE9ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9LCBfYSksIGFjdG9yUmVmTGlrZSk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZURlZmVycmVkQWN0b3IsIGNyZWF0ZUludm9jYWJsZUFjdG9yLCBjcmVhdGVOdWxsQWN0b3IsIGlzQWN0b3IsIGlzU3Bhd25lZEFjdG9yLCB0b0FjdG9yUmVmIH07XG4iXSwibmFtZXMiOlsiX19hc3NpZ24iLCJzeW1ib2xPYnNlcnZhYmxlIiwidG9JbnZva2VTb3VyY2UiLCJtYXBDb250ZXh0IiwiaXNNYWNoaW5lIiwicHJvdmlkZSIsImNyZWF0ZU51bGxBY3RvciIsImlkIiwiX2EiLCJzZW5kIiwic3Vic2NyaWJlIiwidW5zdWJzY3JpYmUiLCJnZXRTbmFwc2hvdCIsInVuZGVmaW5lZCIsInRvSlNPTiIsImNyZWF0ZUludm9jYWJsZUFjdG9yIiwiaW52b2tlRGVmaW5pdGlvbiIsIm1hY2hpbmUiLCJjb250ZXh0IiwiX2V2ZW50IiwiaW52b2tlU3JjIiwic3JjIiwic2VydmljZUNyZWF0b3IiLCJvcHRpb25zIiwic2VydmljZXMiLCJ0eXBlIiwicmVzb2x2ZWREYXRhIiwiZGF0YSIsInRlbXBBY3RvciIsImNyZWF0ZURlZmVycmVkQWN0b3IiLCJtZXRhIiwiZW50aXR5IiwiZGVmZXJyZWQiLCJpbml0aWFsU3RhdGVfMSIsInN0YXRlIiwid2l0aENvbnRleHQiLCJpbml0aWFsU3RhdGUiLCJpc0FjdG9yIiwiaXRlbSIsImUiLCJpc1NwYXduZWRBY3RvciIsInRvQWN0b3JSZWYiLCJhY3RvclJlZkxpa2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/Actor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/Machine.js":
/*!*******************************************!*\
  !*** ./node_modules/xstate/es/Machine.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Machine: () => (/* binding */ Machine),\n/* harmony export */   createMachine: () => (/* binding */ createMachine)\n/* harmony export */ });\n/* harmony import */ var _StateNode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./StateNode.js */ \"(ssr)/./node_modules/xstate/es/StateNode.js\");\n/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./environment.js */ \"(ssr)/./node_modules/xstate/es/environment.js\");\n\n\nvar warned = false;\nfunction Machine(config, options, initialContext) {\n    if (initialContext === void 0) {\n        initialContext = config.context;\n    }\n    return new _StateNode_js__WEBPACK_IMPORTED_MODULE_0__.StateNode(config, options, initialContext);\n}\nfunction createMachine(config, options) {\n    if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION && !(\"predictableActionArguments\" in config) && !warned) {\n        warned = true;\n        console.warn(\"It is highly recommended to set `predictableActionArguments` to `true` when using `createMachine`. https://xstate.js.org/docs/guides/actions.html\");\n    }\n    return new _StateNode_js__WEBPACK_IMPORTED_MODULE_0__.StateNode(config, options);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL01hY2hpbmUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEyQztBQUNNO0FBRWpELElBQUlFLFNBQVM7QUFDYixTQUFTQyxRQUFRQyxNQUFNLEVBQUVDLE9BQU8sRUFBRUMsY0FBYztJQUM5QyxJQUFJQSxtQkFBbUIsS0FBSyxHQUFHO1FBQzdCQSxpQkFBaUJGLE9BQU9HLE9BQU87SUFDakM7SUFFQSxPQUFPLElBQUlQLG9EQUFTQSxDQUFDSSxRQUFRQyxTQUFTQztBQUN4QztBQUNBLFNBQVNFLGNBQWNKLE1BQU0sRUFBRUMsT0FBTztJQUNwQyxJQUFJLENBQUNKLDBEQUFhQSxJQUFJLENBQUUsaUNBQWdDRyxNQUFLLEtBQU0sQ0FBQ0YsUUFBUTtRQUMxRUEsU0FBUztRQUNUTyxRQUFRQyxJQUFJLENBQUM7SUFDZjtJQUVBLE9BQU8sSUFBSVYsb0RBQVNBLENBQUNJLFFBQVFDO0FBQy9CO0FBRWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0Y2gtbWFrZXIvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL01hY2hpbmUuanM/N2I4YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGF0ZU5vZGUgfSBmcm9tICcuL1N0YXRlTm9kZS5qcyc7XG5pbXBvcnQgeyBJU19QUk9EVUNUSU9OIH0gZnJvbSAnLi9lbnZpcm9ubWVudC5qcyc7XG5cbnZhciB3YXJuZWQgPSBmYWxzZTtcbmZ1bmN0aW9uIE1hY2hpbmUoY29uZmlnLCBvcHRpb25zLCBpbml0aWFsQ29udGV4dCkge1xuICBpZiAoaW5pdGlhbENvbnRleHQgPT09IHZvaWQgMCkge1xuICAgIGluaXRpYWxDb250ZXh0ID0gY29uZmlnLmNvbnRleHQ7XG4gIH1cblxuICByZXR1cm4gbmV3IFN0YXRlTm9kZShjb25maWcsIG9wdGlvbnMsIGluaXRpYWxDb250ZXh0KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZU1hY2hpbmUoY29uZmlnLCBvcHRpb25zKSB7XG4gIGlmICghSVNfUFJPRFVDVElPTiAmJiAhKCdwcmVkaWN0YWJsZUFjdGlvbkFyZ3VtZW50cycgaW4gY29uZmlnKSAmJiAhd2FybmVkKSB7XG4gICAgd2FybmVkID0gdHJ1ZTtcbiAgICBjb25zb2xlLndhcm4oJ0l0IGlzIGhpZ2hseSByZWNvbW1lbmRlZCB0byBzZXQgYHByZWRpY3RhYmxlQWN0aW9uQXJndW1lbnRzYCB0byBgdHJ1ZWAgd2hlbiB1c2luZyBgY3JlYXRlTWFjaGluZWAuIGh0dHBzOi8veHN0YXRlLmpzLm9yZy9kb2NzL2d1aWRlcy9hY3Rpb25zLmh0bWwnKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgU3RhdGVOb2RlKGNvbmZpZywgb3B0aW9ucyk7XG59XG5cbmV4cG9ydCB7IE1hY2hpbmUsIGNyZWF0ZU1hY2hpbmUgfTtcbiJdLCJuYW1lcyI6WyJTdGF0ZU5vZGUiLCJJU19QUk9EVUNUSU9OIiwid2FybmVkIiwiTWFjaGluZSIsImNvbmZpZyIsIm9wdGlvbnMiLCJpbml0aWFsQ29udGV4dCIsImNvbnRleHQiLCJjcmVhdGVNYWNoaW5lIiwiY29uc29sZSIsIndhcm4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/Machine.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/State.js":
/*!*****************************************!*\
  !*** ./node_modules/xstate/es/State.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   State: () => (/* binding */ State),\n/* harmony export */   bindActionToState: () => (/* binding */ bindActionToState),\n/* harmony export */   isState: () => (/* binding */ isState),\n/* harmony export */   isStateConfig: () => (/* binding */ isStateConfig),\n/* harmony export */   stateValuesEqual: () => (/* binding */ stateValuesEqual)\n/* harmony export */ });\n/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_virtual/_tslib.js */ \"(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/xstate/es/constants.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/xstate/es/utils.js\");\n/* harmony import */ var _stateUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stateUtils.js */ \"(ssr)/./node_modules/xstate/es/stateUtils.js\");\n/* harmony import */ var _actions_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./actions.js */ \"(ssr)/./node_modules/xstate/es/actions.js\");\n/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./environment.js */ \"(ssr)/./node_modules/xstate/es/environment.js\");\n\n\n\n\n\n\nfunction stateValuesEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (a === undefined || b === undefined) {\n        return false;\n    }\n    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(a) || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(b)) {\n        return a === b;\n    }\n    var aKeys = Object.keys(a);\n    var bKeys = Object.keys(b);\n    return aKeys.length === bKeys.length && aKeys.every(function(key) {\n        return stateValuesEqual(a[key], b[key]);\n    });\n}\nfunction isStateConfig(state) {\n    if (typeof state !== \"object\" || state === null) {\n        return false;\n    }\n    return \"value\" in state && \"_event\" in state;\n}\n/**\r\n * @deprecated Use `isStateConfig(object)` or `state instanceof State` instead.\r\n */ var isState = isStateConfig;\nfunction bindActionToState(action, state) {\n    var exec = action.exec;\n    var boundAction = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, action), {\n        exec: exec !== undefined ? function() {\n            return exec(state.context, state.event, {\n                action: action,\n                state: state,\n                _event: state._event\n            });\n        } : undefined\n    });\n    return boundAction;\n}\nvar State = /*#__PURE__*/ /** @class */ function() {\n    /**\r\n   * Creates a new State instance.\r\n   * @param value The state value\r\n   * @param context The extended state\r\n   * @param historyValue The tree representing historical values of the state nodes\r\n   * @param history The previous state\r\n   * @param actions An array of action objects to execute as side-effects\r\n   * @param activities A mapping of activities and whether they are started (`true`) or stopped (`false`).\r\n   * @param meta\r\n   * @param events Internal event queue. Should be empty with run-to-completion semantics.\r\n   * @param configuration\r\n   */ function State(config) {\n        var _this = this;\n        var _a;\n        this.actions = [];\n        this.activities = _constants_js__WEBPACK_IMPORTED_MODULE_2__.EMPTY_ACTIVITY_MAP;\n        this.meta = {};\n        this.events = [];\n        this.value = config.value;\n        this.context = config.context;\n        this._event = config._event;\n        this._sessionid = config._sessionid;\n        this.event = this._event.data;\n        this.historyValue = config.historyValue;\n        this.history = config.history;\n        this.actions = config.actions || [];\n        this.activities = config.activities || _constants_js__WEBPACK_IMPORTED_MODULE_2__.EMPTY_ACTIVITY_MAP;\n        this.meta = (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_3__.getMeta)(config.configuration);\n        this.events = config.events || [];\n        this.matches = this.matches.bind(this);\n        this.toStrings = this.toStrings.bind(this);\n        this.configuration = config.configuration;\n        this.transitions = config.transitions;\n        this.children = config.children;\n        this.done = !!config.done;\n        this.tags = (_a = Array.isArray(config.tags) ? new Set(config.tags) : config.tags) !== null && _a !== void 0 ? _a : new Set();\n        this.machine = config.machine;\n        Object.defineProperty(this, \"nextEvents\", {\n            get: function() {\n                return (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_3__.nextEvents)(_this.configuration);\n            }\n        });\n    }\n    /**\r\n   * Creates a new State instance for the given `stateValue` and `context`.\r\n   * @param stateValue\r\n   * @param context\r\n   */ State.from = function(stateValue, context) {\n        if (stateValue instanceof State) {\n            if (stateValue.context !== context) {\n                return new State({\n                    value: stateValue.value,\n                    context: context,\n                    _event: stateValue._event,\n                    _sessionid: null,\n                    historyValue: stateValue.historyValue,\n                    history: stateValue.history,\n                    actions: [],\n                    activities: stateValue.activities,\n                    meta: {},\n                    events: [],\n                    configuration: [],\n                    transitions: [],\n                    children: {}\n                });\n            }\n            return stateValue;\n        }\n        var _event = _actions_js__WEBPACK_IMPORTED_MODULE_4__.initEvent;\n        return new State({\n            value: stateValue,\n            context: context,\n            _event: _event,\n            _sessionid: null,\n            historyValue: undefined,\n            history: undefined,\n            actions: [],\n            activities: undefined,\n            meta: undefined,\n            events: [],\n            configuration: [],\n            transitions: [],\n            children: {}\n        });\n    };\n    /**\r\n   * Creates a new State instance for the given `config`.\r\n   * @param config The state config\r\n   */ State.create = function(config) {\n        return new State(config);\n    };\n    /**\r\n   * Creates a new `State` instance for the given `stateValue` and `context` with no actions (side-effects).\r\n   * @param stateValue\r\n   * @param context\r\n   */ State.inert = function(stateValue, context) {\n        if (stateValue instanceof State) {\n            if (!stateValue.actions.length) {\n                return stateValue;\n            }\n            var _event = _actions_js__WEBPACK_IMPORTED_MODULE_4__.initEvent;\n            return new State({\n                value: stateValue.value,\n                context: context,\n                _event: _event,\n                _sessionid: null,\n                historyValue: stateValue.historyValue,\n                history: stateValue.history,\n                activities: stateValue.activities,\n                configuration: stateValue.configuration,\n                transitions: [],\n                children: {}\n            });\n        }\n        return State.from(stateValue, context);\n    };\n    /**\r\n   * Returns an array of all the string leaf state node paths.\r\n   * @param stateValue\r\n   * @param delimiter The character(s) that separate each subpath in the string state node path.\r\n   */ State.prototype.toStrings = function(stateValue, delimiter) {\n        var _this = this;\n        if (stateValue === void 0) {\n            stateValue = this.value;\n        }\n        if (delimiter === void 0) {\n            delimiter = \".\";\n        }\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateValue)) {\n            return [\n                stateValue\n            ];\n        }\n        var valueKeys = Object.keys(stateValue);\n        return valueKeys.concat.apply(valueKeys, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)(valueKeys.map(function(key) {\n            return _this.toStrings(stateValue[key], delimiter).map(function(s) {\n                return key + delimiter + s;\n            });\n        })), false));\n    };\n    State.prototype.toJSON = function() {\n        var _a = this;\n        _a.configuration;\n        _a.transitions;\n        var tags = _a.tags;\n        _a.machine;\n        var jsonValues = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__rest)(_a, [\n            \"configuration\",\n            \"transitions\",\n            \"tags\",\n            \"machine\"\n        ]);\n        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, jsonValues), {\n            tags: Array.from(tags)\n        });\n    };\n    State.prototype.matches = function(parentStateValue) {\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.matchesState)(parentStateValue, this.value);\n    };\n    /**\r\n   * Whether the current state configuration has a state node with the specified `tag`.\r\n   * @param tag\r\n   */ State.prototype.hasTag = function(tag) {\n        return this.tags.has(tag);\n    };\n    /**\r\n   * Determines whether sending the `event` will cause a non-forbidden transition\r\n   * to be selected, even if the transitions have no actions nor\r\n   * change the state value.\r\n   *\r\n   * @param event The event to test\r\n   * @returns Whether the event will cause a transition\r\n   */ State.prototype.can = function(event) {\n        var _a;\n        if (_environment_js__WEBPACK_IMPORTED_MODULE_5__.IS_PRODUCTION) {\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!!this.machine, \"state.can(...) used outside of a machine-created State object; this will always return false.\");\n        }\n        var transitionData = (_a = this.machine) === null || _a === void 0 ? void 0 : _a.getTransitionData(this, event);\n        return !!(transitionData === null || transitionData === void 0 ? void 0 : transitionData.transitions.length) && // Check that at least one transition is not forbidden\n        transitionData.transitions.some(function(t) {\n            return t.target !== undefined || t.actions.length;\n        });\n    };\n    return State;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/State.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/StateNode.js":
/*!*********************************************!*\
  !*** ./node_modules/xstate/es/StateNode.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StateNode: () => (/* binding */ StateNode)\n/* harmony export */ });\n/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_virtual/_tslib.js */ \"(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/xstate/es/utils.js\");\n/* harmony import */ var _State_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./State.js */ \"(ssr)/./node_modules/xstate/es/State.js\");\n/* harmony import */ var _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./actionTypes.js */ \"(ssr)/./node_modules/xstate/es/actionTypes.js\");\n/* harmony import */ var _actions_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./actions.js */ \"(ssr)/./node_modules/xstate/es/actions.js\");\n/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./environment.js */ \"(ssr)/./node_modules/xstate/es/environment.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/xstate/es/constants.js\");\n/* harmony import */ var _stateUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./stateUtils.js */ \"(ssr)/./node_modules/xstate/es/stateUtils.js\");\n/* harmony import */ var _Actor_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Actor.js */ \"(ssr)/./node_modules/xstate/es/Actor.js\");\n/* harmony import */ var _invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./invokeUtils.js */ \"(ssr)/./node_modules/xstate/es/invokeUtils.js\");\n\n\n\n\n\n\n\n\n\n\nvar NULL_EVENT = \"\";\nvar STATE_IDENTIFIER = \"#\";\nvar WILDCARD = \"*\";\nvar EMPTY_OBJECT = {};\nvar isStateId = function(str) {\n    return str[0] === STATE_IDENTIFIER;\n};\nvar createDefaultOptions = function() {\n    return {\n        actions: {},\n        guards: {},\n        services: {},\n        activities: {},\n        delays: {}\n    };\n};\nvar validateArrayifiedTransitions = function(stateNode, event, transitions) {\n    var hasNonLastUnguardedTarget = transitions.slice(0, -1).some(function(transition) {\n        return !(\"cond\" in transition) && !(\"in\" in transition) && ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(transition.target) || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(transition.target));\n    });\n    var eventText = event === NULL_EVENT ? \"the transient event\" : \"event '\".concat(event, \"'\");\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!hasNonLastUnguardedTarget, \"One or more transitions for \".concat(eventText, \" on state '\").concat(stateNode.id, \"' are unreachable. \") + \"Make sure that the default transition is the last one defined.\");\n};\nvar StateNode = /*#__PURE__*/ /** @class */ function() {\n    function StateNode(/**\r\n   * The raw config used to create the machine.\r\n   */ config, options, /**\r\n   * The initial extended state\r\n   */ _context, _stateInfo) {\n        if (_context === void 0) {\n            _context = \"context\" in config ? config.context : undefined;\n        }\n        var _this = this;\n        var _a;\n        this.config = config;\n        this._context = _context;\n        /**\r\n     * The order this state node appears. Corresponds to the implicit SCXML document order.\r\n     */ this.order = -1;\n        this.__xstatenode = true;\n        this.__cache = {\n            events: undefined,\n            relativeValue: new Map(),\n            initialStateValue: undefined,\n            initialState: undefined,\n            on: undefined,\n            transitions: undefined,\n            candidates: {},\n            delayedTransitions: undefined\n        };\n        this.idMap = {};\n        this.tags = [];\n        this.options = Object.assign(createDefaultOptions(), options);\n        this.parent = _stateInfo === null || _stateInfo === void 0 ? void 0 : _stateInfo.parent;\n        this.key = this.config.key || (_stateInfo === null || _stateInfo === void 0 ? void 0 : _stateInfo.key) || this.config.id || \"(machine)\";\n        this.machine = this.parent ? this.parent.machine : this;\n        this.path = this.parent ? this.parent.path.concat(this.key) : [];\n        this.delimiter = this.config.delimiter || (this.parent ? this.parent.delimiter : _constants_js__WEBPACK_IMPORTED_MODULE_1__.STATE_DELIMITER);\n        this.id = this.config.id || (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n            this.machine.key\n        ], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(this.path), false).join(this.delimiter);\n        this.version = this.parent ? this.parent.version : this.config.version;\n        this.type = this.config.type || (this.config.parallel ? \"parallel\" : this.config.states && Object.keys(this.config.states).length ? \"compound\" : this.config.history ? \"history\" : \"atomic\");\n        this.schema = this.parent ? this.machine.schema : (_a = this.config.schema) !== null && _a !== void 0 ? _a : {};\n        this.description = this.config.description;\n        if (!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION) {\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!(\"parallel\" in this.config), 'The \"parallel\" property is deprecated and will be removed in version 4.1. '.concat(this.config.parallel ? \"Replace with `type: 'parallel'`\" : \"Use `type: '\".concat(this.type, \"'`\"), \" in the config for state node '\").concat(this.id, \"' instead.\"));\n        }\n        this.initial = this.config.initial;\n        this.states = this.config.states ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapValues)(this.config.states, function(stateConfig, key) {\n            var _a;\n            var stateNode = new StateNode(stateConfig, {}, undefined, {\n                parent: _this,\n                key: key\n            });\n            Object.assign(_this.idMap, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((_a = {}, _a[stateNode.id] = stateNode, _a), stateNode.idMap));\n            return stateNode;\n        }) : EMPTY_OBJECT; // Document order\n        var order = 0;\n        function dfs(stateNode) {\n            var e_1, _a;\n            stateNode.order = order++;\n            try {\n                for(var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)((0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getAllChildren)(stateNode)), _c = _b.next(); !_c.done; _c = _b.next()){\n                    var child = _c.value;\n                    dfs(child);\n                }\n            } catch (e_1_1) {\n                e_1 = {\n                    error: e_1_1\n                };\n            } finally{\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                } finally{\n                    if (e_1) throw e_1.error;\n                }\n            }\n        }\n        dfs(this); // History config\n        this.history = this.config.history === true ? \"shallow\" : this.config.history || false;\n        this._transient = !!this.config.always || (!this.config.on ? false : Array.isArray(this.config.on) ? this.config.on.some(function(_a) {\n            var event = _a.event;\n            return event === NULL_EVENT;\n        }) : NULL_EVENT in this.config.on);\n        this.strict = !!this.config.strict; // TODO: deprecate (entry)\n        this.onEntry = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.entry || this.config.onEntry).map(function(action) {\n            return (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObject)(action);\n        }); // TODO: deprecate (exit)\n        this.onExit = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.exit || this.config.onExit).map(function(action) {\n            return (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObject)(action);\n        });\n        this.meta = this.config.meta;\n        this.doneData = this.type === \"final\" ? this.config.data : undefined;\n        this.invoke = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.invoke).map(function(invokeConfig, i) {\n            var _a, _b;\n            if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(invokeConfig)) {\n                var invokeId = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createInvokeId)(_this.id, i);\n                _this.machine.options.services = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((_a = {}, _a[invokeId] = invokeConfig, _a), _this.machine.options.services);\n                return (0,_invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__.toInvokeDefinition)({\n                    src: invokeId,\n                    id: invokeId\n                });\n            } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(invokeConfig.src)) {\n                var invokeId = invokeConfig.id || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createInvokeId)(_this.id, i);\n                return (0,_invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__.toInvokeDefinition)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, invokeConfig), {\n                    id: invokeId,\n                    src: invokeConfig.src\n                }));\n            } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(invokeConfig.src) || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(invokeConfig.src)) {\n                var invokeId = invokeConfig.id || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createInvokeId)(_this.id, i);\n                _this.machine.options.services = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((_b = {}, _b[invokeId] = invokeConfig.src, _b), _this.machine.options.services);\n                return (0,_invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__.toInvokeDefinition)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n                    id: invokeId\n                }, invokeConfig), {\n                    src: invokeId\n                }));\n            } else {\n                var invokeSource = invokeConfig.src;\n                return (0,_invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__.toInvokeDefinition)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n                    id: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createInvokeId)(_this.id, i)\n                }, invokeConfig), {\n                    src: invokeSource\n                }));\n            }\n        });\n        this.activities = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.activities).concat(this.invoke).map(function(activity) {\n            return (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActivityDefinition)(activity);\n        });\n        this.transition = this.transition.bind(this);\n        this.tags = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.tags); // TODO: this is the real fix for initialization once\n    // state node getters are deprecated\n    // if (!this.parent) {\n    //   this._init();\n    // }\n    }\n    StateNode.prototype._init = function() {\n        if (this.__cache.transitions) {\n            return;\n        }\n        (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getAllStateNodes)(this).forEach(function(stateNode) {\n            return stateNode.on;\n        });\n    };\n    /**\r\n   * Clones this state machine with custom options and context.\r\n   *\r\n   * @param options Options (actions, guards, activities, services) to recursively merge with the existing options.\r\n   * @param context Custom context (will override predefined context)\r\n   */ StateNode.prototype.withConfig = function(options, context) {\n        var _a = this.options, actions = _a.actions, activities = _a.activities, guards = _a.guards, services = _a.services, delays = _a.delays;\n        return new StateNode(this.config, {\n            actions: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, actions), options.actions),\n            activities: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, activities), options.activities),\n            guards: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, guards), options.guards),\n            services: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, services), options.services),\n            delays: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, delays), options.delays)\n        }, context !== null && context !== void 0 ? context : this.context);\n    };\n    /**\r\n   * Clones this state machine with custom context.\r\n   *\r\n   * @param context Custom context (will override predefined context, not recursive)\r\n   */ StateNode.prototype.withContext = function(context) {\n        return new StateNode(this.config, this.options, context);\n    };\n    Object.defineProperty(StateNode.prototype, \"context\", {\n        get: function() {\n            return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(this._context) ? this._context() : this._context;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StateNode.prototype, \"definition\", {\n        /**\r\n     * The well-structured state node definition.\r\n     */ get: function() {\n            return {\n                id: this.id,\n                key: this.key,\n                version: this.version,\n                context: this.context,\n                type: this.type,\n                initial: this.initial,\n                history: this.history,\n                states: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapValues)(this.states, function(state) {\n                    return state.definition;\n                }),\n                on: this.on,\n                transitions: this.transitions,\n                entry: this.onEntry,\n                exit: this.onExit,\n                activities: this.activities || [],\n                meta: this.meta,\n                order: this.order || -1,\n                data: this.doneData,\n                invoke: this.invoke,\n                description: this.description,\n                tags: this.tags\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    StateNode.prototype.toJSON = function() {\n        return this.definition;\n    };\n    Object.defineProperty(StateNode.prototype, \"on\", {\n        /**\r\n     * The mapping of events to transitions.\r\n     */ get: function() {\n            if (this.__cache.on) {\n                return this.__cache.on;\n            }\n            var transitions = this.transitions;\n            return this.__cache.on = transitions.reduce(function(map, transition) {\n                map[transition.eventType] = map[transition.eventType] || [];\n                map[transition.eventType].push(transition);\n                return map;\n            }, {});\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StateNode.prototype, \"after\", {\n        get: function() {\n            return this.__cache.delayedTransitions || (this.__cache.delayedTransitions = this.getDelayedTransitions(), this.__cache.delayedTransitions);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StateNode.prototype, \"transitions\", {\n        /**\r\n     * All the transitions that can be taken from this state node.\r\n     */ get: function() {\n            return this.__cache.transitions || (this.__cache.transitions = this.formatTransitions(), this.__cache.transitions);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    StateNode.prototype.getCandidates = function(eventName) {\n        if (this.__cache.candidates[eventName]) {\n            return this.__cache.candidates[eventName];\n        }\n        var transient = eventName === NULL_EVENT;\n        var candidates = this.transitions.filter(function(transition) {\n            var sameEventType = transition.eventType === eventName; // null events should only match against eventless transitions\n            return transient ? sameEventType : sameEventType || transition.eventType === WILDCARD;\n        });\n        this.__cache.candidates[eventName] = candidates;\n        return candidates;\n    };\n    /**\r\n   * All delayed transitions from the config.\r\n   */ StateNode.prototype.getDelayedTransitions = function() {\n        var _this = this;\n        var afterConfig = this.config.after;\n        if (!afterConfig) {\n            return [];\n        }\n        var mutateEntryExit = function(delay, i) {\n            var delayRef = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(delay) ? \"\".concat(_this.id, \":delay[\").concat(i, \"]\") : delay;\n            var eventType = (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.after)(delayRef, _this.id);\n            _this.onEntry.push((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.send)(eventType, {\n                delay: delay\n            }));\n            _this.onExit.push((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.cancel)(eventType));\n            return eventType;\n        };\n        var delayedTransitions = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(afterConfig) ? afterConfig.map(function(transition, i) {\n            var eventType = mutateEntryExit(transition.delay, i);\n            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, transition), {\n                event: eventType\n            });\n        }) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(afterConfig).map(function(delay, i) {\n            var configTransition = afterConfig[delay];\n            var resolvedTransition = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(configTransition) ? {\n                target: configTransition\n            } : configTransition;\n            var resolvedDelay = !isNaN(+delay) ? +delay : delay;\n            var eventType = mutateEntryExit(resolvedDelay, i);\n            return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(resolvedTransition).map(function(transition) {\n                return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, transition), {\n                    event: eventType,\n                    delay: resolvedDelay\n                });\n            });\n        }));\n        return delayedTransitions.map(function(delayedTransition) {\n            var delay = delayedTransition.delay;\n            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, _this.formatTransition(delayedTransition)), {\n                delay: delay\n            });\n        });\n    };\n    /**\r\n   * Returns the state nodes represented by the current state value.\r\n   *\r\n   * @param state The state value or State instance\r\n   */ StateNode.prototype.getStateNodes = function(state) {\n        var _a;\n        var _this = this;\n        if (!state) {\n            return [];\n        }\n        var stateValue = state instanceof _State_js__WEBPACK_IMPORTED_MODULE_7__.State ? state.value : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStateValue)(state, this.delimiter);\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateValue)) {\n            var initialStateValue = this.getStateNode(stateValue).initial;\n            return initialStateValue !== undefined ? this.getStateNodes((_a = {}, _a[stateValue] = initialStateValue, _a)) : [\n                this,\n                this.states[stateValue]\n            ];\n        }\n        var subStateKeys = Object.keys(stateValue);\n        var subStateNodes = [\n            this\n        ];\n        subStateNodes.push.apply(subStateNodes, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(subStateKeys.map(function(subStateKey) {\n            return _this.getStateNode(subStateKey).getStateNodes(stateValue[subStateKey]);\n        }))), false));\n        return subStateNodes;\n    };\n    /**\r\n   * Returns `true` if this state node explicitly handles the given event.\r\n   *\r\n   * @param event The event in question\r\n   */ StateNode.prototype.handles = function(event) {\n        var eventType = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.getEventType)(event);\n        return this.events.includes(eventType);\n    };\n    /**\r\n   * Resolves the given `state` to a new `State` instance relative to this machine.\r\n   *\r\n   * This ensures that `.events` and `.nextEvents` represent the correct values.\r\n   *\r\n   * @param state The state to resolve\r\n   */ StateNode.prototype.resolveState = function(state) {\n        var stateFromConfig = state instanceof _State_js__WEBPACK_IMPORTED_MODULE_7__.State ? state : _State_js__WEBPACK_IMPORTED_MODULE_7__.State.create(state);\n        var configuration = Array.from((0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getConfiguration)([], this.getStateNodes(stateFromConfig.value)));\n        return new _State_js__WEBPACK_IMPORTED_MODULE_7__.State((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, stateFromConfig), {\n            value: this.resolve(stateFromConfig.value),\n            configuration: configuration,\n            done: (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isInFinalState)(configuration, this),\n            tags: (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getTagsFromConfiguration)(configuration),\n            machine: this.machine\n        }));\n    };\n    StateNode.prototype.transitionLeafNode = function(stateValue, state, _event) {\n        var stateNode = this.getStateNode(stateValue);\n        var next = stateNode.next(state, _event);\n        if (!next || !next.transitions.length) {\n            return this.next(state, _event);\n        }\n        return next;\n    };\n    StateNode.prototype.transitionCompoundNode = function(stateValue, state, _event) {\n        var subStateKeys = Object.keys(stateValue);\n        var stateNode = this.getStateNode(subStateKeys[0]);\n        var next = stateNode._transition(stateValue[subStateKeys[0]], state, _event);\n        if (!next || !next.transitions.length) {\n            return this.next(state, _event);\n        }\n        return next;\n    };\n    StateNode.prototype.transitionParallelNode = function(stateValue, state, _event) {\n        var e_2, _a;\n        var transitionMap = {};\n        try {\n            for(var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(Object.keys(stateValue)), _c = _b.next(); !_c.done; _c = _b.next()){\n                var subStateKey = _c.value;\n                var subStateValue = stateValue[subStateKey];\n                if (!subStateValue) {\n                    continue;\n                }\n                var subStateNode = this.getStateNode(subStateKey);\n                var next = subStateNode._transition(subStateValue, state, _event);\n                if (next) {\n                    transitionMap[subStateKey] = next;\n                }\n            }\n        } catch (e_2_1) {\n            e_2 = {\n                error: e_2_1\n            };\n        } finally{\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            } finally{\n                if (e_2) throw e_2.error;\n            }\n        }\n        var stateTransitions = Object.keys(transitionMap).map(function(key) {\n            return transitionMap[key];\n        });\n        var enabledTransitions = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(stateTransitions.map(function(st) {\n            return st.transitions;\n        }));\n        var willTransition = stateTransitions.some(function(st) {\n            return st.transitions.length > 0;\n        });\n        if (!willTransition) {\n            return this.next(state, _event);\n        }\n        var configuration = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(transitionMap).map(function(key) {\n            return transitionMap[key].configuration;\n        }));\n        return {\n            transitions: enabledTransitions,\n            exitSet: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(stateTransitions.map(function(t) {\n                return t.exitSet;\n            })),\n            configuration: configuration,\n            source: state,\n            actions: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(transitionMap).map(function(key) {\n                return transitionMap[key].actions;\n            }))\n        };\n    };\n    StateNode.prototype._transition = function(stateValue, state, _event) {\n        // leaf node\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateValue)) {\n            return this.transitionLeafNode(stateValue, state, _event);\n        } // hierarchical node\n        if (Object.keys(stateValue).length === 1) {\n            return this.transitionCompoundNode(stateValue, state, _event);\n        } // orthogonal node\n        return this.transitionParallelNode(stateValue, state, _event);\n    };\n    StateNode.prototype.getTransitionData = function(state, event) {\n        return this._transition(state.value, state, (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(event));\n    };\n    StateNode.prototype.next = function(state, _event) {\n        var e_3, _a;\n        var _this = this;\n        var eventName = _event.name;\n        var actions = [];\n        var nextStateNodes = [];\n        var selectedTransition;\n        try {\n            for(var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(this.getCandidates(eventName)), _c = _b.next(); !_c.done; _c = _b.next()){\n                var candidate = _c.value;\n                var cond = candidate.cond, stateIn = candidate.in;\n                var resolvedContext = state.context;\n                var isInState = stateIn ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateIn) && isStateId(stateIn) ? state.matches((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStateValue)(this.getStateNodeById(stateIn).path, this.delimiter)) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.matchesState)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStateValue)(stateIn, this.delimiter), (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.path)(this.path.slice(0, -2))(state.value)) : true;\n                var guardPassed = false;\n                try {\n                    guardPassed = !cond || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.evaluateGuard)(this.machine, cond, resolvedContext, _event, state);\n                } catch (err) {\n                    throw new Error(\"Unable to evaluate guard '\".concat(cond.name || cond.type, \"' in transition for event '\").concat(eventName, \"' in state node '\").concat(this.id, \"':\\n\").concat(err.message));\n                }\n                if (guardPassed && isInState) {\n                    if (candidate.target !== undefined) {\n                        nextStateNodes = candidate.target;\n                    }\n                    actions.push.apply(actions, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(candidate.actions), false));\n                    selectedTransition = candidate;\n                    break;\n                }\n            }\n        } catch (e_3_1) {\n            e_3 = {\n                error: e_3_1\n            };\n        } finally{\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            } finally{\n                if (e_3) throw e_3.error;\n            }\n        }\n        if (!selectedTransition) {\n            return undefined;\n        }\n        if (!nextStateNodes.length) {\n            return {\n                transitions: [\n                    selectedTransition\n                ],\n                exitSet: [],\n                configuration: state.value ? [\n                    this\n                ] : [],\n                source: state,\n                actions: actions\n            };\n        }\n        var allNextStateNodes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(nextStateNodes.map(function(stateNode) {\n            return _this.getRelativeStateNodes(stateNode, state.historyValue);\n        }));\n        var isInternal = !!selectedTransition.internal;\n        return {\n            transitions: [\n                selectedTransition\n            ],\n            exitSet: isInternal ? [] : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(nextStateNodes.map(function(targetNode) {\n                return _this.getPotentiallyReenteringNodes(targetNode);\n            })),\n            configuration: allNextStateNodes,\n            source: state,\n            actions: actions\n        };\n    }; // even though the name of this function mentions reentry nodes\n    // we are pushing its result into `exitSet`\n    // that's because what we exit might be reentered (it's an invariant of reentrancy)\n    StateNode.prototype.getPotentiallyReenteringNodes = function(targetNode) {\n        if (this.order < targetNode.order) {\n            return [\n                this\n            ];\n        }\n        var nodes = [];\n        var marker = this;\n        var possibleAncestor = targetNode;\n        while(marker && marker !== possibleAncestor){\n            nodes.push(marker);\n            marker = marker.parent;\n        }\n        if (marker !== possibleAncestor) {\n            // we never got to `possibleAncestor`, therefore the initial `marker` \"escapes\" it\n            // it's in a different part of the tree so no states will be reentered for such an external transition\n            return [];\n        }\n        nodes.push(possibleAncestor);\n        return nodes;\n    };\n    StateNode.prototype.getActions = function(resolvedConfig, isDone, transition, currentContext, _event, prevState, predictableExec) {\n        var e_4, _a, e_5, _b;\n        var _this = this;\n        var prevConfig = prevState ? (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getConfiguration)([], this.getStateNodes(prevState.value)) : [];\n        var entrySet = new Set();\n        try {\n            for(var _c = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(Array.from(resolvedConfig).sort(function(a, b) {\n                return a.order - b.order;\n            })), _d = _c.next(); !_d.done; _d = _c.next()){\n                var sn = _d.value;\n                if (!(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.has)(prevConfig, sn) || (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.has)(transition.exitSet, sn) || sn.parent && entrySet.has(sn.parent)) {\n                    entrySet.add(sn);\n                }\n            }\n        } catch (e_4_1) {\n            e_4 = {\n                error: e_4_1\n            };\n        } finally{\n            try {\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n            } finally{\n                if (e_4) throw e_4.error;\n            }\n        }\n        try {\n            for(var prevConfig_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(prevConfig), prevConfig_1_1 = prevConfig_1.next(); !prevConfig_1_1.done; prevConfig_1_1 = prevConfig_1.next()){\n                var sn = prevConfig_1_1.value;\n                if (!(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.has)(resolvedConfig, sn) || (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.has)(transition.exitSet, sn.parent)) {\n                    transition.exitSet.push(sn);\n                }\n            }\n        } catch (e_5_1) {\n            e_5 = {\n                error: e_5_1\n            };\n        } finally{\n            try {\n                if (prevConfig_1_1 && !prevConfig_1_1.done && (_b = prevConfig_1.return)) _b.call(prevConfig_1);\n            } finally{\n                if (e_5) throw e_5.error;\n            }\n        }\n        transition.exitSet.sort(function(a, b) {\n            return b.order - a.order;\n        });\n        var entryStates = Array.from(entrySet).sort(function(a, b) {\n            return a.order - b.order;\n        });\n        var exitStates = new Set(transition.exitSet);\n        var doneEvents = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(entryStates.map(function(sn) {\n            var events = [];\n            if (sn.type !== \"final\") {\n                return events;\n            }\n            var parent = sn.parent;\n            if (!parent.parent) {\n                return events;\n            }\n            events.push((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.done)(sn.id, sn.doneData), (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.done)(parent.id, sn.doneData ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapContext)(sn.doneData, currentContext, _event) : undefined));\n            var grandparent = parent.parent;\n            if (grandparent.type === \"parallel\") {\n                if ((0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getChildren)(grandparent).every(function(parentNode) {\n                    return (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isInFinalState)(transition.configuration, parentNode);\n                })) {\n                    events.push((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.done)(grandparent.id));\n                }\n            }\n            return events;\n        }));\n        var entryActions = entryStates.map(function(stateNode) {\n            var entryActions = stateNode.onEntry;\n            var invokeActions = stateNode.activities.map(function(activity) {\n                return (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.start)(activity);\n            });\n            return {\n                type: \"entry\",\n                actions: (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)(predictableExec ? (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(entryActions), false), (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(invokeActions), false) : (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(invokeActions), false), (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(entryActions), false), _this.machine.options.actions)\n            };\n        }).concat({\n            type: \"state_done\",\n            actions: doneEvents.map(function(event) {\n                return (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.raise)(event);\n            })\n        });\n        var exitActions = Array.from(exitStates).map(function(stateNode) {\n            return {\n                type: \"exit\",\n                actions: (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(stateNode.onExit), false), (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(stateNode.activities.map(function(activity) {\n                    return (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.stop)(activity);\n                })), false), _this.machine.options.actions)\n            };\n        });\n        var actions = exitActions.concat({\n            type: \"transition\",\n            actions: (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)(transition.actions, this.machine.options.actions)\n        }).concat(entryActions);\n        if (isDone) {\n            var stopActions = (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(resolvedConfig), false).sort(function(a, b) {\n                return b.order - a.order;\n            }).map(function(stateNode) {\n                return stateNode.onExit;\n            })), this.machine.options.actions).filter(function(action) {\n                return !(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isRaisableAction)(action);\n            });\n            return actions.concat({\n                type: \"stop\",\n                actions: stopActions\n            });\n        }\n        return actions;\n    };\n    /**\r\n   * Determines the next state given the current `state` and sent `event`.\r\n   *\r\n   * @param state The current State instance or state value\r\n   * @param event The event that was sent at the current state\r\n   * @param context The current context (extended state) of the current state\r\n   */ StateNode.prototype.transition = function(state, event, context, exec) {\n        if (state === void 0) {\n            state = this.initialState;\n        }\n        var _event = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(event);\n        var currentState;\n        if (state instanceof _State_js__WEBPACK_IMPORTED_MODULE_7__.State) {\n            currentState = context === undefined ? state : this.resolveState(_State_js__WEBPACK_IMPORTED_MODULE_7__.State.from(state, context));\n        } else {\n            var resolvedStateValue = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(state) ? this.resolve((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.pathToStateValue)(this.getResolvedPath(state))) : this.resolve(state);\n            var resolvedContext = context !== null && context !== void 0 ? context : this.machine.context;\n            currentState = this.resolveState(_State_js__WEBPACK_IMPORTED_MODULE_7__.State.from(resolvedStateValue, resolvedContext));\n        }\n        if (!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION && _event.name === WILDCARD) {\n            throw new Error(\"An event cannot have the wildcard type ('\".concat(WILDCARD, \"')\"));\n        }\n        if (this.strict) {\n            if (!this.events.includes(_event.name) && !(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isBuiltInEvent)(_event.name)) {\n                throw new Error(\"Machine '\".concat(this.id, \"' does not accept event '\").concat(_event.name, \"'\"));\n            }\n        }\n        var stateTransition = this._transition(currentState.value, currentState, _event) || {\n            transitions: [],\n            configuration: [],\n            exitSet: [],\n            source: currentState,\n            actions: []\n        };\n        var prevConfig = (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getConfiguration)([], this.getStateNodes(currentState.value));\n        var resolvedConfig = stateTransition.configuration.length ? (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getConfiguration)(prevConfig, stateTransition.configuration) : prevConfig;\n        stateTransition.configuration = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(resolvedConfig), false);\n        return this.resolveTransition(stateTransition, currentState, currentState.context, exec, _event);\n    };\n    StateNode.prototype.resolveRaisedTransition = function(state, _event, originalEvent, predictableExec) {\n        var _a;\n        var currentActions = state.actions;\n        state = this.transition(state, _event, undefined, predictableExec); // Save original event to state\n        // TODO: this should be the raised event! Delete in V5 (breaking)\n        state._event = originalEvent;\n        state.event = originalEvent.data;\n        (_a = state.actions).unshift.apply(_a, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(currentActions), false));\n        return state;\n    };\n    StateNode.prototype.resolveTransition = function(stateTransition, currentState, context, predictableExec, _event) {\n        var e_6, _a, e_7, _b;\n        var _this = this;\n        if (_event === void 0) {\n            _event = _actions_js__WEBPACK_IMPORTED_MODULE_5__.initEvent;\n        }\n        var configuration = stateTransition.configuration; // Transition will \"apply\" if:\n        // - this is the initial state (there is no current state)\n        // - OR there are transitions\n        var willTransition = !currentState || stateTransition.transitions.length > 0;\n        var resolvedConfiguration = willTransition ? stateTransition.configuration : currentState ? currentState.configuration : [];\n        var isDone = (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isInFinalState)(resolvedConfiguration, this);\n        var resolvedStateValue = willTransition ? (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getValue)(this.machine, configuration) : undefined;\n        var historyValue = currentState ? currentState.historyValue ? currentState.historyValue : stateTransition.source ? this.machine.historyValue(currentState.value) : undefined : undefined;\n        var actionBlocks = this.getActions(new Set(resolvedConfiguration), isDone, stateTransition, context, _event, currentState, predictableExec);\n        var activities = currentState ? (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, currentState.activities) : {};\n        try {\n            for(var actionBlocks_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(actionBlocks), actionBlocks_1_1 = actionBlocks_1.next(); !actionBlocks_1_1.done; actionBlocks_1_1 = actionBlocks_1.next()){\n                var block = actionBlocks_1_1.value;\n                try {\n                    for(var _c = (e_7 = void 0, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(block.actions)), _d = _c.next(); !_d.done; _d = _c.next()){\n                        var action = _d.value;\n                        if (action.type === _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.start) {\n                            activities[action.activity.id || action.activity.type] = action;\n                        } else if (action.type === _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.stop) {\n                            activities[action.activity.id || action.activity.type] = false;\n                        }\n                    }\n                } catch (e_7_1) {\n                    e_7 = {\n                        error: e_7_1\n                    };\n                } finally{\n                    try {\n                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);\n                    } finally{\n                        if (e_7) throw e_7.error;\n                    }\n                }\n            }\n        } catch (e_6_1) {\n            e_6 = {\n                error: e_6_1\n            };\n        } finally{\n            try {\n                if (actionBlocks_1_1 && !actionBlocks_1_1.done && (_a = actionBlocks_1.return)) _a.call(actionBlocks_1);\n            } finally{\n                if (e_6) throw e_6.error;\n            }\n        }\n        var _e = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.resolveActions)(this, currentState, context, _event, actionBlocks, predictableExec, this.machine.config.predictableActionArguments || this.machine.config.preserveActionOrder), 2), resolvedActions = _e[0], updatedContext = _e[1];\n        var _f = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.partition)(resolvedActions, _utils_js__WEBPACK_IMPORTED_MODULE_0__.isRaisableAction), 2), raisedEvents = _f[0], nonRaisedActions = _f[1];\n        var invokeActions = resolvedActions.filter(function(action) {\n            var _a;\n            return action.type === _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.start && ((_a = action.activity) === null || _a === void 0 ? void 0 : _a.type) === _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.invoke;\n        });\n        var children = invokeActions.reduce(function(acc, action) {\n            acc[action.activity.id] = (0,_Actor_js__WEBPACK_IMPORTED_MODULE_9__.createInvocableActor)(action.activity, _this.machine, updatedContext, _event);\n            return acc;\n        }, currentState ? (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, currentState.children) : {});\n        var nextState = new _State_js__WEBPACK_IMPORTED_MODULE_7__.State({\n            value: resolvedStateValue || currentState.value,\n            context: updatedContext,\n            _event: _event,\n            // Persist _sessionid between states\n            _sessionid: currentState ? currentState._sessionid : null,\n            historyValue: resolvedStateValue ? historyValue ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.updateHistoryValue)(historyValue, resolvedStateValue) : undefined : currentState ? currentState.historyValue : undefined,\n            history: !resolvedStateValue || stateTransition.source ? currentState : undefined,\n            actions: resolvedStateValue ? nonRaisedActions : [],\n            activities: resolvedStateValue ? activities : currentState ? currentState.activities : {},\n            events: [],\n            configuration: resolvedConfiguration,\n            transitions: stateTransition.transitions,\n            children: children,\n            done: isDone,\n            tags: (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getTagsFromConfiguration)(resolvedConfiguration),\n            machine: this\n        });\n        var didUpdateContext = context !== updatedContext;\n        nextState.changed = _event.name === _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.update || didUpdateContext; // Dispose of penultimate histories to prevent memory leaks\n        var history = nextState.history;\n        if (history) {\n            delete history.history;\n        } // There are transient transitions if the machine is not in a final state\n        // and if some of the state nodes have transient (\"always\") transitions.\n        var hasAlwaysTransitions = !isDone && (this._transient || configuration.some(function(stateNode) {\n            return stateNode._transient;\n        })); // If there are no enabled transitions, check if there are transient transitions.\n        // If there are transient transitions, continue checking for more transitions\n        // because an transient transition should be triggered even if there are no\n        // enabled transitions.\n        //\n        // If we're already working on an transient transition then stop to prevent an infinite loop.\n        //\n        // Otherwise, if there are no enabled nor transient transitions, we are done.\n        if (!willTransition && (!hasAlwaysTransitions || _event.name === NULL_EVENT)) {\n            return nextState;\n        }\n        var maybeNextState = nextState;\n        if (!isDone) {\n            if (hasAlwaysTransitions) {\n                maybeNextState = this.resolveRaisedTransition(maybeNextState, {\n                    type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.nullEvent\n                }, _event, predictableExec);\n            }\n            while(raisedEvents.length){\n                var raisedEvent = raisedEvents.shift();\n                maybeNextState = this.resolveRaisedTransition(maybeNextState, raisedEvent._event, _event, predictableExec);\n            }\n        } // Detect if state changed\n        var changed = maybeNextState.changed || (history ? !!maybeNextState.actions.length || didUpdateContext || typeof history.value !== typeof maybeNextState.value || !(0,_State_js__WEBPACK_IMPORTED_MODULE_7__.stateValuesEqual)(maybeNextState.value, history.value) : undefined);\n        maybeNextState.changed = changed; // Preserve original history after raised events\n        maybeNextState.history = history;\n        return maybeNextState;\n    };\n    /**\r\n   * Returns the child state node from its relative `stateKey`, or throws.\r\n   */ StateNode.prototype.getStateNode = function(stateKey) {\n        if (isStateId(stateKey)) {\n            return this.machine.getStateNodeById(stateKey);\n        }\n        if (!this.states) {\n            throw new Error(\"Unable to retrieve child state '\".concat(stateKey, \"' from '\").concat(this.id, \"'; no child states exist.\"));\n        }\n        var result = this.states[stateKey];\n        if (!result) {\n            throw new Error(\"Child state '\".concat(stateKey, \"' does not exist on '\").concat(this.id, \"'\"));\n        }\n        return result;\n    };\n    /**\r\n   * Returns the state node with the given `stateId`, or throws.\r\n   *\r\n   * @param stateId The state ID. The prefix \"#\" is removed.\r\n   */ StateNode.prototype.getStateNodeById = function(stateId) {\n        var resolvedStateId = isStateId(stateId) ? stateId.slice(STATE_IDENTIFIER.length) : stateId;\n        if (resolvedStateId === this.id) {\n            return this;\n        }\n        var stateNode = this.machine.idMap[resolvedStateId];\n        if (!stateNode) {\n            throw new Error(\"Child state node '#\".concat(resolvedStateId, \"' does not exist on machine '\").concat(this.id, \"'\"));\n        }\n        return stateNode;\n    };\n    /**\r\n   * Returns the relative state node from the given `statePath`, or throws.\r\n   *\r\n   * @param statePath The string or string array relative path to the state node.\r\n   */ StateNode.prototype.getStateNodeByPath = function(statePath) {\n        if (typeof statePath === \"string\" && isStateId(statePath)) {\n            try {\n                return this.getStateNodeById(statePath.slice(1));\n            } catch (e) {\n            // throw e;\n            }\n        }\n        var arrayStatePath = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePath)(statePath, this.delimiter).slice();\n        var currentStateNode = this;\n        while(arrayStatePath.length){\n            var key = arrayStatePath.shift();\n            if (!key.length) {\n                break;\n            }\n            currentStateNode = currentStateNode.getStateNode(key);\n        }\n        return currentStateNode;\n    };\n    /**\r\n   * Resolves a partial state value with its full representation in this machine.\r\n   *\r\n   * @param stateValue The partial state value to resolve.\r\n   */ StateNode.prototype.resolve = function(stateValue) {\n        var _a;\n        var _this = this;\n        if (!stateValue) {\n            return this.initialStateValue || EMPTY_OBJECT; // TODO: type-specific properties\n        }\n        switch(this.type){\n            case \"parallel\":\n                return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapValues)(this.initialStateValue, function(subStateValue, subStateKey) {\n                    return subStateValue ? _this.getStateNode(subStateKey).resolve(stateValue[subStateKey] || subStateValue) : EMPTY_OBJECT;\n                });\n            case \"compound\":\n                if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateValue)) {\n                    var subStateNode = this.getStateNode(stateValue);\n                    if (subStateNode.type === \"parallel\" || subStateNode.type === \"compound\") {\n                        return _a = {}, _a[stateValue] = subStateNode.initialStateValue, _a;\n                    }\n                    return stateValue;\n                }\n                if (!Object.keys(stateValue).length) {\n                    return this.initialStateValue || {};\n                }\n                return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapValues)(stateValue, function(subStateValue, subStateKey) {\n                    return subStateValue ? _this.getStateNode(subStateKey).resolve(subStateValue) : EMPTY_OBJECT;\n                });\n            default:\n                return stateValue || EMPTY_OBJECT;\n        }\n    };\n    StateNode.prototype.getResolvedPath = function(stateIdentifier) {\n        if (isStateId(stateIdentifier)) {\n            var stateNode = this.machine.idMap[stateIdentifier.slice(STATE_IDENTIFIER.length)];\n            if (!stateNode) {\n                throw new Error(\"Unable to find state node '\".concat(stateIdentifier, \"'\"));\n            }\n            return stateNode.path;\n        }\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePath)(stateIdentifier, this.delimiter);\n    };\n    Object.defineProperty(StateNode.prototype, \"initialStateValue\", {\n        get: function() {\n            var _a;\n            if (this.__cache.initialStateValue) {\n                return this.__cache.initialStateValue;\n            }\n            var initialStateValue;\n            if (this.type === \"parallel\") {\n                initialStateValue = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapFilterValues)(this.states, function(state) {\n                    return state.initialStateValue || EMPTY_OBJECT;\n                }, function(stateNode) {\n                    return !(stateNode.type === \"history\");\n                });\n            } else if (this.initial !== undefined) {\n                if (!this.states[this.initial]) {\n                    throw new Error(\"Initial state '\".concat(this.initial, \"' not found on '\").concat(this.key, \"'\"));\n                }\n                initialStateValue = (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isLeafNode)(this.states[this.initial]) ? this.initial : (_a = {}, _a[this.initial] = this.states[this.initial].initialStateValue, _a);\n            } else {\n                // The finite state value of a machine without child states is just an empty object\n                initialStateValue = {};\n            }\n            this.__cache.initialStateValue = initialStateValue;\n            return this.__cache.initialStateValue;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    StateNode.prototype.getInitialState = function(stateValue, context) {\n        this._init(); // TODO: this should be in the constructor (see note in constructor)\n        var configuration = this.getStateNodes(stateValue);\n        return this.resolveTransition({\n            configuration: configuration,\n            exitSet: [],\n            transitions: [],\n            source: undefined,\n            actions: []\n        }, undefined, context !== null && context !== void 0 ? context : this.machine.context, undefined);\n    };\n    Object.defineProperty(StateNode.prototype, \"initialState\", {\n        /**\r\n     * The initial State instance, which includes all actions to be executed from\r\n     * entering the initial state.\r\n     */ get: function() {\n            var initialStateValue = this.initialStateValue;\n            if (!initialStateValue) {\n                throw new Error(\"Cannot retrieve initial state from simple state '\".concat(this.id, \"'.\"));\n            }\n            return this.getInitialState(initialStateValue);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StateNode.prototype, \"target\", {\n        /**\r\n     * The target state value of the history state node, if it exists. This represents the\r\n     * default state value to transition to if no history value exists yet.\r\n     */ get: function() {\n            var target;\n            if (this.type === \"history\") {\n                var historyConfig = this.config;\n                if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(historyConfig.target)) {\n                    target = isStateId(historyConfig.target) ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.pathToStateValue)(this.machine.getStateNodeById(historyConfig.target).path.slice(this.path.length - 1)) : historyConfig.target;\n                } else {\n                    target = historyConfig.target;\n                }\n            }\n            return target;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\r\n   * Returns the leaf nodes from a state path relative to this state node.\r\n   *\r\n   * @param relativeStateId The relative state path to retrieve the state nodes\r\n   * @param history The previous state to retrieve history\r\n   * @param resolve Whether state nodes should resolve to initial child state nodes\r\n   */ StateNode.prototype.getRelativeStateNodes = function(relativeStateId, historyValue, resolve) {\n        if (resolve === void 0) {\n            resolve = true;\n        }\n        return resolve ? relativeStateId.type === \"history\" ? relativeStateId.resolveHistory(historyValue) : relativeStateId.initialStateNodes : [\n            relativeStateId\n        ];\n    };\n    Object.defineProperty(StateNode.prototype, \"initialStateNodes\", {\n        get: function() {\n            var _this = this;\n            if ((0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isLeafNode)(this)) {\n                return [\n                    this\n                ];\n            } // Case when state node is compound but no initial state is defined\n            if (this.type === \"compound\" && !this.initial) {\n                if (!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION) {\n                    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, \"Compound state node '\".concat(this.id, \"' has no initial state.\"));\n                }\n                return [\n                    this\n                ];\n            }\n            var initialStateNodePaths = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePaths)(this.initialStateValue);\n            return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(initialStateNodePaths.map(function(initialPath) {\n                return _this.getFromRelativePath(initialPath);\n            }));\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\r\n   * Retrieves state nodes from a relative path to this state node.\r\n   *\r\n   * @param relativePath The relative path from this state node\r\n   * @param historyValue\r\n   */ StateNode.prototype.getFromRelativePath = function(relativePath) {\n        if (!relativePath.length) {\n            return [\n                this\n            ];\n        }\n        var _a = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(relativePath), stateKey = _a[0], childStatePath = _a.slice(1);\n        if (!this.states) {\n            throw new Error(\"Cannot retrieve subPath '\".concat(stateKey, \"' from node with no states\"));\n        }\n        var childStateNode = this.getStateNode(stateKey);\n        if (childStateNode.type === \"history\") {\n            return childStateNode.resolveHistory();\n        }\n        if (!this.states[stateKey]) {\n            throw new Error(\"Child state '\".concat(stateKey, \"' does not exist on '\").concat(this.id, \"'\"));\n        }\n        return this.states[stateKey].getFromRelativePath(childStatePath);\n    };\n    StateNode.prototype.historyValue = function(relativeStateValue) {\n        if (!Object.keys(this.states).length) {\n            return undefined;\n        }\n        return {\n            current: relativeStateValue || this.initialStateValue,\n            states: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapFilterValues)(this.states, function(stateNode, key) {\n                if (!relativeStateValue) {\n                    return stateNode.historyValue();\n                }\n                var subStateValue = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(relativeStateValue) ? undefined : relativeStateValue[key];\n                return stateNode.historyValue(subStateValue || stateNode.initialStateValue);\n            }, function(stateNode) {\n                return !stateNode.history;\n            })\n        };\n    };\n    /**\r\n   * Resolves to the historical value(s) of the parent state node,\r\n   * represented by state nodes.\r\n   *\r\n   * @param historyValue\r\n   */ StateNode.prototype.resolveHistory = function(historyValue) {\n        var _this = this;\n        if (this.type !== \"history\") {\n            return [\n                this\n            ];\n        }\n        var parent = this.parent;\n        if (!historyValue) {\n            var historyTarget = this.target;\n            return historyTarget ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePaths)(historyTarget).map(function(relativeChildPath) {\n                return parent.getFromRelativePath(relativeChildPath);\n            })) : parent.initialStateNodes;\n        }\n        var subHistoryValue = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.nestedPath)(parent.path, \"states\")(historyValue).current;\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(subHistoryValue)) {\n            return [\n                parent.getStateNode(subHistoryValue)\n            ];\n        }\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePaths)(subHistoryValue).map(function(subStatePath) {\n            return _this.history === \"deep\" ? parent.getFromRelativePath(subStatePath) : [\n                parent.states[subStatePath[0]]\n            ];\n        }));\n    };\n    Object.defineProperty(StateNode.prototype, \"stateIds\", {\n        /**\r\n     * All the state node IDs of this state node and its descendant state nodes.\r\n     */ get: function() {\n            var _this = this;\n            var childStateIds = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(this.states).map(function(stateKey) {\n                return _this.states[stateKey].stateIds;\n            }));\n            return [\n                this.id\n            ].concat(childStateIds);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StateNode.prototype, \"events\", {\n        /**\r\n     * All the event types accepted by this state node and its descendants.\r\n     */ get: function() {\n            var e_8, _a, e_9, _b;\n            if (this.__cache.events) {\n                return this.__cache.events;\n            }\n            var states = this.states;\n            var events = new Set(this.ownEvents);\n            if (states) {\n                try {\n                    for(var _c = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(Object.keys(states)), _d = _c.next(); !_d.done; _d = _c.next()){\n                        var stateId = _d.value;\n                        var state = states[stateId];\n                        if (state.states) {\n                            try {\n                                for(var _e = (e_9 = void 0, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(state.events)), _f = _e.next(); !_f.done; _f = _e.next()){\n                                    var event_1 = _f.value;\n                                    events.add(\"\".concat(event_1));\n                                }\n                            } catch (e_9_1) {\n                                e_9 = {\n                                    error: e_9_1\n                                };\n                            } finally{\n                                try {\n                                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n                                } finally{\n                                    if (e_9) throw e_9.error;\n                                }\n                            }\n                        }\n                    }\n                } catch (e_8_1) {\n                    e_8 = {\n                        error: e_8_1\n                    };\n                } finally{\n                    try {\n                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n                    } finally{\n                        if (e_8) throw e_8.error;\n                    }\n                }\n            }\n            return this.__cache.events = Array.from(events);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StateNode.prototype, \"ownEvents\", {\n        /**\r\n     * All the events that have transitions directly from this state node.\r\n     *\r\n     * Excludes any inert events.\r\n     */ get: function() {\n            var events = new Set(this.transitions.filter(function(transition) {\n                return !(!transition.target && !transition.actions.length && transition.internal);\n            }).map(function(transition) {\n                return transition.eventType;\n            }));\n            return Array.from(events);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    StateNode.prototype.resolveTarget = function(_target) {\n        var _this = this;\n        if (_target === undefined) {\n            // an undefined target signals that the state node should not transition from that state when receiving that event\n            return undefined;\n        }\n        return _target.map(function(target) {\n            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(target)) {\n                return target;\n            }\n            var isInternalTarget = target[0] === _this.delimiter; // If internal target is defined on machine,\n            // do not include machine key on target\n            if (isInternalTarget && !_this.parent) {\n                return _this.getStateNodeByPath(target.slice(1));\n            }\n            var resolvedTarget = isInternalTarget ? _this.key + target : target;\n            if (_this.parent) {\n                try {\n                    var targetStateNode = _this.parent.getStateNodeByPath(resolvedTarget);\n                    return targetStateNode;\n                } catch (err) {\n                    throw new Error(\"Invalid transition definition for state node '\".concat(_this.id, \"':\\n\").concat(err.message));\n                }\n            } else {\n                return _this.getStateNodeByPath(resolvedTarget);\n            }\n        });\n    };\n    StateNode.prototype.formatTransition = function(transitionConfig) {\n        var _this = this;\n        var normalizedTarget = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.normalizeTarget)(transitionConfig.target);\n        var internal = \"internal\" in transitionConfig ? transitionConfig.internal : normalizedTarget ? normalizedTarget.some(function(_target) {\n            return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(_target) && _target[0] === _this.delimiter;\n        }) : true;\n        var guards = this.machine.options.guards;\n        var target = this.resolveTarget(normalizedTarget);\n        var transition = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, transitionConfig), {\n            actions: (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(transitionConfig.actions)),\n            cond: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toGuard)(transitionConfig.cond, guards),\n            target: target,\n            source: this,\n            internal: internal,\n            eventType: transitionConfig.event,\n            toJSON: function() {\n                return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, transition), {\n                    target: transition.target ? transition.target.map(function(t) {\n                        return \"#\".concat(t.id);\n                    }) : undefined,\n                    source: \"#\".concat(_this.id)\n                });\n            }\n        });\n        return transition;\n    };\n    StateNode.prototype.formatTransitions = function() {\n        var e_10, _a;\n        var _this = this;\n        var onConfig;\n        if (!this.config.on) {\n            onConfig = [];\n        } else if (Array.isArray(this.config.on)) {\n            onConfig = this.config.on;\n        } else {\n            var _b = this.config.on, _c = WILDCARD, _d = _b[_c], wildcardConfigs = _d === void 0 ? [] : _d, strictTransitionConfigs_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__rest)(_b, [\n                typeof _c === \"symbol\" ? _c : _c + \"\"\n            ]);\n            onConfig = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(strictTransitionConfigs_1).map(function(key) {\n                if (!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION && key === NULL_EVENT) {\n                    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, \"Empty string transition configs (e.g., `{ on: { '': ... }}`) for transient transitions are deprecated. Specify the transition in the `{ always: ... }` property instead. \" + 'Please check the `on` configuration for \"#'.concat(_this.id, '\".'));\n                }\n                var transitionConfigArray = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(key, strictTransitionConfigs_1[key]);\n                if (!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION) {\n                    validateArrayifiedTransitions(_this, key, transitionConfigArray);\n                }\n                return transitionConfigArray;\n            }).concat((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(WILDCARD, wildcardConfigs)));\n        }\n        var eventlessConfig = this.config.always ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(\"\", this.config.always) : [];\n        var doneConfig = this.config.onDone ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(String((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.done)(this.id)), this.config.onDone) : [];\n        if (!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION) {\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!(this.config.onDone && !this.parent), 'Root nodes cannot have an \".onDone\" transition. Please check the config of \"'.concat(this.id, '\".'));\n        }\n        var invokeConfig = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(this.invoke.map(function(invokeDef) {\n            var settleTransitions = [];\n            if (invokeDef.onDone) {\n                settleTransitions.push.apply(settleTransitions, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(String((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.doneInvoke)(invokeDef.id)), invokeDef.onDone)), false));\n            }\n            if (invokeDef.onError) {\n                settleTransitions.push.apply(settleTransitions, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(String((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.error)(invokeDef.id)), invokeDef.onError)), false));\n            }\n            return settleTransitions;\n        }));\n        var delayedTransitions = this.after;\n        var formattedTransitions = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(doneConfig), false), (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(invokeConfig), false), (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(onConfig), false), (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(eventlessConfig), false).map(function(transitionConfig) {\n            return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(transitionConfig).map(function(transition) {\n                return _this.formatTransition(transition);\n            });\n        }));\n        try {\n            for(var delayedTransitions_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(delayedTransitions), delayedTransitions_1_1 = delayedTransitions_1.next(); !delayedTransitions_1_1.done; delayedTransitions_1_1 = delayedTransitions_1.next()){\n                var delayedTransition = delayedTransitions_1_1.value;\n                formattedTransitions.push(delayedTransition);\n            }\n        } catch (e_10_1) {\n            e_10 = {\n                error: e_10_1\n            };\n        } finally{\n            try {\n                if (delayedTransitions_1_1 && !delayedTransitions_1_1.done && (_a = delayedTransitions_1.return)) _a.call(delayedTransitions_1);\n            } finally{\n                if (e_10) throw e_10.error;\n            }\n        }\n        return formattedTransitions;\n    };\n    return StateNode;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/StateNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/_virtual/_tslib.js":
/*!***************************************************!*\
  !*** ./node_modules/xstate/es/_virtual/_tslib.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __assign: () => (/* binding */ __assign),\n/* harmony export */   __read: () => (/* binding */ __read),\n/* harmony export */   __rest: () => (/* binding */ __rest),\n/* harmony export */   __spreadArray: () => (/* binding */ __spreadArray),\n/* harmony export */   __values: () => (/* binding */ __values)\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ var __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction __values(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction __read(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n}\nfunction __spreadArray(to, from, pack) {\n    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/actionTypes.js":
/*!***********************************************!*\
  !*** ./node_modules/xstate/es/actionTypes.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   after: () => (/* binding */ after),\n/* harmony export */   assign: () => (/* binding */ assign),\n/* harmony export */   cancel: () => (/* binding */ cancel),\n/* harmony export */   choose: () => (/* binding */ choose),\n/* harmony export */   doneState: () => (/* binding */ doneState),\n/* harmony export */   error: () => (/* binding */ error),\n/* harmony export */   errorExecution: () => (/* binding */ errorExecution),\n/* harmony export */   errorPlatform: () => (/* binding */ errorPlatform),\n/* harmony export */   init: () => (/* binding */ init),\n/* harmony export */   invoke: () => (/* binding */ invoke),\n/* harmony export */   log: () => (/* binding */ log),\n/* harmony export */   nullEvent: () => (/* binding */ nullEvent),\n/* harmony export */   pure: () => (/* binding */ pure),\n/* harmony export */   raise: () => (/* binding */ raise),\n/* harmony export */   send: () => (/* binding */ send),\n/* harmony export */   start: () => (/* binding */ start),\n/* harmony export */   stop: () => (/* binding */ stop),\n/* harmony export */   update: () => (/* binding */ update)\n/* harmony export */ });\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/xstate/es/types.js\");\n\nvar start = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Start;\nvar stop = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Stop;\nvar raise = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Raise;\nvar send = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Send;\nvar cancel = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Cancel;\nvar nullEvent = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.NullEvent;\nvar assign = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Assign;\nvar after = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.After;\nvar doneState = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.DoneState;\nvar log = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Log;\nvar init = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Init;\nvar invoke = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Invoke;\nvar errorExecution = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.ErrorExecution;\nvar errorPlatform = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.ErrorPlatform;\nvar error = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.ErrorCustom;\nvar update = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Update;\nvar choose = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Choose;\nvar pure = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Pure;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL2FjdGlvblR5cGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBeUM7QUFFekMsSUFBSUMsUUFBUUQsa0RBQVdBLENBQUNFLEtBQUs7QUFDN0IsSUFBSUMsT0FBT0gsa0RBQVdBLENBQUNJLElBQUk7QUFDM0IsSUFBSUMsUUFBUUwsa0RBQVdBLENBQUNNLEtBQUs7QUFDN0IsSUFBSUMsT0FBT1Asa0RBQVdBLENBQUNRLElBQUk7QUFDM0IsSUFBSUMsU0FBU1Qsa0RBQVdBLENBQUNVLE1BQU07QUFDL0IsSUFBSUMsWUFBWVgsa0RBQVdBLENBQUNZLFNBQVM7QUFDckMsSUFBSUMsU0FBU2Isa0RBQVdBLENBQUNjLE1BQU07QUFDL0IsSUFBSUMsUUFBUWYsa0RBQVdBLENBQUNnQixLQUFLO0FBQzdCLElBQUlDLFlBQVlqQixrREFBV0EsQ0FBQ2tCLFNBQVM7QUFDckMsSUFBSUMsTUFBTW5CLGtEQUFXQSxDQUFDb0IsR0FBRztBQUN6QixJQUFJQyxPQUFPckIsa0RBQVdBLENBQUNzQixJQUFJO0FBQzNCLElBQUlDLFNBQVN2QixrREFBV0EsQ0FBQ3dCLE1BQU07QUFDL0IsSUFBSUMsaUJBQWlCekIsa0RBQVdBLENBQUMwQixjQUFjO0FBQy9DLElBQUlDLGdCQUFnQjNCLGtEQUFXQSxDQUFDNEIsYUFBYTtBQUM3QyxJQUFJQyxRQUFRN0Isa0RBQVdBLENBQUM4QixXQUFXO0FBQ25DLElBQUlDLFNBQVMvQixrREFBV0EsQ0FBQ2dDLE1BQU07QUFDL0IsSUFBSUMsU0FBU2pDLGtEQUFXQSxDQUFDa0MsTUFBTTtBQUMvQixJQUFJQyxPQUFPbkMsa0RBQVdBLENBQUNvQyxJQUFJO0FBRXFJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0Y2gtbWFrZXIvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL2FjdGlvblR5cGVzLmpzPzhjYjciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0aW9uVHlwZXMgfSBmcm9tICcuL3R5cGVzLmpzJztcblxudmFyIHN0YXJ0ID0gQWN0aW9uVHlwZXMuU3RhcnQ7XG52YXIgc3RvcCA9IEFjdGlvblR5cGVzLlN0b3A7XG52YXIgcmFpc2UgPSBBY3Rpb25UeXBlcy5SYWlzZTtcbnZhciBzZW5kID0gQWN0aW9uVHlwZXMuU2VuZDtcbnZhciBjYW5jZWwgPSBBY3Rpb25UeXBlcy5DYW5jZWw7XG52YXIgbnVsbEV2ZW50ID0gQWN0aW9uVHlwZXMuTnVsbEV2ZW50O1xudmFyIGFzc2lnbiA9IEFjdGlvblR5cGVzLkFzc2lnbjtcbnZhciBhZnRlciA9IEFjdGlvblR5cGVzLkFmdGVyO1xudmFyIGRvbmVTdGF0ZSA9IEFjdGlvblR5cGVzLkRvbmVTdGF0ZTtcbnZhciBsb2cgPSBBY3Rpb25UeXBlcy5Mb2c7XG52YXIgaW5pdCA9IEFjdGlvblR5cGVzLkluaXQ7XG52YXIgaW52b2tlID0gQWN0aW9uVHlwZXMuSW52b2tlO1xudmFyIGVycm9yRXhlY3V0aW9uID0gQWN0aW9uVHlwZXMuRXJyb3JFeGVjdXRpb247XG52YXIgZXJyb3JQbGF0Zm9ybSA9IEFjdGlvblR5cGVzLkVycm9yUGxhdGZvcm07XG52YXIgZXJyb3IgPSBBY3Rpb25UeXBlcy5FcnJvckN1c3RvbTtcbnZhciB1cGRhdGUgPSBBY3Rpb25UeXBlcy5VcGRhdGU7XG52YXIgY2hvb3NlID0gQWN0aW9uVHlwZXMuQ2hvb3NlO1xudmFyIHB1cmUgPSBBY3Rpb25UeXBlcy5QdXJlO1xuXG5leHBvcnQgeyBhZnRlciwgYXNzaWduLCBjYW5jZWwsIGNob29zZSwgZG9uZVN0YXRlLCBlcnJvciwgZXJyb3JFeGVjdXRpb24sIGVycm9yUGxhdGZvcm0sIGluaXQsIGludm9rZSwgbG9nLCBudWxsRXZlbnQsIHB1cmUsIHJhaXNlLCBzZW5kLCBzdGFydCwgc3RvcCwgdXBkYXRlIH07XG4iXSwibmFtZXMiOlsiQWN0aW9uVHlwZXMiLCJzdGFydCIsIlN0YXJ0Iiwic3RvcCIsIlN0b3AiLCJyYWlzZSIsIlJhaXNlIiwic2VuZCIsIlNlbmQiLCJjYW5jZWwiLCJDYW5jZWwiLCJudWxsRXZlbnQiLCJOdWxsRXZlbnQiLCJhc3NpZ24iLCJBc3NpZ24iLCJhZnRlciIsIkFmdGVyIiwiZG9uZVN0YXRlIiwiRG9uZVN0YXRlIiwibG9nIiwiTG9nIiwiaW5pdCIsIkluaXQiLCJpbnZva2UiLCJJbnZva2UiLCJlcnJvckV4ZWN1dGlvbiIsIkVycm9yRXhlY3V0aW9uIiwiZXJyb3JQbGF0Zm9ybSIsIkVycm9yUGxhdGZvcm0iLCJlcnJvciIsIkVycm9yQ3VzdG9tIiwidXBkYXRlIiwiVXBkYXRlIiwiY2hvb3NlIiwiQ2hvb3NlIiwicHVyZSIsIlB1cmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/actionTypes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/actions.js":
/*!*******************************************!*\
  !*** ./node_modules/xstate/es/actions.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   actionTypes: () => (/* reexport module object */ _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   after: () => (/* binding */ after),\n/* harmony export */   assign: () => (/* binding */ assign),\n/* harmony export */   cancel: () => (/* binding */ cancel),\n/* harmony export */   choose: () => (/* binding */ choose),\n/* harmony export */   done: () => (/* binding */ done),\n/* harmony export */   doneInvoke: () => (/* binding */ doneInvoke),\n/* harmony export */   error: () => (/* binding */ error),\n/* harmony export */   escalate: () => (/* binding */ escalate),\n/* harmony export */   forwardTo: () => (/* binding */ forwardTo),\n/* harmony export */   getActionFunction: () => (/* binding */ getActionFunction),\n/* harmony export */   initEvent: () => (/* binding */ initEvent),\n/* harmony export */   isActionObject: () => (/* binding */ isActionObject),\n/* harmony export */   log: () => (/* binding */ log),\n/* harmony export */   pure: () => (/* binding */ pure),\n/* harmony export */   raise: () => (/* binding */ raise),\n/* harmony export */   resolveActions: () => (/* binding */ resolveActions),\n/* harmony export */   resolveLog: () => (/* binding */ resolveLog),\n/* harmony export */   resolveRaise: () => (/* binding */ resolveRaise),\n/* harmony export */   resolveSend: () => (/* binding */ resolveSend),\n/* harmony export */   resolveStop: () => (/* binding */ resolveStop),\n/* harmony export */   respond: () => (/* binding */ respond),\n/* harmony export */   send: () => (/* binding */ send),\n/* harmony export */   sendParent: () => (/* binding */ sendParent),\n/* harmony export */   sendTo: () => (/* binding */ sendTo),\n/* harmony export */   sendUpdate: () => (/* binding */ sendUpdate),\n/* harmony export */   start: () => (/* binding */ start),\n/* harmony export */   stop: () => (/* binding */ stop),\n/* harmony export */   toActionObject: () => (/* binding */ toActionObject),\n/* harmony export */   toActionObjects: () => (/* binding */ toActionObjects),\n/* harmony export */   toActivityDefinition: () => (/* binding */ toActivityDefinition)\n/* harmony export */ });\n/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_virtual/_tslib.js */ \"(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/xstate/es/types.js\");\n/* harmony import */ var _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./actionTypes.js */ \"(ssr)/./node_modules/xstate/es/actionTypes.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/xstate/es/utils.js\");\n/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./environment.js */ \"(ssr)/./node_modules/xstate/es/environment.js\");\n\n\n\n\n\n\n\nvar initEvent = /*#__PURE__*/ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toSCXMLEvent)({\n    type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.init\n});\nfunction getActionFunction(actionType, actionFunctionMap) {\n    return actionFunctionMap ? actionFunctionMap[actionType] || undefined : undefined;\n}\nfunction toActionObject(action, actionFunctionMap) {\n    var actionObject;\n    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action) || typeof action === \"number\") {\n        var exec = getActionFunction(action, actionFunctionMap);\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(exec)) {\n            actionObject = {\n                type: action,\n                exec: exec\n            };\n        } else if (exec) {\n            actionObject = exec;\n        } else {\n            actionObject = {\n                type: action,\n                exec: undefined\n            };\n        }\n    } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action)) {\n        actionObject = {\n            // Convert action to string if unnamed\n            type: action.name || action.toString(),\n            exec: action\n        };\n    } else {\n        var exec = getActionFunction(action.type, actionFunctionMap);\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(exec)) {\n            actionObject = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, action), {\n                exec: exec\n            });\n        } else if (exec) {\n            var actionType = exec.type || action.type;\n            actionObject = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, exec), action), {\n                type: actionType\n            });\n        } else {\n            actionObject = action;\n        }\n    }\n    return actionObject;\n}\nvar toActionObjects = function(action, actionFunctionMap) {\n    if (!action) {\n        return [];\n    }\n    var actions = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(action) ? action : [\n        action\n    ];\n    return actions.map(function(subAction) {\n        return toActionObject(subAction, actionFunctionMap);\n    });\n};\nfunction toActivityDefinition(action) {\n    var actionObject = toActionObject(action);\n    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n        id: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action) ? action : actionObject.id\n    }, actionObject), {\n        type: actionObject.type\n    });\n}\n/**\r\n * Raises an event. This places the event in the internal event queue, so that\r\n * the event is immediately consumed by the machine in the current step.\r\n *\r\n * @param eventType The event to raise.\r\n */ function raise(event, options) {\n    return {\n        type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.raise,\n        event: typeof event === \"function\" ? event : (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toEventObject)(event),\n        delay: options ? options.delay : undefined,\n        id: options === null || options === void 0 ? void 0 : options.id\n    };\n}\nfunction resolveRaise(action, ctx, _event, delaysMap) {\n    var meta = {\n        _event: _event\n    };\n    var resolvedEvent = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toSCXMLEvent)((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.event) ? action.event(ctx, _event.data, meta) : action.event);\n    var resolvedDelay;\n    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action.delay)) {\n        var configDelay = delaysMap && delaysMap[action.delay];\n        resolvedDelay = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;\n    } else {\n        resolvedDelay = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;\n    }\n    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, action), {\n        type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.raise,\n        _event: resolvedEvent,\n        delay: resolvedDelay\n    });\n}\n/**\r\n * Sends an event. This returns an action that will be read by an interpreter to\r\n * send the event in the next step, after the current step is finished executing.\r\n *\r\n * @deprecated Use the `sendTo(...)` action creator instead.\r\n *\r\n * @param event The event to send.\r\n * @param options Options to pass into the send event:\r\n *  - `id` - The unique send event identifier (used with `cancel()`).\r\n *  - `delay` - The number of milliseconds to delay the sending of the event.\r\n *  - `to` - The target of this event (by default, the machine the event was sent from).\r\n */ function send(event, options) {\n    return {\n        to: options ? options.to : undefined,\n        type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.send,\n        event: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(event) ? event : (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toEventObject)(event),\n        delay: options ? options.delay : undefined,\n        // TODO: don't auto-generate IDs here like that\n        // there is too big chance of the ID collision\n        id: options && options.id !== undefined ? options.id : (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(event) ? event.name : (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getEventType)(event)\n    };\n}\nfunction resolveSend(action, ctx, _event, delaysMap) {\n    var meta = {\n        _event: _event\n    }; // TODO: helper function for resolving Expr\n    var resolvedEvent = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toSCXMLEvent)((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.event) ? action.event(ctx, _event.data, meta) : action.event);\n    var resolvedDelay;\n    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action.delay)) {\n        var configDelay = delaysMap && delaysMap[action.delay];\n        resolvedDelay = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;\n    } else {\n        resolvedDelay = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;\n    }\n    var resolvedTarget = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.to) ? action.to(ctx, _event.data, meta) : action.to;\n    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, action), {\n        to: resolvedTarget,\n        _event: resolvedEvent,\n        event: resolvedEvent.data,\n        delay: resolvedDelay\n    });\n}\n/**\r\n * Sends an event to this machine's parent.\r\n *\r\n * @param event The event to send to the parent machine.\r\n * @param options Options to pass into the send event.\r\n */ function sendParent(event, options) {\n    return send(event, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, options), {\n        to: _types_js__WEBPACK_IMPORTED_MODULE_3__.SpecialTargets.Parent\n    }));\n}\n/**\r\n * Sends an event to an actor.\r\n *\r\n * @param actor The `ActorRef` to send the event to.\r\n * @param event The event to send, or an expression that evaluates to the event to send\r\n * @param options Send action options\r\n * @returns An XState send action object\r\n */ function sendTo(actor, event, options) {\n    return send(event, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, options), {\n        to: actor\n    }));\n}\n/**\r\n * Sends an update event to this machine's parent.\r\n */ function sendUpdate() {\n    return sendParent(_actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.update);\n}\n/**\r\n * Sends an event back to the sender of the original event.\r\n *\r\n * @param event The event to send back to the sender\r\n * @param options Options to pass into the send event\r\n */ function respond(event, options) {\n    return send(event, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, options), {\n        to: function(_, __, _a) {\n            var _event = _a._event;\n            return _event.origin; // TODO: handle when _event.origin is undefined\n        }\n    }));\n}\nvar defaultLogExpr = function(context, event) {\n    return {\n        context: context,\n        event: event\n    };\n};\n/**\r\n *\r\n * @param expr The expression function to evaluate which will be logged.\r\n *  Takes in 2 arguments:\r\n *  - `ctx` - the current state context\r\n *  - `event` - the event that caused this action to be executed.\r\n * @param label The label to give to the logged expression.\r\n */ function log(expr, label) {\n    if (expr === void 0) {\n        expr = defaultLogExpr;\n    }\n    return {\n        type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.log,\n        label: label,\n        expr: expr\n    };\n}\nvar resolveLog = function(action, ctx, _event) {\n    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, action), {\n        value: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action.expr) ? action.expr : action.expr(ctx, _event.data, {\n            _event: _event\n        })\n    });\n};\n/**\r\n * Cancels an in-flight `send(...)` action. A canceled sent action will not\r\n * be executed, nor will its event be sent, unless it has already been sent\r\n * (e.g., if `cancel(...)` is called after the `send(...)` action's `delay`).\r\n *\r\n * @param sendId The `id` of the `send(...)` action to cancel.\r\n */ var cancel = function(sendId) {\n    return {\n        type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.cancel,\n        sendId: sendId\n    };\n};\n/**\r\n * Starts an activity.\r\n *\r\n * @param activity The activity to start.\r\n */ function start(activity) {\n    var activityDef = toActivityDefinition(activity);\n    return {\n        type: _types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Start,\n        activity: activityDef,\n        exec: undefined\n    };\n}\n/**\r\n * Stops an activity.\r\n *\r\n * @param actorRef The activity to stop.\r\n */ function stop(actorRef) {\n    var activity = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(actorRef) ? actorRef : toActivityDefinition(actorRef);\n    return {\n        type: _types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Stop,\n        activity: activity,\n        exec: undefined\n    };\n}\nfunction resolveStop(action, context, _event) {\n    var actorRefOrString = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.activity) ? action.activity(context, _event.data) : action.activity;\n    var resolvedActorRef = typeof actorRefOrString === \"string\" ? {\n        id: actorRefOrString\n    } : actorRefOrString;\n    var actionObject = {\n        type: _types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Stop,\n        activity: resolvedActorRef\n    };\n    return actionObject;\n}\n/**\r\n * Updates the current context of the machine.\r\n *\r\n * @param assignment An object that represents the partial context to update.\r\n */ var assign = function(assignment) {\n    return {\n        type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.assign,\n        assignment: assignment\n    };\n};\nfunction isActionObject(action) {\n    return typeof action === \"object\" && \"type\" in action;\n}\n/**\r\n * Returns an event type that represents an implicit event that\r\n * is sent after the specified `delay`.\r\n *\r\n * @param delayRef The delay in milliseconds\r\n * @param id The state node ID where this event is handled\r\n */ function after(delayRef, id) {\n    var idSuffix = id ? \"#\".concat(id) : \"\";\n    return \"\".concat(_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.After, \"(\").concat(delayRef, \")\").concat(idSuffix);\n}\n/**\r\n * Returns an event that represents that a final state node\r\n * has been reached in the parent state node.\r\n *\r\n * @param id The final state node's parent state node `id`\r\n * @param data The data to pass into the event\r\n */ function done(id, data) {\n    var type = \"\".concat(_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.DoneState, \".\").concat(id);\n    var eventObject = {\n        type: type,\n        data: data\n    };\n    eventObject.toString = function() {\n        return type;\n    };\n    return eventObject;\n}\n/**\r\n * Returns an event that represents that an invoked service has terminated.\r\n *\r\n * An invoked service is terminated when it has reached a top-level final state node,\r\n * but not when it is canceled.\r\n *\r\n * @param id The final state node ID\r\n * @param data The data to pass into the event\r\n */ function doneInvoke(id, data) {\n    var type = \"\".concat(_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.DoneInvoke, \".\").concat(id);\n    var eventObject = {\n        type: type,\n        data: data\n    };\n    eventObject.toString = function() {\n        return type;\n    };\n    return eventObject;\n}\nfunction error(id, data) {\n    var type = \"\".concat(_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.ErrorPlatform, \".\").concat(id);\n    var eventObject = {\n        type: type,\n        data: data\n    };\n    eventObject.toString = function() {\n        return type;\n    };\n    return eventObject;\n}\nfunction pure(getActions) {\n    return {\n        type: _types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Pure,\n        get: getActions\n    };\n}\n/**\r\n * Forwards (sends) an event to a specified service.\r\n *\r\n * @param target The target service to forward the event to.\r\n * @param options Options to pass into the send action creator.\r\n */ function forwardTo(target, options) {\n    if (!_environment_js__WEBPACK_IMPORTED_MODULE_4__.IS_PRODUCTION && (!target || typeof target === \"function\")) {\n        var originalTarget_1 = target;\n        target = function() {\n            var args = [];\n            for(var _i = 0; _i < arguments.length; _i++){\n                args[_i] = arguments[_i];\n            }\n            var resolvedTarget = typeof originalTarget_1 === \"function\" ? originalTarget_1.apply(void 0, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(args), false)) : originalTarget_1;\n            if (!resolvedTarget) {\n                throw new Error(\"Attempted to forward event to undefined actor. This risks an infinite loop in the sender.\");\n            }\n            return resolvedTarget;\n        };\n    }\n    return send(function(_, event) {\n        return event;\n    }, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, options), {\n        to: target\n    }));\n}\n/**\r\n * Escalates an error by sending it as an event to this machine's parent.\r\n *\r\n * @param errorData The error data to send, or the expression function that\r\n * takes in the `context`, `event`, and `meta`, and returns the error data to send.\r\n * @param options Options to pass into the send action creator.\r\n */ function escalate(errorData, options) {\n    return sendParent(function(context, event, meta) {\n        return {\n            type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.error,\n            data: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(errorData) ? errorData(context, event, meta) : errorData\n        };\n    }, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, options), {\n        to: _types_js__WEBPACK_IMPORTED_MODULE_3__.SpecialTargets.Parent\n    }));\n}\nfunction choose(conds) {\n    return {\n        type: _types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Choose,\n        conds: conds\n    };\n}\nvar pluckAssigns = function(actionBlocks) {\n    var e_1, _a;\n    var assignActions = [];\n    try {\n        for(var actionBlocks_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(actionBlocks), actionBlocks_1_1 = actionBlocks_1.next(); !actionBlocks_1_1.done; actionBlocks_1_1 = actionBlocks_1.next()){\n            var block = actionBlocks_1_1.value;\n            var i = 0;\n            while(i < block.actions.length){\n                if (block.actions[i].type === _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.assign) {\n                    assignActions.push(block.actions[i]);\n                    block.actions.splice(i, 1);\n                    continue;\n                }\n                i++;\n            }\n        }\n    } catch (e_1_1) {\n        e_1 = {\n            error: e_1_1\n        };\n    } finally{\n        try {\n            if (actionBlocks_1_1 && !actionBlocks_1_1.done && (_a = actionBlocks_1.return)) _a.call(actionBlocks_1);\n        } finally{\n            if (e_1) throw e_1.error;\n        }\n    }\n    return assignActions;\n};\nfunction resolveActions(machine, currentState, currentContext, _event, actionBlocks, predictableExec, preserveActionOrder) {\n    if (preserveActionOrder === void 0) {\n        preserveActionOrder = false;\n    }\n    var assignActions = preserveActionOrder ? [] : pluckAssigns(actionBlocks);\n    var updatedContext = assignActions.length ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.updateContext)(currentContext, _event, assignActions, currentState) : currentContext;\n    var preservedContexts = preserveActionOrder ? [\n        currentContext\n    ] : undefined;\n    var deferredToBlockEnd = [];\n    function handleAction(blockType, actionObject) {\n        var _a;\n        switch(actionObject.type){\n            case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.raise:\n                {\n                    var raisedAction = resolveRaise(actionObject, updatedContext, _event, machine.options.delays);\n                    if (predictableExec && typeof raisedAction.delay === \"number\") {\n                        predictableExec(raisedAction, updatedContext, _event);\n                    }\n                    return raisedAction;\n                }\n            case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.send:\n                var sendAction = resolveSend(actionObject, updatedContext, _event, machine.options.delays); // TODO: fix ActionTypes.Init\n                if (!_environment_js__WEBPACK_IMPORTED_MODULE_4__.IS_PRODUCTION) {\n                    var configuredDelay = actionObject.delay; // warn after resolving as we can create better contextual message here\n                    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.warn)(!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(configuredDelay) || typeof sendAction.delay === \"number\", \"No delay reference for delay expression '\".concat(configuredDelay, \"' was found on machine '\").concat(machine.id, \"'\"));\n                }\n                if (predictableExec && sendAction.to !== _types_js__WEBPACK_IMPORTED_MODULE_3__.SpecialTargets.Internal) {\n                    if (blockType === \"entry\") {\n                        deferredToBlockEnd.push(sendAction);\n                    } else {\n                        predictableExec(sendAction, updatedContext, _event);\n                    }\n                }\n                return sendAction;\n            case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.log:\n                {\n                    var resolved = resolveLog(actionObject, updatedContext, _event);\n                    predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, updatedContext, _event);\n                    return resolved;\n                }\n            case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.choose:\n                {\n                    var chooseAction = actionObject;\n                    var matchedActions = (_a = chooseAction.conds.find(function(condition) {\n                        var guard = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toGuard)(condition.cond, machine.options.guards);\n                        return !guard || (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.evaluateGuard)(machine, guard, updatedContext, _event, !predictableExec ? currentState : undefined);\n                    })) === null || _a === void 0 ? void 0 : _a.actions;\n                    if (!matchedActions) {\n                        return [];\n                    }\n                    var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(resolveActions(machine, currentState, updatedContext, _event, [\n                        {\n                            type: blockType,\n                            actions: toActionObjects((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toArray)(matchedActions), machine.options.actions)\n                        }\n                    ], predictableExec, preserveActionOrder), 2), resolvedActionsFromChoose = _b[0], resolvedContextFromChoose = _b[1];\n                    updatedContext = resolvedContextFromChoose;\n                    preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n                    return resolvedActionsFromChoose;\n                }\n            case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.pure:\n                {\n                    var matchedActions = actionObject.get(updatedContext, _event.data);\n                    if (!matchedActions) {\n                        return [];\n                    }\n                    var _c = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(resolveActions(machine, currentState, updatedContext, _event, [\n                        {\n                            type: blockType,\n                            actions: toActionObjects((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toArray)(matchedActions), machine.options.actions)\n                        }\n                    ], predictableExec, preserveActionOrder), 2), resolvedActionsFromPure = _c[0], resolvedContext = _c[1];\n                    updatedContext = resolvedContext;\n                    preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n                    return resolvedActionsFromPure;\n                }\n            case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.stop:\n                {\n                    var resolved = resolveStop(actionObject, updatedContext, _event);\n                    predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, currentContext, _event);\n                    return resolved;\n                }\n            case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.assign:\n                {\n                    updatedContext = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.updateContext)(updatedContext, _event, [\n                        actionObject\n                    ], !predictableExec ? currentState : undefined);\n                    preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n                    break;\n                }\n            default:\n                var resolvedActionObject = toActionObject(actionObject, machine.options.actions);\n                var exec_1 = resolvedActionObject.exec;\n                if (predictableExec) {\n                    predictableExec(resolvedActionObject, updatedContext, _event);\n                } else if (exec_1 && preservedContexts) {\n                    var contextIndex_1 = preservedContexts.length - 1;\n                    var wrapped = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, resolvedActionObject), {\n                        exec: function(_ctx) {\n                            var args = [];\n                            for(var _i = 1; _i < arguments.length; _i++){\n                                args[_i - 1] = arguments[_i];\n                            }\n                            exec_1.apply(void 0, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n                                preservedContexts[contextIndex_1]\n                            ], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(args), false));\n                        }\n                    });\n                    resolvedActionObject = wrapped;\n                }\n                return resolvedActionObject;\n        }\n    }\n    function processBlock(block) {\n        var e_2, _a;\n        var resolvedActions = [];\n        try {\n            for(var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(block.actions), _c = _b.next(); !_c.done; _c = _b.next()){\n                var action = _c.value;\n                var resolved = handleAction(block.type, action);\n                if (resolved) {\n                    resolvedActions = resolvedActions.concat(resolved);\n                }\n            }\n        } catch (e_2_1) {\n            e_2 = {\n                error: e_2_1\n            };\n        } finally{\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            } finally{\n                if (e_2) throw e_2.error;\n            }\n        }\n        deferredToBlockEnd.forEach(function(action) {\n            predictableExec(action, updatedContext, _event);\n        });\n        deferredToBlockEnd.length = 0;\n        return resolvedActions;\n    }\n    var resolvedActions = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(actionBlocks.map(processBlock));\n    return [\n        resolvedActions,\n        updatedContext\n    ];\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/actions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/behaviors.js":
/*!*********************************************!*\
  !*** ./node_modules/xstate/es/behaviors.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromPromise: () => (/* binding */ fromPromise),\n/* harmony export */   fromReducer: () => (/* binding */ fromReducer),\n/* harmony export */   spawnBehavior: () => (/* binding */ spawnBehavior)\n/* harmony export */ });\n/* harmony import */ var _actions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./actions.js */ \"(ssr)/./node_modules/xstate/es/actions.js\");\n/* harmony import */ var _Actor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Actor.js */ \"(ssr)/./node_modules/xstate/es/Actor.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/xstate/es/utils.js\");\n\n\n\n/**\r\n * Returns an actor behavior from a reducer and its initial state.\r\n *\r\n * @param transition The pure reducer that returns the next state given the current state and event.\r\n * @param initialState The initial state of the reducer.\r\n * @returns An actor behavior\r\n */ function fromReducer(transition, initialState) {\n    return {\n        transition: transition,\n        initialState: initialState\n    };\n}\nfunction fromPromise(promiseFn) {\n    var initialState = {\n        error: undefined,\n        data: undefined,\n        status: \"pending\"\n    };\n    return {\n        transition: function(state, event, _a) {\n            var parent = _a.parent, id = _a.id, observers = _a.observers;\n            switch(event.type){\n                case \"fulfill\":\n                    parent === null || parent === void 0 ? void 0 : parent.send((0,_actions_js__WEBPACK_IMPORTED_MODULE_0__.doneInvoke)(id, event.data));\n                    return {\n                        error: undefined,\n                        data: event.data,\n                        status: \"fulfilled\"\n                    };\n                case \"reject\":\n                    parent === null || parent === void 0 ? void 0 : parent.send((0,_actions_js__WEBPACK_IMPORTED_MODULE_0__.error)(id, event.error));\n                    observers.forEach(function(observer) {\n                        observer.error(event.error);\n                    });\n                    return {\n                        error: event.error,\n                        data: undefined,\n                        status: \"rejected\"\n                    };\n                default:\n                    return state;\n            }\n        },\n        initialState: initialState,\n        start: function(_a) {\n            var self = _a.self;\n            promiseFn().then(function(data) {\n                self.send({\n                    type: \"fulfill\",\n                    data: data\n                });\n            }, function(reason) {\n                self.send({\n                    type: \"reject\",\n                    error: reason\n                });\n            });\n            return initialState;\n        }\n    };\n}\nfunction spawnBehavior(behavior, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    var state = behavior.initialState;\n    var observers = new Set();\n    var mailbox = [];\n    var flushing = false;\n    var flush = function() {\n        if (flushing) {\n            return;\n        }\n        flushing = true;\n        while(mailbox.length > 0){\n            var event_1 = mailbox.shift();\n            state = behavior.transition(state, event_1, actorCtx);\n            observers.forEach(function(observer) {\n                return observer.next(state);\n            });\n        }\n        flushing = false;\n    };\n    var actor = (0,_Actor_js__WEBPACK_IMPORTED_MODULE_1__.toActorRef)({\n        id: options.id,\n        send: function(event) {\n            mailbox.push(event);\n            flush();\n        },\n        getSnapshot: function() {\n            return state;\n        },\n        subscribe: function(next, handleError, complete) {\n            var observer = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.toObserver)(next, handleError, complete);\n            observers.add(observer);\n            observer.next(state);\n            return {\n                unsubscribe: function() {\n                    observers.delete(observer);\n                }\n            };\n        }\n    });\n    var actorCtx = {\n        parent: options.parent,\n        self: actor,\n        id: options.id || \"anonymous\",\n        observers: observers\n    };\n    state = behavior.start ? behavior.start(actorCtx) : state;\n    return actor;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL2JlaGF2aW9ycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBaUQ7QUFDVDtBQUNBO0FBRXhDOzs7Ozs7Q0FNQyxHQUVELFNBQVNJLFlBQVlDLFVBQVUsRUFBRUMsWUFBWTtJQUMzQyxPQUFPO1FBQ0xELFlBQVlBO1FBQ1pDLGNBQWNBO0lBQ2hCO0FBQ0Y7QUFDQSxTQUFTQyxZQUFZQyxTQUFTO0lBQzVCLElBQUlGLGVBQWU7UUFDakJOLE9BQU9TO1FBQ1BDLE1BQU1EO1FBQ05FLFFBQVE7SUFDVjtJQUNBLE9BQU87UUFDTE4sWUFBWSxTQUFVTyxLQUFLLEVBQUVDLEtBQUssRUFBRUMsRUFBRTtZQUNwQyxJQUFJQyxTQUFTRCxHQUFHQyxNQUFNLEVBQ2xCQyxLQUFLRixHQUFHRSxFQUFFLEVBQ1ZDLFlBQVlILEdBQUdHLFNBQVM7WUFFNUIsT0FBUUosTUFBTUssSUFBSTtnQkFDaEIsS0FBSztvQkFDSEgsV0FBVyxRQUFRQSxXQUFXLEtBQUssSUFBSSxLQUFLLElBQUlBLE9BQU9JLElBQUksQ0FBQ2xCLHVEQUFVQSxDQUFDZSxJQUFJSCxNQUFNSCxJQUFJO29CQUNyRixPQUFPO3dCQUNMVixPQUFPUzt3QkFDUEMsTUFBTUcsTUFBTUgsSUFBSTt3QkFDaEJDLFFBQVE7b0JBQ1Y7Z0JBRUYsS0FBSztvQkFDSEksV0FBVyxRQUFRQSxXQUFXLEtBQUssSUFBSSxLQUFLLElBQUlBLE9BQU9JLElBQUksQ0FBQ25CLGtEQUFLQSxDQUFDZ0IsSUFBSUgsTUFBTWIsS0FBSztvQkFDakZpQixVQUFVRyxPQUFPLENBQUMsU0FBVUMsUUFBUTt3QkFDbENBLFNBQVNyQixLQUFLLENBQUNhLE1BQU1iLEtBQUs7b0JBQzVCO29CQUNBLE9BQU87d0JBQ0xBLE9BQU9hLE1BQU1iLEtBQUs7d0JBQ2xCVSxNQUFNRDt3QkFDTkUsUUFBUTtvQkFDVjtnQkFFRjtvQkFDRSxPQUFPQztZQUNYO1FBQ0Y7UUFDQU4sY0FBY0E7UUFDZGdCLE9BQU8sU0FBVVIsRUFBRTtZQUNqQixJQUFJUyxPQUFPVCxHQUFHUyxJQUFJO1lBQ2xCZixZQUFZZ0IsSUFBSSxDQUFDLFNBQVVkLElBQUk7Z0JBQzdCYSxLQUFLSixJQUFJLENBQUM7b0JBQ1JELE1BQU07b0JBQ05SLE1BQU1BO2dCQUNSO1lBQ0YsR0FBRyxTQUFVZSxNQUFNO2dCQUNqQkYsS0FBS0osSUFBSSxDQUFDO29CQUNSRCxNQUFNO29CQUNObEIsT0FBT3lCO2dCQUNUO1lBQ0Y7WUFDQSxPQUFPbkI7UUFDVDtJQUNGO0FBQ0Y7QUFDQSxTQUFTb0IsY0FBY0MsUUFBUSxFQUFFQyxPQUFPO0lBQ3RDLElBQUlBLFlBQVksS0FBSyxHQUFHO1FBQ3RCQSxVQUFVLENBQUM7SUFDYjtJQUVBLElBQUloQixRQUFRZSxTQUFTckIsWUFBWTtJQUNqQyxJQUFJVyxZQUFZLElBQUlZO0lBQ3BCLElBQUlDLFVBQVUsRUFBRTtJQUNoQixJQUFJQyxXQUFXO0lBRWYsSUFBSUMsUUFBUTtRQUNWLElBQUlELFVBQVU7WUFDWjtRQUNGO1FBRUFBLFdBQVc7UUFFWCxNQUFPRCxRQUFRRyxNQUFNLEdBQUcsRUFBRztZQUN6QixJQUFJQyxVQUFVSixRQUFRSyxLQUFLO1lBQzNCdkIsUUFBUWUsU0FBU3RCLFVBQVUsQ0FBQ08sT0FBT3NCLFNBQVNFO1lBQzVDbkIsVUFBVUcsT0FBTyxDQUFDLFNBQVVDLFFBQVE7Z0JBQ2xDLE9BQU9BLFNBQVNnQixJQUFJLENBQUN6QjtZQUN2QjtRQUNGO1FBRUFtQixXQUFXO0lBQ2I7SUFFQSxJQUFJTyxRQUFRcEMscURBQVVBLENBQUM7UUFDckJjLElBQUlZLFFBQVFaLEVBQUU7UUFDZEcsTUFBTSxTQUFVTixLQUFLO1lBQ25CaUIsUUFBUVMsSUFBSSxDQUFDMUI7WUFDYm1CO1FBQ0Y7UUFDQVEsYUFBYTtZQUNYLE9BQU81QjtRQUNUO1FBQ0E2QixXQUFXLFNBQVVKLElBQUksRUFBRUssV0FBVyxFQUFFQyxRQUFRO1lBQzlDLElBQUl0QixXQUFXbEIscURBQVVBLENBQUNrQyxNQUFNSyxhQUFhQztZQUM3QzFCLFVBQVUyQixHQUFHLENBQUN2QjtZQUNkQSxTQUFTZ0IsSUFBSSxDQUFDekI7WUFDZCxPQUFPO2dCQUNMaUMsYUFBYTtvQkFDWDVCLFVBQVU2QixNQUFNLENBQUN6QjtnQkFDbkI7WUFDRjtRQUNGO0lBQ0Y7SUFDQSxJQUFJZSxXQUFXO1FBQ2JyQixRQUFRYSxRQUFRYixNQUFNO1FBQ3RCUSxNQUFNZTtRQUNOdEIsSUFBSVksUUFBUVosRUFBRSxJQUFJO1FBQ2xCQyxXQUFXQTtJQUNiO0lBQ0FMLFFBQVFlLFNBQVNMLEtBQUssR0FBR0ssU0FBU0wsS0FBSyxDQUFDYyxZQUFZeEI7SUFDcEQsT0FBTzBCO0FBQ1Q7QUFFbUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRjaC1tYWtlci8uL25vZGVfbW9kdWxlcy94c3RhdGUvZXMvYmVoYXZpb3JzLmpzPzczZWIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXJyb3IsIGRvbmVJbnZva2UgfSBmcm9tICcuL2FjdGlvbnMuanMnO1xuaW1wb3J0IHsgdG9BY3RvclJlZiB9IGZyb20gJy4vQWN0b3IuanMnO1xuaW1wb3J0IHsgdG9PYnNlcnZlciB9IGZyb20gJy4vdXRpbHMuanMnO1xuXG4vKipcclxuICogUmV0dXJucyBhbiBhY3RvciBiZWhhdmlvciBmcm9tIGEgcmVkdWNlciBhbmQgaXRzIGluaXRpYWwgc3RhdGUuXHJcbiAqXHJcbiAqIEBwYXJhbSB0cmFuc2l0aW9uIFRoZSBwdXJlIHJlZHVjZXIgdGhhdCByZXR1cm5zIHRoZSBuZXh0IHN0YXRlIGdpdmVuIHRoZSBjdXJyZW50IHN0YXRlIGFuZCBldmVudC5cclxuICogQHBhcmFtIGluaXRpYWxTdGF0ZSBUaGUgaW5pdGlhbCBzdGF0ZSBvZiB0aGUgcmVkdWNlci5cclxuICogQHJldHVybnMgQW4gYWN0b3IgYmVoYXZpb3JcclxuICovXG5cbmZ1bmN0aW9uIGZyb21SZWR1Y2VyKHRyYW5zaXRpb24sIGluaXRpYWxTdGF0ZSkge1xuICByZXR1cm4ge1xuICAgIHRyYW5zaXRpb246IHRyYW5zaXRpb24sXG4gICAgaW5pdGlhbFN0YXRlOiBpbml0aWFsU3RhdGVcbiAgfTtcbn1cbmZ1bmN0aW9uIGZyb21Qcm9taXNlKHByb21pc2VGbikge1xuICB2YXIgaW5pdGlhbFN0YXRlID0ge1xuICAgIGVycm9yOiB1bmRlZmluZWQsXG4gICAgZGF0YTogdW5kZWZpbmVkLFxuICAgIHN0YXR1czogJ3BlbmRpbmcnXG4gIH07XG4gIHJldHVybiB7XG4gICAgdHJhbnNpdGlvbjogZnVuY3Rpb24gKHN0YXRlLCBldmVudCwgX2EpIHtcbiAgICAgIHZhciBwYXJlbnQgPSBfYS5wYXJlbnQsXG4gICAgICAgICAgaWQgPSBfYS5pZCxcbiAgICAgICAgICBvYnNlcnZlcnMgPSBfYS5vYnNlcnZlcnM7XG5cbiAgICAgIHN3aXRjaCAoZXZlbnQudHlwZSkge1xuICAgICAgICBjYXNlICdmdWxmaWxsJzpcbiAgICAgICAgICBwYXJlbnQgPT09IG51bGwgfHwgcGFyZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJlbnQuc2VuZChkb25lSW52b2tlKGlkLCBldmVudC5kYXRhKSk7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVycm9yOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBkYXRhOiBldmVudC5kYXRhLFxuICAgICAgICAgICAgc3RhdHVzOiAnZnVsZmlsbGVkJ1xuICAgICAgICAgIH07XG5cbiAgICAgICAgY2FzZSAncmVqZWN0JzpcbiAgICAgICAgICBwYXJlbnQgPT09IG51bGwgfHwgcGFyZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJlbnQuc2VuZChlcnJvcihpZCwgZXZlbnQuZXJyb3IpKTtcbiAgICAgICAgICBvYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGV2ZW50LmVycm9yKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZXJyb3I6IGV2ZW50LmVycm9yLFxuICAgICAgICAgICAgZGF0YTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgc3RhdHVzOiAncmVqZWN0ZWQnXG4gICAgICAgICAgfTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGluaXRpYWxTdGF0ZTogaW5pdGlhbFN0YXRlLFxuICAgIHN0YXJ0OiBmdW5jdGlvbiAoX2EpIHtcbiAgICAgIHZhciBzZWxmID0gX2Euc2VsZjtcbiAgICAgIHByb21pc2VGbigpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgc2VsZi5zZW5kKHtcbiAgICAgICAgICB0eXBlOiAnZnVsZmlsbCcsXG4gICAgICAgICAgZGF0YTogZGF0YVxuICAgICAgICB9KTtcbiAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgc2VsZi5zZW5kKHtcbiAgICAgICAgICB0eXBlOiAncmVqZWN0JyxcbiAgICAgICAgICBlcnJvcjogcmVhc29uXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gaW5pdGlhbFN0YXRlO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIHNwYXduQmVoYXZpb3IoYmVoYXZpb3IsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBzdGF0ZSA9IGJlaGF2aW9yLmluaXRpYWxTdGF0ZTtcbiAgdmFyIG9ic2VydmVycyA9IG5ldyBTZXQoKTtcbiAgdmFyIG1haWxib3ggPSBbXTtcbiAgdmFyIGZsdXNoaW5nID0gZmFsc2U7XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChmbHVzaGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZsdXNoaW5nID0gdHJ1ZTtcblxuICAgIHdoaWxlIChtYWlsYm94Lmxlbmd0aCA+IDApIHtcbiAgICAgIHZhciBldmVudF8xID0gbWFpbGJveC5zaGlmdCgpO1xuICAgICAgc3RhdGUgPSBiZWhhdmlvci50cmFuc2l0aW9uKHN0YXRlLCBldmVudF8xLCBhY3RvckN0eCk7XG4gICAgICBvYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgcmV0dXJuIG9ic2VydmVyLm5leHQoc3RhdGUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZmx1c2hpbmcgPSBmYWxzZTtcbiAgfTtcblxuICB2YXIgYWN0b3IgPSB0b0FjdG9yUmVmKHtcbiAgICBpZDogb3B0aW9ucy5pZCxcbiAgICBzZW5kOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIG1haWxib3gucHVzaChldmVudCk7XG4gICAgICBmbHVzaCgpO1xuICAgIH0sXG4gICAgZ2V0U25hcHNob3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9LFxuICAgIHN1YnNjcmliZTogZnVuY3Rpb24gKG5leHQsIGhhbmRsZUVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgdmFyIG9ic2VydmVyID0gdG9PYnNlcnZlcihuZXh0LCBoYW5kbGVFcnJvciwgY29tcGxldGUpO1xuICAgICAgb2JzZXJ2ZXJzLmFkZChvYnNlcnZlcik7XG4gICAgICBvYnNlcnZlci5uZXh0KHN0YXRlKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgb2JzZXJ2ZXJzLmRlbGV0ZShvYnNlcnZlcik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9KTtcbiAgdmFyIGFjdG9yQ3R4ID0ge1xuICAgIHBhcmVudDogb3B0aW9ucy5wYXJlbnQsXG4gICAgc2VsZjogYWN0b3IsXG4gICAgaWQ6IG9wdGlvbnMuaWQgfHwgJ2Fub255bW91cycsXG4gICAgb2JzZXJ2ZXJzOiBvYnNlcnZlcnNcbiAgfTtcbiAgc3RhdGUgPSBiZWhhdmlvci5zdGFydCA/IGJlaGF2aW9yLnN0YXJ0KGFjdG9yQ3R4KSA6IHN0YXRlO1xuICByZXR1cm4gYWN0b3I7XG59XG5cbmV4cG9ydCB7IGZyb21Qcm9taXNlLCBmcm9tUmVkdWNlciwgc3Bhd25CZWhhdmlvciB9O1xuIl0sIm5hbWVzIjpbImVycm9yIiwiZG9uZUludm9rZSIsInRvQWN0b3JSZWYiLCJ0b09ic2VydmVyIiwiZnJvbVJlZHVjZXIiLCJ0cmFuc2l0aW9uIiwiaW5pdGlhbFN0YXRlIiwiZnJvbVByb21pc2UiLCJwcm9taXNlRm4iLCJ1bmRlZmluZWQiLCJkYXRhIiwic3RhdHVzIiwic3RhdGUiLCJldmVudCIsIl9hIiwicGFyZW50IiwiaWQiLCJvYnNlcnZlcnMiLCJ0eXBlIiwic2VuZCIsImZvckVhY2giLCJvYnNlcnZlciIsInN0YXJ0Iiwic2VsZiIsInRoZW4iLCJyZWFzb24iLCJzcGF3bkJlaGF2aW9yIiwiYmVoYXZpb3IiLCJvcHRpb25zIiwiU2V0IiwibWFpbGJveCIsImZsdXNoaW5nIiwiZmx1c2giLCJsZW5ndGgiLCJldmVudF8xIiwic2hpZnQiLCJhY3RvckN0eCIsIm5leHQiLCJhY3RvciIsInB1c2giLCJnZXRTbmFwc2hvdCIsInN1YnNjcmliZSIsImhhbmRsZUVycm9yIiwiY29tcGxldGUiLCJhZGQiLCJ1bnN1YnNjcmliZSIsImRlbGV0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/behaviors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/constants.js":
/*!*********************************************!*\
  !*** ./node_modules/xstate/es/constants.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_GUARD_TYPE: () => (/* binding */ DEFAULT_GUARD_TYPE),\n/* harmony export */   EMPTY_ACTIVITY_MAP: () => (/* binding */ EMPTY_ACTIVITY_MAP),\n/* harmony export */   STATE_DELIMITER: () => (/* binding */ STATE_DELIMITER),\n/* harmony export */   TARGETLESS_KEY: () => (/* binding */ TARGETLESS_KEY)\n/* harmony export */ });\nvar STATE_DELIMITER = \".\";\nvar EMPTY_ACTIVITY_MAP = {};\nvar DEFAULT_GUARD_TYPE = \"xstate.guard\";\nvar TARGETLESS_KEY = \"\";\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBSUEsa0JBQWtCO0FBQ3RCLElBQUlDLHFCQUFxQixDQUFDO0FBQzFCLElBQUlDLHFCQUFxQjtBQUN6QixJQUFJQyxpQkFBaUI7QUFFOEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRjaC1tYWtlci8uL25vZGVfbW9kdWxlcy94c3RhdGUvZXMvY29uc3RhbnRzLmpzP2UyOTQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIFNUQVRFX0RFTElNSVRFUiA9ICcuJztcbnZhciBFTVBUWV9BQ1RJVklUWV9NQVAgPSB7fTtcbnZhciBERUZBVUxUX0dVQVJEX1RZUEUgPSAneHN0YXRlLmd1YXJkJztcbnZhciBUQVJHRVRMRVNTX0tFWSA9ICcnO1xuXG5leHBvcnQgeyBERUZBVUxUX0dVQVJEX1RZUEUsIEVNUFRZX0FDVElWSVRZX01BUCwgU1RBVEVfREVMSU1JVEVSLCBUQVJHRVRMRVNTX0tFWSB9O1xuIl0sIm5hbWVzIjpbIlNUQVRFX0RFTElNSVRFUiIsIkVNUFRZX0FDVElWSVRZX01BUCIsIkRFRkFVTFRfR1VBUkRfVFlQRSIsIlRBUkdFVExFU1NfS0VZIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/devTools.js":
/*!********************************************!*\
  !*** ./node_modules/xstate/es/devTools.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getGlobal: () => (/* binding */ getGlobal),\n/* harmony export */   registerService: () => (/* binding */ registerService)\n/* harmony export */ });\n/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./environment.js */ \"(ssr)/./node_modules/xstate/es/environment.js\");\n\nfunction getGlobal() {\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis;\n    }\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    if (false) {}\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    if (!_environment_js__WEBPACK_IMPORTED_MODULE_0__.IS_PRODUCTION) {\n        console.warn(\"XState could not find a global object in this environment. Please let the maintainers know and raise an issue here: https://github.com/statelyai/xstate/issues\");\n    }\n}\nfunction getDevTools() {\n    var global1 = getGlobal();\n    if (global1 && \"__xstate__\" in global1) {\n        return global1.__xstate__;\n    }\n    return undefined;\n}\nfunction registerService(service) {\n    if (!getGlobal()) {\n        return;\n    }\n    var devTools = getDevTools();\n    if (devTools) {\n        devTools.register(service);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL2RldlRvb2xzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFpRDtBQUVqRCxTQUFTQztJQUNQLElBQUksT0FBT0MsZUFBZSxhQUFhO1FBQ3JDLE9BQU9BO0lBQ1Q7SUFFQSxJQUFJLE9BQU9DLFNBQVMsYUFBYTtRQUMvQixPQUFPQTtJQUNUO0lBRUEsSUFBSSxLQUFrQixFQUFhLEVBRWxDO0lBRUQsSUFBSSxPQUFPRSxXQUFXLGFBQWE7UUFDakMsT0FBT0E7SUFDVDtJQUVBLElBQUksQ0FBQ0wsMERBQWFBLEVBQUU7UUFDbEJNLFFBQVFDLElBQUksQ0FBQztJQUNmO0FBQ0Y7QUFFQSxTQUFTQztJQUNQLElBQUlILFVBQVNKO0lBRWIsSUFBSUksV0FBVSxnQkFBZ0JBLFNBQVE7UUFDcEMsT0FBT0EsUUFBT0ksVUFBVTtJQUMxQjtJQUVBLE9BQU9DO0FBQ1Q7QUFFQSxTQUFTQyxnQkFBZ0JDLE9BQU87SUFDOUIsSUFBSSxDQUFDWCxhQUFhO1FBQ2hCO0lBQ0Y7SUFFQSxJQUFJWSxXQUFXTDtJQUVmLElBQUlLLFVBQVU7UUFDWkEsU0FBU0MsUUFBUSxDQUFDRjtJQUNwQjtBQUNGO0FBRXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0Y2gtbWFrZXIvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL2RldlRvb2xzLmpzPzdiYmMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVNfUFJPRFVDVElPTiB9IGZyb20gJy4vZW52aXJvbm1lbnQuanMnO1xuXG5mdW5jdGlvbiBnZXRHbG9iYWwoKSB7XG4gIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZ2xvYmFsVGhpcztcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gc2VsZjtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiB3aW5kb3c7XG4gIH1cblxuICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZ2xvYmFsO1xuICB9XG5cbiAgaWYgKCFJU19QUk9EVUNUSU9OKSB7XG4gICAgY29uc29sZS53YXJuKCdYU3RhdGUgY291bGQgbm90IGZpbmQgYSBnbG9iYWwgb2JqZWN0IGluIHRoaXMgZW52aXJvbm1lbnQuIFBsZWFzZSBsZXQgdGhlIG1haW50YWluZXJzIGtub3cgYW5kIHJhaXNlIGFuIGlzc3VlIGhlcmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9zdGF0ZWx5YWkveHN0YXRlL2lzc3VlcycpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERldlRvb2xzKCkge1xuICB2YXIgZ2xvYmFsID0gZ2V0R2xvYmFsKCk7XG5cbiAgaWYgKGdsb2JhbCAmJiAnX194c3RhdGVfXycgaW4gZ2xvYmFsKSB7XG4gICAgcmV0dXJuIGdsb2JhbC5fX3hzdGF0ZV9fO1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJTZXJ2aWNlKHNlcnZpY2UpIHtcbiAgaWYgKCFnZXRHbG9iYWwoKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBkZXZUb29scyA9IGdldERldlRvb2xzKCk7XG5cbiAgaWYgKGRldlRvb2xzKSB7XG4gICAgZGV2VG9vbHMucmVnaXN0ZXIoc2VydmljZSk7XG4gIH1cbn1cblxuZXhwb3J0IHsgZ2V0R2xvYmFsLCByZWdpc3RlclNlcnZpY2UgfTtcbiJdLCJuYW1lcyI6WyJJU19QUk9EVUNUSU9OIiwiZ2V0R2xvYmFsIiwiZ2xvYmFsVGhpcyIsInNlbGYiLCJ3aW5kb3ciLCJnbG9iYWwiLCJjb25zb2xlIiwid2FybiIsImdldERldlRvb2xzIiwiX194c3RhdGVfXyIsInVuZGVmaW5lZCIsInJlZ2lzdGVyU2VydmljZSIsInNlcnZpY2UiLCJkZXZUb29scyIsInJlZ2lzdGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/devTools.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/environment.js":
/*!***********************************************!*\
  !*** ./node_modules/xstate/es/environment.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IS_PRODUCTION: () => (/* binding */ IS_PRODUCTION)\n/* harmony export */ });\nvar IS_PRODUCTION = \"development\" === \"production\";\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL2Vudmlyb25tZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxJQUFJQSxnQkFBZ0JDLGtCQUF5QjtBQUVwQiIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGNoLW1ha2VyLy4vbm9kZV9tb2R1bGVzL3hzdGF0ZS9lcy9lbnZpcm9ubWVudC5qcz8xNTgxIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBJU19QUk9EVUNUSU9OID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcblxuZXhwb3J0IHsgSVNfUFJPRFVDVElPTiB9O1xuIl0sIm5hbWVzIjpbIklTX1BST0RVQ1RJT04iLCJwcm9jZXNzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/environment.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/index.js":
/*!*****************************************!*\
  !*** ./node_modules/xstate/es/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActionTypes: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_10__.ActionTypes),\n/* harmony export */   Interpreter: () => (/* reexport safe */ _interpreter_js__WEBPACK_IMPORTED_MODULE_2__.Interpreter),\n/* harmony export */   InterpreterStatus: () => (/* reexport safe */ _interpreter_js__WEBPACK_IMPORTED_MODULE_2__.InterpreterStatus),\n/* harmony export */   Machine: () => (/* reexport safe */ _Machine_js__WEBPACK_IMPORTED_MODULE_3__.Machine),\n/* harmony export */   SpecialTargets: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_10__.SpecialTargets),\n/* harmony export */   State: () => (/* reexport safe */ _State_js__WEBPACK_IMPORTED_MODULE_7__.State),\n/* harmony export */   StateNode: () => (/* reexport safe */ _StateNode_js__WEBPACK_IMPORTED_MODULE_8__.StateNode),\n/* harmony export */   actions: () => (/* reexport module object */ _actions_js__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   assign: () => (/* binding */ assign),\n/* harmony export */   cancel: () => (/* binding */ cancel),\n/* harmony export */   choose: () => (/* binding */ choose),\n/* harmony export */   createMachine: () => (/* reexport safe */ _Machine_js__WEBPACK_IMPORTED_MODULE_3__.createMachine),\n/* harmony export */   createSchema: () => (/* reexport safe */ _schema_js__WEBPACK_IMPORTED_MODULE_6__.createSchema),\n/* harmony export */   doneInvoke: () => (/* binding */ doneInvoke),\n/* harmony export */   forwardTo: () => (/* binding */ forwardTo),\n/* harmony export */   interpret: () => (/* reexport safe */ _interpreter_js__WEBPACK_IMPORTED_MODULE_2__.interpret),\n/* harmony export */   log: () => (/* binding */ log),\n/* harmony export */   mapState: () => (/* reexport safe */ _mapState_js__WEBPACK_IMPORTED_MODULE_4__.mapState),\n/* harmony export */   matchState: () => (/* reexport safe */ _match_js__WEBPACK_IMPORTED_MODULE_5__.matchState),\n/* harmony export */   matchesState: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_11__.matchesState),\n/* harmony export */   pure: () => (/* binding */ pure),\n/* harmony export */   raise: () => (/* binding */ raise),\n/* harmony export */   send: () => (/* binding */ send),\n/* harmony export */   sendParent: () => (/* binding */ sendParent),\n/* harmony export */   sendTo: () => (/* binding */ sendTo),\n/* harmony export */   sendUpdate: () => (/* binding */ sendUpdate),\n/* harmony export */   spawn: () => (/* reexport safe */ _interpreter_js__WEBPACK_IMPORTED_MODULE_2__.spawn),\n/* harmony export */   spawnBehavior: () => (/* reexport safe */ _behaviors_js__WEBPACK_IMPORTED_MODULE_9__.spawnBehavior),\n/* harmony export */   stop: () => (/* binding */ stop),\n/* harmony export */   t: () => (/* reexport safe */ _schema_js__WEBPACK_IMPORTED_MODULE_6__.t),\n/* harmony export */   toActorRef: () => (/* reexport safe */ _Actor_js__WEBPACK_IMPORTED_MODULE_1__.toActorRef),\n/* harmony export */   toEventObject: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_11__.toEventObject),\n/* harmony export */   toObserver: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_11__.toObserver),\n/* harmony export */   toSCXMLEvent: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_11__.toSCXMLEvent)\n/* harmony export */ });\n/* harmony import */ var _actions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./actions.js */ \"(ssr)/./node_modules/xstate/es/actions.js\");\n/* harmony import */ var _Actor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Actor.js */ \"(ssr)/./node_modules/xstate/es/Actor.js\");\n/* harmony import */ var _interpreter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./interpreter.js */ \"(ssr)/./node_modules/xstate/es/interpreter.js\");\n/* harmony import */ var _Machine_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Machine.js */ \"(ssr)/./node_modules/xstate/es/Machine.js\");\n/* harmony import */ var _mapState_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mapState.js */ \"(ssr)/./node_modules/xstate/es/mapState.js\");\n/* harmony import */ var _match_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./match.js */ \"(ssr)/./node_modules/xstate/es/match.js\");\n/* harmony import */ var _schema_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./schema.js */ \"(ssr)/./node_modules/xstate/es/schema.js\");\n/* harmony import */ var _State_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./State.js */ \"(ssr)/./node_modules/xstate/es/State.js\");\n/* harmony import */ var _StateNode_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./StateNode.js */ \"(ssr)/./node_modules/xstate/es/StateNode.js\");\n/* harmony import */ var _behaviors_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./behaviors.js */ \"(ssr)/./node_modules/xstate/es/behaviors.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/xstate/es/types.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/xstate/es/utils.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar assign = _actions_js__WEBPACK_IMPORTED_MODULE_0__.assign, cancel = _actions_js__WEBPACK_IMPORTED_MODULE_0__.cancel, send = _actions_js__WEBPACK_IMPORTED_MODULE_0__.send, sendTo = _actions_js__WEBPACK_IMPORTED_MODULE_0__.sendTo, sendParent = _actions_js__WEBPACK_IMPORTED_MODULE_0__.sendParent, sendUpdate = _actions_js__WEBPACK_IMPORTED_MODULE_0__.sendUpdate, forwardTo = _actions_js__WEBPACK_IMPORTED_MODULE_0__.forwardTo, doneInvoke = _actions_js__WEBPACK_IMPORTED_MODULE_0__.doneInvoke, raise = _actions_js__WEBPACK_IMPORTED_MODULE_0__.raise, log = _actions_js__WEBPACK_IMPORTED_MODULE_0__.log, pure = _actions_js__WEBPACK_IMPORTED_MODULE_0__.pure, choose = _actions_js__WEBPACK_IMPORTED_MODULE_0__.choose, stop = _actions_js__WEBPACK_IMPORTED_MODULE_0__.stop;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBNFM7QUFDcFE7QUFDckI7QUFDcUI7QUFDNEM7QUFDOUI7QUFDYjtBQUNEO0FBQ007QUFDWDtBQUNRO0FBQ0k7QUFDVTtBQUMwQjtBQUVuRixJQUFJQSxTQUFTQywrQ0FBUUEsRUFDakJDLFNBQVNDLCtDQUFRQSxFQUNqQkMsT0FBT0MsNkNBQU1BLEVBQ2JDLFNBQVNDLCtDQUFRQSxFQUNqQkMsYUFBYUMsbURBQVlBLEVBQ3pCQyxhQUFhQyxtREFBWUEsRUFDekJDLFlBQVlDLGtEQUFXQSxFQUN2QkMsYUFBYUMsbURBQVlBLEVBQ3pCQyxRQUFRQyw4Q0FBT0EsRUFDZkMsTUFBTUMsNENBQUtBLEVBQ1hDLE9BQU9DLDZDQUFNQSxFQUNiQyxTQUFTQywrQ0FBUUEsRUFDakJDLE9BQU9DLDZDQUFNQTtBQUVzRyIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGNoLW1ha2VyLy4vbm9kZV9tb2R1bGVzL3hzdGF0ZS9lcy9pbmRleC5qcz84ODdhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzc2lnbiBhcyBhc3NpZ24kMSwgY2FuY2VsIGFzIGNhbmNlbCQxLCBzZW5kIGFzIHNlbmQkMSwgc2VuZFRvIGFzIHNlbmRUbyQxLCBzZW5kUGFyZW50IGFzIHNlbmRQYXJlbnQkMSwgc2VuZFVwZGF0ZSBhcyBzZW5kVXBkYXRlJDEsIGZvcndhcmRUbyBhcyBmb3J3YXJkVG8kMSwgZG9uZUludm9rZSBhcyBkb25lSW52b2tlJDEsIHJhaXNlIGFzIHJhaXNlJDEsIGxvZyBhcyBsb2ckMSwgcHVyZSBhcyBwdXJlJDEsIGNob29zZSBhcyBjaG9vc2UkMSwgc3RvcCBhcyBzdG9wJDEgfSBmcm9tICcuL2FjdGlvbnMuanMnO1xuaW1wb3J0ICogYXMgYWN0aW9ucyBmcm9tICcuL2FjdGlvbnMuanMnO1xuZXhwb3J0IHsgYWN0aW9ucyB9O1xuZXhwb3J0IHsgdG9BY3RvclJlZiB9IGZyb20gJy4vQWN0b3IuanMnO1xuZXhwb3J0IHsgSW50ZXJwcmV0ZXIsIEludGVycHJldGVyU3RhdHVzLCBpbnRlcnByZXQsIHNwYXduIH0gZnJvbSAnLi9pbnRlcnByZXRlci5qcyc7XG5leHBvcnQgeyBNYWNoaW5lLCBjcmVhdGVNYWNoaW5lIH0gZnJvbSAnLi9NYWNoaW5lLmpzJztcbmV4cG9ydCB7IG1hcFN0YXRlIH0gZnJvbSAnLi9tYXBTdGF0ZS5qcyc7XG5leHBvcnQgeyBtYXRjaFN0YXRlIH0gZnJvbSAnLi9tYXRjaC5qcyc7XG5leHBvcnQgeyBjcmVhdGVTY2hlbWEsIHQgfSBmcm9tICcuL3NjaGVtYS5qcyc7XG5leHBvcnQgeyBTdGF0ZSB9IGZyb20gJy4vU3RhdGUuanMnO1xuZXhwb3J0IHsgU3RhdGVOb2RlIH0gZnJvbSAnLi9TdGF0ZU5vZGUuanMnO1xuZXhwb3J0IHsgc3Bhd25CZWhhdmlvciB9IGZyb20gJy4vYmVoYXZpb3JzLmpzJztcbmV4cG9ydCB7IEFjdGlvblR5cGVzLCBTcGVjaWFsVGFyZ2V0cyB9IGZyb20gJy4vdHlwZXMuanMnO1xuZXhwb3J0IHsgbWF0Y2hlc1N0YXRlLCB0b0V2ZW50T2JqZWN0LCB0b09ic2VydmVyLCB0b1NDWE1MRXZlbnQgfSBmcm9tICcuL3V0aWxzLmpzJztcblxudmFyIGFzc2lnbiA9IGFzc2lnbiQxLFxuICAgIGNhbmNlbCA9IGNhbmNlbCQxLFxuICAgIHNlbmQgPSBzZW5kJDEsXG4gICAgc2VuZFRvID0gc2VuZFRvJDEsXG4gICAgc2VuZFBhcmVudCA9IHNlbmRQYXJlbnQkMSxcbiAgICBzZW5kVXBkYXRlID0gc2VuZFVwZGF0ZSQxLFxuICAgIGZvcndhcmRUbyA9IGZvcndhcmRUbyQxLFxuICAgIGRvbmVJbnZva2UgPSBkb25lSW52b2tlJDEsXG4gICAgcmFpc2UgPSByYWlzZSQxLFxuICAgIGxvZyA9IGxvZyQxLFxuICAgIHB1cmUgPSBwdXJlJDEsXG4gICAgY2hvb3NlID0gY2hvb3NlJDEsXG4gICAgc3RvcCA9IHN0b3AkMTtcblxuZXhwb3J0IHsgYXNzaWduLCBjYW5jZWwsIGNob29zZSwgZG9uZUludm9rZSwgZm9yd2FyZFRvLCBsb2csIHB1cmUsIHJhaXNlLCBzZW5kLCBzZW5kUGFyZW50LCBzZW5kVG8sIHNlbmRVcGRhdGUsIHN0b3AgfTtcbiJdLCJuYW1lcyI6WyJhc3NpZ24iLCJhc3NpZ24kMSIsImNhbmNlbCIsImNhbmNlbCQxIiwic2VuZCIsInNlbmQkMSIsInNlbmRUbyIsInNlbmRUbyQxIiwic2VuZFBhcmVudCIsInNlbmRQYXJlbnQkMSIsInNlbmRVcGRhdGUiLCJzZW5kVXBkYXRlJDEiLCJmb3J3YXJkVG8iLCJmb3J3YXJkVG8kMSIsImRvbmVJbnZva2UiLCJkb25lSW52b2tlJDEiLCJyYWlzZSIsInJhaXNlJDEiLCJsb2ciLCJsb2ckMSIsInB1cmUiLCJwdXJlJDEiLCJjaG9vc2UiLCJjaG9vc2UkMSIsInN0b3AiLCJzdG9wJDEiLCJhY3Rpb25zIiwidG9BY3RvclJlZiIsIkludGVycHJldGVyIiwiSW50ZXJwcmV0ZXJTdGF0dXMiLCJpbnRlcnByZXQiLCJzcGF3biIsIk1hY2hpbmUiLCJjcmVhdGVNYWNoaW5lIiwibWFwU3RhdGUiLCJtYXRjaFN0YXRlIiwiY3JlYXRlU2NoZW1hIiwidCIsIlN0YXRlIiwiU3RhdGVOb2RlIiwic3Bhd25CZWhhdmlvciIsIkFjdGlvblR5cGVzIiwiU3BlY2lhbFRhcmdldHMiLCJtYXRjaGVzU3RhdGUiLCJ0b0V2ZW50T2JqZWN0IiwidG9PYnNlcnZlciIsInRvU0NYTUxFdmVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/interpreter.js":
/*!***********************************************!*\
  !*** ./node_modules/xstate/es/interpreter.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Interpreter: () => (/* binding */ Interpreter),\n/* harmony export */   InterpreterStatus: () => (/* binding */ InterpreterStatus),\n/* harmony export */   interpret: () => (/* binding */ interpret),\n/* harmony export */   spawn: () => (/* binding */ spawn)\n/* harmony export */ });\n/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_virtual/_tslib.js */ \"(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/xstate/es/types.js\");\n/* harmony import */ var _State_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./State.js */ \"(ssr)/./node_modules/xstate/es/State.js\");\n/* harmony import */ var _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./actionTypes.js */ \"(ssr)/./node_modules/xstate/es/actionTypes.js\");\n/* harmony import */ var _actions_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./actions.js */ \"(ssr)/./node_modules/xstate/es/actions.js\");\n/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./environment.js */ \"(ssr)/./node_modules/xstate/es/environment.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/xstate/es/utils.js\");\n/* harmony import */ var _scheduler_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./scheduler.js */ \"(ssr)/./node_modules/xstate/es/scheduler.js\");\n/* harmony import */ var _Actor_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Actor.js */ \"(ssr)/./node_modules/xstate/es/Actor.js\");\n/* harmony import */ var _registry_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./registry.js */ \"(ssr)/./node_modules/xstate/es/registry.js\");\n/* harmony import */ var _devTools_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./devTools.js */ \"(ssr)/./node_modules/xstate/es/devTools.js\");\n/* harmony import */ var _serviceScope_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./serviceScope.js */ \"(ssr)/./node_modules/xstate/es/serviceScope.js\");\n/* harmony import */ var _behaviors_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./behaviors.js */ \"(ssr)/./node_modules/xstate/es/behaviors.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar DEFAULT_SPAWN_OPTIONS = {\n    sync: false,\n    autoForward: false\n};\nvar InterpreterStatus;\n(function(InterpreterStatus) {\n    InterpreterStatus[InterpreterStatus[\"NotStarted\"] = 0] = \"NotStarted\";\n    InterpreterStatus[InterpreterStatus[\"Running\"] = 1] = \"Running\";\n    InterpreterStatus[InterpreterStatus[\"Stopped\"] = 2] = \"Stopped\";\n})(InterpreterStatus || (InterpreterStatus = {}));\nvar Interpreter = /*#__PURE__*/ /** @class */ function() {\n    /**\r\n   * Creates a new Interpreter instance (i.e., service) for the given machine with the provided options, if any.\r\n   *\r\n   * @param machine The machine to be interpreted\r\n   * @param options Interpreter options\r\n   */ function Interpreter(machine, options) {\n        if (options === void 0) {\n            options = Interpreter.defaultOptions;\n        }\n        var _this = this;\n        this.machine = machine;\n        this.delayedEventsMap = {};\n        this.listeners = new Set();\n        this.contextListeners = new Set();\n        this.stopListeners = new Set();\n        this.doneListeners = new Set();\n        this.eventListeners = new Set();\n        this.sendListeners = new Set();\n        /**\r\n     * Whether the service is started.\r\n     */ this.initialized = false;\n        this.status = InterpreterStatus.NotStarted;\n        this.children = new Map();\n        this.forwardTo = new Set();\n        this._outgoingQueue = [];\n        /**\r\n     * Alias for Interpreter.prototype.start\r\n     */ this.init = this.start;\n        /**\r\n     * Sends an event to the running interpreter to trigger a transition.\r\n     *\r\n     * An array of events (batched) can be sent as well, which will send all\r\n     * batched events to the running interpreter. The listeners will be\r\n     * notified only **once** when all events are processed.\r\n     *\r\n     * @param event The event(s) to send\r\n     */ this.send = function(event1, payload) {\n            if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(event1)) {\n                _this.batch(event1);\n                return _this.state;\n            }\n            var _event = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toEventObject)(event1, payload));\n            if (_this.status === InterpreterStatus.Stopped) {\n                // do nothing\n                if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {\n                    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, 'Event \"'.concat(_event.name, '\" was sent to stopped service \"').concat(_this.machine.id, '\". This service has already reached its final state, and will not transition.\\nEvent: ').concat(JSON.stringify(_event.data)));\n                }\n                return _this.state;\n            }\n            if (_this.status !== InterpreterStatus.Running && !_this.options.deferEvents) {\n                throw new Error('Event \"'.concat(_event.name, '\" was sent to uninitialized service \"').concat(_this.machine.id // tslint:disable-next-line:max-line-length\n                , '\". Make sure .start() is called for this service, or set { deferEvents: true } in the service options.\\nEvent: ').concat(JSON.stringify(_event.data)));\n            }\n            _this.scheduler.schedule(function() {\n                // Forward copy of event to child actors\n                _this.forward(_event);\n                var nextState = _this._nextState(_event);\n                _this.update(nextState, _event);\n            });\n            return _this._state; // TODO: deprecate (should return void)\n        // tslint:disable-next-line:semicolon\n        };\n        this.sendTo = function(event1, to, immediate) {\n            var isParent = _this.parent && (to === _types_js__WEBPACK_IMPORTED_MODULE_2__.SpecialTargets.Parent || _this.parent.id === to);\n            var target = isParent ? _this.parent : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(to) ? to === _types_js__WEBPACK_IMPORTED_MODULE_2__.SpecialTargets.Internal ? _this : _this.children.get(to) || _registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.get(to) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isActor)(to) ? to : undefined;\n            if (!target) {\n                if (!isParent) {\n                    throw new Error(\"Unable to send event to child '\".concat(to, \"' from service '\").concat(_this.id, \"'.\"));\n                } // tslint:disable-next-line:no-console\n                if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {\n                    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, \"Service '\".concat(_this.id, \"' has no parent: unable to send event \").concat(event1.type));\n                }\n                return;\n            }\n            if (\"machine\" in target) {\n                // perhaps those events should be rejected in the parent\n                // but atm it doesn't have easy access to all of the information that is required to do it reliably\n                if (_this.status !== InterpreterStatus.Stopped || _this.parent !== target || // we need to send events to the parent from exit handlers of a machine that reached its final state\n                _this.state.done) {\n                    // Send SCXML events to machines\n                    var scxmlEvent = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, event1), {\n                        name: event1.name === _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.error ? \"\".concat((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.error)(_this.id)) : event1.name,\n                        origin: _this.sessionId\n                    });\n                    if (!immediate && _this.machine.config.predictableActionArguments) {\n                        _this._outgoingQueue.push([\n                            target,\n                            scxmlEvent\n                        ]);\n                    } else {\n                        target.send(scxmlEvent);\n                    }\n                }\n            } else {\n                // Send normal events to other targets\n                if (!immediate && _this.machine.config.predictableActionArguments) {\n                    _this._outgoingQueue.push([\n                        target,\n                        event1.data\n                    ]);\n                } else {\n                    target.send(event1.data);\n                }\n            }\n        };\n        this._exec = function(action, context, _event, actionFunctionMap) {\n            if (actionFunctionMap === void 0) {\n                actionFunctionMap = _this.machine.options.actions;\n            }\n            var actionOrExec = action.exec || (0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.getActionFunction)(action.type, actionFunctionMap);\n            var exec = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(actionOrExec) ? actionOrExec : actionOrExec ? actionOrExec.exec : action.exec;\n            if (exec) {\n                try {\n                    return exec(context, _event.data, !_this.machine.config.predictableActionArguments ? {\n                        action: action,\n                        state: _this.state,\n                        _event: _event\n                    } : {\n                        action: action,\n                        _event: _event\n                    });\n                } catch (err) {\n                    if (_this.parent) {\n                        _this.parent.send({\n                            type: \"xstate.error\",\n                            data: err\n                        });\n                    }\n                    throw err;\n                }\n            }\n            switch(action.type){\n                case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.raise:\n                    {\n                        // if raise action reached the interpreter then it's a delayed one\n                        var sendAction_1 = action;\n                        _this.defer(sendAction_1);\n                        break;\n                    }\n                case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.send:\n                    var sendAction = action;\n                    if (typeof sendAction.delay === \"number\") {\n                        _this.defer(sendAction);\n                        return;\n                    } else {\n                        if (sendAction.to) {\n                            _this.sendTo(sendAction._event, sendAction.to, _event === _actions_js__WEBPACK_IMPORTED_MODULE_6__.initEvent);\n                        } else {\n                            _this.send(sendAction._event);\n                        }\n                    }\n                    break;\n                case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.cancel:\n                    _this.cancel(action.sendId);\n                    break;\n                case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.start:\n                    {\n                        if (_this.status !== InterpreterStatus.Running) {\n                            return;\n                        }\n                        var activity = action.activity; // If the activity will be stopped right after it's started\n                        // (such as in transient states)\n                        // don't bother starting the activity.\n                        if (!_this.machine.config.predictableActionArguments && !_this.state.activities[activity.id || activity.type]) {\n                            break;\n                        } // Invoked services\n                        if (activity.type === _types_js__WEBPACK_IMPORTED_MODULE_2__.ActionTypes.Invoke) {\n                            var invokeSource = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toInvokeSource)(activity.src);\n                            var serviceCreator = _this.machine.options.services ? _this.machine.options.services[invokeSource.type] : undefined;\n                            var id = activity.id, data = activity.data;\n                            if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {\n                                (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!(\"forward\" in activity), \"`forward` property is deprecated (found in invocation of '\".concat(activity.src, \"' in in machine '\").concat(_this.machine.id, \"'). \") + \"Please use `autoForward` instead.\");\n                            }\n                            var autoForward = \"autoForward\" in activity ? activity.autoForward : !!activity.forward;\n                            if (!serviceCreator) {\n                                // tslint:disable-next-line:no-console\n                                if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {\n                                    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, \"No service found for invocation '\".concat(activity.src, \"' in machine '\").concat(_this.machine.id, \"'.\"));\n                                }\n                                return;\n                            }\n                            var resolvedData = data ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapContext)(data, context, _event) : undefined;\n                            if (typeof serviceCreator === \"string\") {\n                                // TODO: warn\n                                return;\n                            }\n                            var source = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(serviceCreator) ? serviceCreator(context, _event.data, {\n                                data: resolvedData,\n                                src: invokeSource,\n                                meta: activity.meta\n                            }) : serviceCreator;\n                            if (!source) {\n                                // TODO: warn?\n                                return;\n                            }\n                            var options = void 0;\n                            if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(source)) {\n                                source = resolvedData ? source.withContext(resolvedData) : source;\n                                options = {\n                                    autoForward: autoForward\n                                };\n                            }\n                            _this.spawn(source, id, options);\n                        } else {\n                            _this.spawnActivity(activity);\n                        }\n                        break;\n                    }\n                case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.stop:\n                    {\n                        _this.stopChild(action.activity.id);\n                        break;\n                    }\n                case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.log:\n                    var _a = action, label = _a.label, value = _a.value;\n                    if (label) {\n                        _this.logger(label, value);\n                    } else {\n                        _this.logger(value);\n                    }\n                    break;\n                default:\n                    if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {\n                        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, \"No implementation found for action type '\".concat(action.type, \"'\"));\n                    }\n                    break;\n            }\n        };\n        var resolvedOptions = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, Interpreter.defaultOptions), options);\n        var clock = resolvedOptions.clock, logger = resolvedOptions.logger, parent = resolvedOptions.parent, id = resolvedOptions.id;\n        var resolvedId = id !== undefined ? id : machine.id;\n        this.id = resolvedId;\n        this.logger = logger;\n        this.clock = clock;\n        this.parent = parent;\n        this.options = resolvedOptions;\n        this.scheduler = new _scheduler_js__WEBPACK_IMPORTED_MODULE_7__.Scheduler({\n            deferEvents: this.options.deferEvents\n        });\n        this.sessionId = _registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.bookId();\n    }\n    Object.defineProperty(Interpreter.prototype, \"initialState\", {\n        get: function() {\n            var _this = this;\n            if (this._initialState) {\n                return this._initialState;\n            }\n            return (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(this, function() {\n                _this._initialState = _this.machine.initialState;\n                return _this._initialState;\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Interpreter.prototype, \"state\", {\n        /**\r\n     * @deprecated Use `.getSnapshot()` instead.\r\n     */ get: function() {\n            if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {\n                (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(this.status !== InterpreterStatus.NotStarted, \"Attempted to read state from uninitialized service '\".concat(this.id, \"'. Make sure the service is started first.\"));\n            }\n            return this._state;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\r\n   * Executes the actions of the given state, with that state's `context` and `event`.\r\n   *\r\n   * @param state The state whose actions will be executed\r\n   * @param actionsConfig The action implementations to use\r\n   */ Interpreter.prototype.execute = function(state, actionsConfig) {\n        var e_1, _a;\n        try {\n            for(var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(state.actions), _c = _b.next(); !_c.done; _c = _b.next()){\n                var action = _c.value;\n                this.exec(action, state, actionsConfig);\n            }\n        } catch (e_1_1) {\n            e_1 = {\n                error: e_1_1\n            };\n        } finally{\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            } finally{\n                if (e_1) throw e_1.error;\n            }\n        }\n    };\n    Interpreter.prototype.update = function(state, _event) {\n        var e_2, _a, e_3, _b, e_4, _c, e_5, _d;\n        var _this = this; // Attach session ID to state\n        state._sessionid = this.sessionId; // Update state\n        this._state = state; // Execute actions\n        if ((!this.machine.config.predictableActionArguments || // this is currently required to execute initial actions as the `initialState` gets cached\n        // we can't just recompute it (and execute actions while doing so) because we try to preserve identity of actors created within initial assigns\n        _event === _actions_js__WEBPACK_IMPORTED_MODULE_6__.initEvent) && this.options.execute) {\n            this.execute(this.state);\n        } else {\n            var item = void 0;\n            while(item = this._outgoingQueue.shift()){\n                item[0].send(item[1]);\n            }\n        } // Update children\n        this.children.forEach(function(child) {\n            _this.state.children[child.id] = child;\n        }); // Dev tools\n        if (this.devTools) {\n            this.devTools.send(_event.data, state);\n        } // Execute listeners\n        if (state.event) {\n            try {\n                for(var _e = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.eventListeners), _f = _e.next(); !_f.done; _f = _e.next()){\n                    var listener = _f.value;\n                    listener(state.event);\n                }\n            } catch (e_2_1) {\n                e_2 = {\n                    error: e_2_1\n                };\n            } finally{\n                try {\n                    if (_f && !_f.done && (_a = _e.return)) _a.call(_e);\n                } finally{\n                    if (e_2) throw e_2.error;\n                }\n            }\n        }\n        try {\n            for(var _g = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.listeners), _h = _g.next(); !_h.done; _h = _g.next()){\n                var listener = _h.value;\n                listener(state, state.event);\n            }\n        } catch (e_3_1) {\n            e_3 = {\n                error: e_3_1\n            };\n        } finally{\n            try {\n                if (_h && !_h.done && (_b = _g.return)) _b.call(_g);\n            } finally{\n                if (e_3) throw e_3.error;\n            }\n        }\n        try {\n            for(var _j = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.contextListeners), _k = _j.next(); !_k.done; _k = _j.next()){\n                var contextListener = _k.value;\n                contextListener(this.state.context, this.state.history ? this.state.history.context : undefined);\n            }\n        } catch (e_4_1) {\n            e_4 = {\n                error: e_4_1\n            };\n        } finally{\n            try {\n                if (_k && !_k.done && (_c = _j.return)) _c.call(_j);\n            } finally{\n                if (e_4) throw e_4.error;\n            }\n        }\n        if (this.state.done) {\n            // get final child state node\n            var finalChildStateNode = state.configuration.find(function(sn) {\n                return sn.type === \"final\" && sn.parent === _this.machine;\n            });\n            var doneData = finalChildStateNode && finalChildStateNode.doneData ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapContext)(finalChildStateNode.doneData, state.context, _event) : undefined;\n            this._doneEvent = (0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.doneInvoke)(this.id, doneData);\n            try {\n                for(var _l = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.doneListeners), _m = _l.next(); !_m.done; _m = _l.next()){\n                    var listener = _m.value;\n                    listener(this._doneEvent);\n                }\n            } catch (e_5_1) {\n                e_5 = {\n                    error: e_5_1\n                };\n            } finally{\n                try {\n                    if (_m && !_m.done && (_d = _l.return)) _d.call(_l);\n                } finally{\n                    if (e_5) throw e_5.error;\n                }\n            }\n            this._stop();\n            this._stopChildren();\n            _registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.free(this.sessionId);\n        }\n    };\n    /*\r\n   * Adds a listener that is notified whenever a state transition happens. The listener is called with\r\n   * the next state and the event object that caused the state transition.\r\n   *\r\n   * @param listener The state listener\r\n   */ Interpreter.prototype.onTransition = function(listener) {\n        this.listeners.add(listener); // Send current state to listener\n        if (this.status === InterpreterStatus.Running) {\n            listener(this.state, this.state.event);\n        }\n        return this;\n    };\n    Interpreter.prototype.subscribe = function(nextListenerOrObserver, _, completeListener) {\n        var _this = this;\n        var observer = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toObserver)(nextListenerOrObserver, _, completeListener);\n        this.listeners.add(observer.next); // Send current state to listener\n        if (this.status !== InterpreterStatus.NotStarted) {\n            observer.next(this.state);\n        }\n        var completeOnce = function() {\n            _this.doneListeners.delete(completeOnce);\n            _this.stopListeners.delete(completeOnce);\n            observer.complete();\n        };\n        if (this.status === InterpreterStatus.Stopped) {\n            observer.complete();\n        } else {\n            this.onDone(completeOnce);\n            this.onStop(completeOnce);\n        }\n        return {\n            unsubscribe: function() {\n                _this.listeners.delete(observer.next);\n                _this.doneListeners.delete(completeOnce);\n                _this.stopListeners.delete(completeOnce);\n            }\n        };\n    };\n    /**\r\n   * Adds an event listener that is notified whenever an event is sent to the running interpreter.\r\n   * @param listener The event listener\r\n   */ Interpreter.prototype.onEvent = function(listener) {\n        this.eventListeners.add(listener);\n        return this;\n    };\n    /**\r\n   * Adds an event listener that is notified whenever a `send` event occurs.\r\n   * @param listener The event listener\r\n   */ Interpreter.prototype.onSend = function(listener) {\n        this.sendListeners.add(listener);\n        return this;\n    };\n    /**\r\n   * Adds a context listener that is notified whenever the state context changes.\r\n   * @param listener The context listener\r\n   */ Interpreter.prototype.onChange = function(listener) {\n        this.contextListeners.add(listener);\n        return this;\n    };\n    /**\r\n   * Adds a listener that is notified when the machine is stopped.\r\n   * @param listener The listener\r\n   */ Interpreter.prototype.onStop = function(listener) {\n        this.stopListeners.add(listener);\n        return this;\n    };\n    /**\r\n   * Adds a state listener that is notified when the statechart has reached its final state.\r\n   * @param listener The state listener\r\n   */ Interpreter.prototype.onDone = function(listener) {\n        if (this.status === InterpreterStatus.Stopped && this._doneEvent) {\n            listener(this._doneEvent);\n        } else {\n            this.doneListeners.add(listener);\n        }\n        return this;\n    };\n    /**\r\n   * Removes a listener.\r\n   * @param listener The listener to remove\r\n   */ Interpreter.prototype.off = function(listener) {\n        this.listeners.delete(listener);\n        this.eventListeners.delete(listener);\n        this.sendListeners.delete(listener);\n        this.stopListeners.delete(listener);\n        this.doneListeners.delete(listener);\n        this.contextListeners.delete(listener);\n        return this;\n    };\n    /**\r\n   * Starts the interpreter from the given state, or the initial state.\r\n   * @param initialState The state to start the statechart from\r\n   */ Interpreter.prototype.start = function(initialState) {\n        var _this = this;\n        if (this.status === InterpreterStatus.Running) {\n            // Do not restart the service if it is already started\n            return this;\n        } // yes, it's a hack but we need the related cache to be populated for some things to work (like delayed transitions)\n        // this is usually called by `machine.getInitialState` but if we rehydrate from a state we might bypass this call\n        // we also don't want to call this method here as it resolves the full initial state which might involve calling assign actions\n        // and that could potentially lead to some unwanted side-effects (even such as creating some rogue actors)\n        this.machine._init();\n        _registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.register(this.sessionId, this);\n        this.initialized = true;\n        this.status = InterpreterStatus.Running;\n        var resolvedState = initialState === undefined ? this.initialState : (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(this, function() {\n            return (0,_State_js__WEBPACK_IMPORTED_MODULE_9__.isStateConfig)(initialState) ? _this.machine.resolveState(initialState) : _this.machine.resolveState(_State_js__WEBPACK_IMPORTED_MODULE_9__.State.from(initialState, _this.machine.context));\n        });\n        if (this.options.devTools) {\n            this.attachDev();\n        }\n        this.scheduler.initialize(function() {\n            _this.update(resolvedState, _actions_js__WEBPACK_IMPORTED_MODULE_6__.initEvent);\n        });\n        return this;\n    };\n    Interpreter.prototype._stopChildren = function() {\n        // TODO: think about converting those to actions\n        this.children.forEach(function(child) {\n            if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(child.stop)) {\n                child.stop();\n            }\n        });\n        this.children.clear();\n    };\n    Interpreter.prototype._stop = function() {\n        var e_6, _a, e_7, _b, e_8, _c, e_9, _d, e_10, _e;\n        try {\n            for(var _f = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.listeners), _g = _f.next(); !_g.done; _g = _f.next()){\n                var listener = _g.value;\n                this.listeners.delete(listener);\n            }\n        } catch (e_6_1) {\n            e_6 = {\n                error: e_6_1\n            };\n        } finally{\n            try {\n                if (_g && !_g.done && (_a = _f.return)) _a.call(_f);\n            } finally{\n                if (e_6) throw e_6.error;\n            }\n        }\n        try {\n            for(var _h = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.stopListeners), _j = _h.next(); !_j.done; _j = _h.next()){\n                var listener = _j.value; // call listener, then remove\n                listener();\n                this.stopListeners.delete(listener);\n            }\n        } catch (e_7_1) {\n            e_7 = {\n                error: e_7_1\n            };\n        } finally{\n            try {\n                if (_j && !_j.done && (_b = _h.return)) _b.call(_h);\n            } finally{\n                if (e_7) throw e_7.error;\n            }\n        }\n        try {\n            for(var _k = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.contextListeners), _l = _k.next(); !_l.done; _l = _k.next()){\n                var listener = _l.value;\n                this.contextListeners.delete(listener);\n            }\n        } catch (e_8_1) {\n            e_8 = {\n                error: e_8_1\n            };\n        } finally{\n            try {\n                if (_l && !_l.done && (_c = _k.return)) _c.call(_k);\n            } finally{\n                if (e_8) throw e_8.error;\n            }\n        }\n        try {\n            for(var _m = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.doneListeners), _o = _m.next(); !_o.done; _o = _m.next()){\n                var listener = _o.value;\n                this.doneListeners.delete(listener);\n            }\n        } catch (e_9_1) {\n            e_9 = {\n                error: e_9_1\n            };\n        } finally{\n            try {\n                if (_o && !_o.done && (_d = _m.return)) _d.call(_m);\n            } finally{\n                if (e_9) throw e_9.error;\n            }\n        }\n        if (!this.initialized) {\n            // Interpreter already stopped; do nothing\n            return this;\n        }\n        this.initialized = false;\n        this.status = InterpreterStatus.Stopped;\n        this._initialState = undefined;\n        try {\n            // we are going to stop within the current sync frame\n            // so we can safely just cancel this here as nothing async should be fired anyway\n            for(var _p = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(Object.keys(this.delayedEventsMap)), _q = _p.next(); !_q.done; _q = _p.next()){\n                var key = _q.value;\n                this.clock.clearTimeout(this.delayedEventsMap[key]);\n            }\n        } catch (e_10_1) {\n            e_10 = {\n                error: e_10_1\n            };\n        } finally{\n            try {\n                if (_q && !_q.done && (_e = _p.return)) _e.call(_p);\n            } finally{\n                if (e_10) throw e_10.error;\n            }\n        } // clear everything that might be enqueued\n        this.scheduler.clear();\n        this.scheduler = new _scheduler_js__WEBPACK_IMPORTED_MODULE_7__.Scheduler({\n            deferEvents: this.options.deferEvents\n        });\n    };\n    /**\r\n   * Stops the interpreter and unsubscribe all listeners.\r\n   *\r\n   * This will also notify the `onStop` listeners.\r\n   */ Interpreter.prototype.stop = function() {\n        // TODO: add warning for stopping non-root interpreters\n        var _this = this; // grab the current scheduler as it will be replaced in _stop\n        var scheduler = this.scheduler;\n        this._stop(); // let what is currently processed to be finished\n        scheduler.schedule(function() {\n            var _a;\n            if ((_a = _this._state) === null || _a === void 0 ? void 0 : _a.done) {\n                return;\n            } // it feels weird to handle this here but we need to handle this even slightly \"out of band\"\n            var _event = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)({\n                type: \"xstate.stop\"\n            });\n            var nextState = (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(_this, function() {\n                var exitActions = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__read)(_this.state.configuration), false).sort(function(a, b) {\n                    return b.order - a.order;\n                }).map(function(stateNode) {\n                    return (0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.toActionObjects)(stateNode.onExit, _this.machine.options.actions);\n                }));\n                var _a = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__read)((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.resolveActions)(_this.machine, _this.state, _this.state.context, _event, [\n                    {\n                        type: \"exit\",\n                        actions: exitActions\n                    }\n                ], _this.machine.config.predictableActionArguments ? _this._exec : undefined, _this.machine.config.predictableActionArguments || _this.machine.config.preserveActionOrder), 2), resolvedActions = _a[0], updatedContext = _a[1];\n                var newState = new _State_js__WEBPACK_IMPORTED_MODULE_9__.State({\n                    value: _this.state.value,\n                    context: updatedContext,\n                    _event: _event,\n                    _sessionid: _this.sessionId,\n                    historyValue: undefined,\n                    history: _this.state,\n                    actions: resolvedActions.filter(function(action) {\n                        return !(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isRaisableAction)(action);\n                    }),\n                    activities: {},\n                    events: [],\n                    configuration: [],\n                    transitions: [],\n                    children: {},\n                    done: _this.state.done,\n                    tags: _this.state.tags,\n                    machine: _this.machine\n                });\n                newState.changed = true;\n                return newState;\n            });\n            _this.update(nextState, _event);\n            _this._stopChildren();\n            _registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.free(_this.sessionId);\n        });\n        return this;\n    };\n    Interpreter.prototype.batch = function(events) {\n        var _this = this;\n        if (this.status === InterpreterStatus.NotStarted && this.options.deferEvents) {\n            // tslint:disable-next-line:no-console\n            if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {\n                (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, \"\".concat(events.length, ' event(s) were sent to uninitialized service \"').concat(this.machine.id, '\" and are deferred. Make sure .start() is called for this service.\\nEvent: ').concat(JSON.stringify(event)));\n            }\n        } else if (this.status !== InterpreterStatus.Running) {\n            throw new Error(\"\".concat(events.length, ' event(s) were sent to uninitialized service \"').concat(this.machine.id, '\". Make sure .start() is called for this service, or set { deferEvents: true } in the service options.'));\n        }\n        if (!events.length) {\n            return;\n        }\n        var exec = !!this.machine.config.predictableActionArguments && this._exec;\n        this.scheduler.schedule(function() {\n            var e_11, _a;\n            var nextState = _this.state;\n            var batchChanged = false;\n            var batchedActions = [];\n            var _loop_1 = function(event_1) {\n                var _event = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(event_1);\n                _this.forward(_event);\n                nextState = (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(_this, function() {\n                    return _this.machine.transition(nextState, _event, undefined, exec || undefined);\n                });\n                batchedActions.push.apply(batchedActions, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__read)(_this.machine.config.predictableActionArguments ? nextState.actions : nextState.actions.map(function(a) {\n                    return (0,_State_js__WEBPACK_IMPORTED_MODULE_9__.bindActionToState)(a, nextState);\n                })), false));\n                batchChanged = batchChanged || !!nextState.changed;\n            };\n            try {\n                for(var events_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(events), events_1_1 = events_1.next(); !events_1_1.done; events_1_1 = events_1.next()){\n                    var event_1 = events_1_1.value;\n                    _loop_1(event_1);\n                }\n            } catch (e_11_1) {\n                e_11 = {\n                    error: e_11_1\n                };\n            } finally{\n                try {\n                    if (events_1_1 && !events_1_1.done && (_a = events_1.return)) _a.call(events_1);\n                } finally{\n                    if (e_11) throw e_11.error;\n                }\n            }\n            nextState.changed = batchChanged;\n            nextState.actions = batchedActions;\n            _this.update(nextState, (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(events[events.length - 1]));\n        });\n    };\n    /**\r\n   * Returns a send function bound to this interpreter instance.\r\n   *\r\n   * @param event The event to be sent by the sender.\r\n   */ Interpreter.prototype.sender = function(event1) {\n        return this.send.bind(this, event1);\n    };\n    Interpreter.prototype._nextState = function(event1, exec) {\n        var _this = this;\n        if (exec === void 0) {\n            exec = !!this.machine.config.predictableActionArguments && this._exec;\n        }\n        var _event = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(event1);\n        if (_event.name.indexOf(_actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.errorPlatform) === 0 && !this.state.nextEvents.some(function(nextEvent) {\n            return nextEvent.indexOf(_actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.errorPlatform) === 0;\n        })) {\n            throw _event.data.data;\n        }\n        var nextState = (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(this, function() {\n            return _this.machine.transition(_this.state, _event, undefined, exec || undefined);\n        });\n        return nextState;\n    };\n    /**\r\n   * Returns the next state given the interpreter's current state and the event.\r\n   *\r\n   * This is a pure method that does _not_ update the interpreter's state.\r\n   *\r\n   * @param event The event to determine the next state\r\n   */ Interpreter.prototype.nextState = function(event1) {\n        return this._nextState(event1, false);\n    };\n    Interpreter.prototype.forward = function(event1) {\n        var e_12, _a;\n        try {\n            for(var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.forwardTo), _c = _b.next(); !_c.done; _c = _b.next()){\n                var id = _c.value;\n                var child = this.children.get(id);\n                if (!child) {\n                    throw new Error(\"Unable to forward event '\".concat(event1, \"' from interpreter '\").concat(this.id, \"' to nonexistant child '\").concat(id, \"'.\"));\n                }\n                child.send(event1);\n            }\n        } catch (e_12_1) {\n            e_12 = {\n                error: e_12_1\n            };\n        } finally{\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            } finally{\n                if (e_12) throw e_12.error;\n            }\n        }\n    };\n    Interpreter.prototype.defer = function(sendAction) {\n        var _this = this;\n        var timerId = this.clock.setTimeout(function() {\n            if (\"to\" in sendAction && sendAction.to) {\n                _this.sendTo(sendAction._event, sendAction.to, true);\n            } else {\n                _this.send(sendAction._event);\n            }\n        }, sendAction.delay);\n        if (sendAction.id) {\n            this.delayedEventsMap[sendAction.id] = timerId;\n        }\n    };\n    Interpreter.prototype.cancel = function(sendId) {\n        this.clock.clearTimeout(this.delayedEventsMap[sendId]);\n        delete this.delayedEventsMap[sendId];\n    };\n    Interpreter.prototype.exec = function(action, state, actionFunctionMap) {\n        if (actionFunctionMap === void 0) {\n            actionFunctionMap = this.machine.options.actions;\n        }\n        this._exec(action, state.context, state._event, actionFunctionMap);\n    };\n    Interpreter.prototype.removeChild = function(childId) {\n        var _a;\n        this.children.delete(childId);\n        this.forwardTo.delete(childId); // this.state might not exist at the time this is called,\n        // such as when a child is added then removed while initializing the state\n        (_a = this.state) === null || _a === void 0 ? true : delete _a.children[childId];\n    };\n    Interpreter.prototype.stopChild = function(childId) {\n        var child = this.children.get(childId);\n        if (!child) {\n            return;\n        }\n        this.removeChild(childId);\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(child.stop)) {\n            child.stop();\n        }\n    };\n    Interpreter.prototype.spawn = function(entity, name, options) {\n        if (this.status !== InterpreterStatus.Running) {\n            return (0,_Actor_js__WEBPACK_IMPORTED_MODULE_10__.createDeferredActor)(entity, name);\n        }\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isPromiseLike)(entity)) {\n            return this.spawnPromise(Promise.resolve(entity), name);\n        } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(entity)) {\n            return this.spawnCallback(entity, name);\n        } else if ((0,_Actor_js__WEBPACK_IMPORTED_MODULE_10__.isSpawnedActor)(entity)) {\n            return this.spawnActor(entity, name);\n        } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isObservable)(entity)) {\n            return this.spawnObservable(entity, name);\n        } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(entity)) {\n            return this.spawnMachine(entity, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, options), {\n                id: name\n            }));\n        } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isBehavior)(entity)) {\n            return this.spawnBehavior(entity, name);\n        } else {\n            throw new Error('Unable to spawn entity \"'.concat(name, '\" of type \"').concat(typeof entity, '\".'));\n        }\n    };\n    Interpreter.prototype.spawnMachine = function(machine, options) {\n        var _this = this;\n        if (options === void 0) {\n            options = {};\n        }\n        var childService = new Interpreter(machine, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, this.options), {\n            parent: this,\n            id: options.id || machine.id\n        }));\n        var resolvedOptions = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, DEFAULT_SPAWN_OPTIONS), options);\n        if (resolvedOptions.sync) {\n            childService.onTransition(function(state) {\n                _this.send(_actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.update, {\n                    state: state,\n                    id: childService.id\n                });\n            });\n        }\n        var actor = childService;\n        this.children.set(childService.id, actor);\n        if (resolvedOptions.autoForward) {\n            this.forwardTo.add(childService.id);\n        }\n        childService.onDone(function(doneEvent) {\n            _this.removeChild(childService.id);\n            _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(doneEvent, {\n                origin: childService.id\n            }));\n        }).start();\n        return actor;\n    };\n    Interpreter.prototype.spawnBehavior = function(behavior, id) {\n        var actorRef = (0,_behaviors_js__WEBPACK_IMPORTED_MODULE_11__.spawnBehavior)(behavior, {\n            id: id,\n            parent: this\n        });\n        this.children.set(id, actorRef);\n        return actorRef;\n    };\n    Interpreter.prototype.spawnPromise = function(promise, id) {\n        var _a;\n        var _this = this;\n        var canceled = false;\n        var resolvedData;\n        promise.then(function(response) {\n            if (!canceled) {\n                resolvedData = response;\n                _this.removeChild(id);\n                _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.doneInvoke)(id, response), {\n                    origin: id\n                }));\n            }\n        }, function(errorData) {\n            if (!canceled) {\n                _this.removeChild(id);\n                var errorEvent = (0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.error)(id, errorData);\n                try {\n                    // Send \"error.platform.id\" to this (parent).\n                    _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(errorEvent, {\n                        origin: id\n                    }));\n                } catch (error) {\n                    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.reportUnhandledExceptionOnInvocation)(errorData, error, id);\n                    if (_this.devTools) {\n                        _this.devTools.send(errorEvent, _this.state);\n                    }\n                    if (_this.machine.strict) {\n                        // it would be better to always stop the state machine if unhandled\n                        // exception/promise rejection happens but because we don't want to\n                        // break existing code so enforce it on strict mode only especially so\n                        // because documentation says that onError is optional\n                        _this.stop();\n                    }\n                }\n            }\n        });\n        var actor = (_a = {\n            id: id,\n            send: function() {\n                return void 0;\n            },\n            subscribe: function(next, handleError, complete) {\n                var observer = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toObserver)(next, handleError, complete);\n                var unsubscribed = false;\n                promise.then(function(response) {\n                    if (unsubscribed) {\n                        return;\n                    }\n                    observer.next(response);\n                    if (unsubscribed) {\n                        return;\n                    }\n                    observer.complete();\n                }, function(err) {\n                    if (unsubscribed) {\n                        return;\n                    }\n                    observer.error(err);\n                });\n                return {\n                    unsubscribe: function() {\n                        return unsubscribed = true;\n                    }\n                };\n            },\n            stop: function() {\n                canceled = true;\n            },\n            toJSON: function() {\n                return {\n                    id: id\n                };\n            },\n            getSnapshot: function() {\n                return resolvedData;\n            }\n        }, _a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function() {\n            return this;\n        }, _a);\n        this.children.set(id, actor);\n        return actor;\n    };\n    Interpreter.prototype.spawnCallback = function(callback, id) {\n        var _a;\n        var _this = this;\n        var canceled = false;\n        var receivers = new Set();\n        var listeners = new Set();\n        var emitted;\n        var receive = function(e) {\n            emitted = e;\n            listeners.forEach(function(listener) {\n                return listener(e);\n            });\n            if (canceled) {\n                return;\n            }\n            _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(e, {\n                origin: id\n            }));\n        };\n        var callbackStop;\n        try {\n            callbackStop = callback(receive, function(newListener) {\n                receivers.add(newListener);\n            });\n        } catch (err) {\n            this.send((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.error)(id, err));\n        }\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isPromiseLike)(callbackStop)) {\n            // it turned out to be an async function, can't reliably check this before calling `callback`\n            // because transpiled async functions are not recognizable\n            return this.spawnPromise(callbackStop, id);\n        }\n        var actor = (_a = {\n            id: id,\n            send: function(event1) {\n                return receivers.forEach(function(receiver) {\n                    return receiver(event1);\n                });\n            },\n            subscribe: function(next) {\n                var observer = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toObserver)(next);\n                listeners.add(observer.next);\n                return {\n                    unsubscribe: function() {\n                        listeners.delete(observer.next);\n                    }\n                };\n            },\n            stop: function() {\n                canceled = true;\n                if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(callbackStop)) {\n                    callbackStop();\n                }\n            },\n            toJSON: function() {\n                return {\n                    id: id\n                };\n            },\n            getSnapshot: function() {\n                return emitted;\n            }\n        }, _a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function() {\n            return this;\n        }, _a);\n        this.children.set(id, actor);\n        return actor;\n    };\n    Interpreter.prototype.spawnObservable = function(source, id) {\n        var _a;\n        var _this = this;\n        var emitted;\n        var subscription = source.subscribe(function(value) {\n            emitted = value;\n            _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(value, {\n                origin: id\n            }));\n        }, function(err) {\n            _this.removeChild(id);\n            _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.error)(id, err), {\n                origin: id\n            }));\n        }, function() {\n            _this.removeChild(id);\n            _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.doneInvoke)(id), {\n                origin: id\n            }));\n        });\n        var actor = (_a = {\n            id: id,\n            send: function() {\n                return void 0;\n            },\n            subscribe: function(next, handleError, complete) {\n                return source.subscribe(next, handleError, complete);\n            },\n            stop: function() {\n                return subscription.unsubscribe();\n            },\n            getSnapshot: function() {\n                return emitted;\n            },\n            toJSON: function() {\n                return {\n                    id: id\n                };\n            }\n        }, _a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function() {\n            return this;\n        }, _a);\n        this.children.set(id, actor);\n        return actor;\n    };\n    Interpreter.prototype.spawnActor = function(actor, name) {\n        this.children.set(name, actor);\n        return actor;\n    };\n    Interpreter.prototype.spawnActivity = function(activity) {\n        var implementation = this.machine.options && this.machine.options.activities ? this.machine.options.activities[activity.type] : undefined;\n        if (!implementation) {\n            if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {\n                (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, \"No implementation found for activity '\".concat(activity.type, \"'\"));\n            } // tslint:disable-next-line:no-console\n            return;\n        } // Start implementation\n        var dispose = implementation(this.state.context, activity);\n        this.spawnEffect(activity.id, dispose);\n    };\n    Interpreter.prototype.spawnEffect = function(id, dispose) {\n        var _a;\n        this.children.set(id, (_a = {\n            id: id,\n            send: function() {\n                return void 0;\n            },\n            subscribe: function() {\n                return {\n                    unsubscribe: function() {\n                        return void 0;\n                    }\n                };\n            },\n            stop: dispose || undefined,\n            getSnapshot: function() {\n                return undefined;\n            },\n            toJSON: function() {\n                return {\n                    id: id\n                };\n            }\n        }, _a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function() {\n            return this;\n        }, _a));\n    };\n    Interpreter.prototype.attachDev = function() {\n        var global = (0,_devTools_js__WEBPACK_IMPORTED_MODULE_12__.getGlobal)();\n        if (this.options.devTools && global) {\n            if (global.__REDUX_DEVTOOLS_EXTENSION__) {\n                var devToolsOptions = typeof this.options.devTools === \"object\" ? this.options.devTools : undefined;\n                this.devTools = global.__REDUX_DEVTOOLS_EXTENSION__.connect((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({\n                    name: this.id,\n                    autoPause: true,\n                    stateSanitizer: function(state) {\n                        return {\n                            value: state.value,\n                            context: state.context,\n                            actions: state.actions\n                        };\n                    }\n                }, devToolsOptions), {\n                    features: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({\n                        jump: false,\n                        skip: false\n                    }, devToolsOptions ? devToolsOptions.features : undefined)\n                }), this.machine);\n                this.devTools.init(this.state);\n            } // add XState-specific dev tooling hook\n            (0,_devTools_js__WEBPACK_IMPORTED_MODULE_12__.registerService)(this);\n        }\n    };\n    Interpreter.prototype.toJSON = function() {\n        return {\n            id: this.id\n        };\n    };\n    Interpreter.prototype[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function() {\n        return this;\n    };\n    Interpreter.prototype.getSnapshot = function() {\n        if (this.status === InterpreterStatus.NotStarted) {\n            return this.initialState;\n        }\n        return this._state;\n    };\n    /**\r\n   * The default interpreter options:\r\n   *\r\n   * - `clock` uses the global `setTimeout` and `clearTimeout` functions\r\n   * - `logger` uses the global `console.log()` method\r\n   */ Interpreter.defaultOptions = {\n        execute: true,\n        deferEvents: true,\n        clock: {\n            setTimeout: function(fn, ms) {\n                return setTimeout(fn, ms);\n            },\n            clearTimeout: function(id) {\n                return clearTimeout(id);\n            }\n        },\n        logger: /*#__PURE__*/ console.log.bind(console),\n        devTools: false\n    };\n    Interpreter.interpret = interpret;\n    return Interpreter;\n}();\nvar resolveSpawnOptions = function(nameOrOptions) {\n    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(nameOrOptions)) {\n        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, DEFAULT_SPAWN_OPTIONS), {\n            name: nameOrOptions\n        });\n    }\n    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, DEFAULT_SPAWN_OPTIONS), {\n        name: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.uniqueId)()\n    }), nameOrOptions);\n};\nfunction spawn(entity, nameOrOptions) {\n    var resolvedOptions = resolveSpawnOptions(nameOrOptions);\n    return (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.consume)(function(service) {\n        if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {\n            var isLazyEntity = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(entity) || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(entity);\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!!service || isLazyEntity, 'Attempted to spawn an Actor (ID: \"'.concat((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(entity) ? entity.id : \"undefined\", '\") outside of a service. This will have no effect.'));\n        }\n        if (service) {\n            return service.spawn(entity, resolvedOptions.name, resolvedOptions);\n        } else {\n            return (0,_Actor_js__WEBPACK_IMPORTED_MODULE_10__.createDeferredActor)(entity, resolvedOptions.name);\n        }\n    });\n}\n/**\r\n * Creates a new Interpreter instance for the given machine with the provided options, if any.\r\n *\r\n * @param machine The machine to interpret\r\n * @param options Interpreter options\r\n */ function interpret(machine, options) {\n    var interpreter = new Interpreter(machine, options);\n    return interpreter;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/interpreter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/invokeUtils.js":
/*!***********************************************!*\
  !*** ./node_modules/xstate/es/invokeUtils.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toInvokeDefinition: () => (/* binding */ toInvokeDefinition),\n/* harmony export */   toInvokeSource: () => (/* binding */ toInvokeSource)\n/* harmony export */ });\n/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_virtual/_tslib.js */ \"(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\");\n/* harmony import */ var _actionTypes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./actionTypes.js */ \"(ssr)/./node_modules/xstate/es/actionTypes.js\");\n\n\n\n\n\nfunction toInvokeSource(src) {\n    if (typeof src === \"string\") {\n        var simpleSrc = {\n            type: src\n        };\n        simpleSrc.toString = function() {\n            return src;\n        }; // v4 compat - TODO: remove in v5\n        return simpleSrc;\n    }\n    return src;\n}\nfunction toInvokeDefinition(invokeConfig) {\n    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)({\n        type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_1__.invoke\n    }, invokeConfig), {\n        toJSON: function() {\n            invokeConfig.onDone;\n            invokeConfig.onError;\n            var invokeDef = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__rest)(invokeConfig, [\n                \"onDone\",\n                \"onError\"\n            ]);\n            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, invokeDef), {\n                type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_1__.invoke,\n                src: toInvokeSource(invokeConfig.src)\n            });\n        }\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL2ludm9rZVV0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBd0Q7QUFDcEM7QUFDc0I7QUFDdEI7QUFDTTtBQUUxQixTQUFTRyxlQUFlQyxHQUFHO0lBQ3pCLElBQUksT0FBT0EsUUFBUSxVQUFVO1FBQzNCLElBQUlDLFlBQVk7WUFDZEMsTUFBTUY7UUFDUjtRQUVBQyxVQUFVRSxRQUFRLEdBQUc7WUFDbkIsT0FBT0g7UUFDVCxHQUFHLGlDQUFpQztRQUdwQyxPQUFPQztJQUNUO0lBRUEsT0FBT0Q7QUFDVDtBQUNBLFNBQVNJLG1CQUFtQkMsWUFBWTtJQUN0QyxPQUFPVCwyREFBUUEsQ0FBQ0EsMkRBQVFBLENBQUM7UUFDdkJNLE1BQU1KLG1EQUFNQTtJQUNkLEdBQUdPLGVBQWU7UUFDaEJDLFFBQVE7WUFDTkQsYUFBYUUsTUFBTTtZQUNmRixhQUFhRyxPQUFPO1lBQ3BCLElBQUlDLFlBQVlaLHlEQUFNQSxDQUFDUSxjQUFjO2dCQUFDO2dCQUFVO2FBQVU7WUFFOUQsT0FBT1QsMkRBQVFBLENBQUNBLDJEQUFRQSxDQUFDLENBQUMsR0FBR2EsWUFBWTtnQkFDdkNQLE1BQU1KLG1EQUFNQTtnQkFDWkUsS0FBS0QsZUFBZU0sYUFBYUwsR0FBRztZQUN0QztRQUNGO0lBQ0Y7QUFDRjtBQUU4QyIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGNoLW1ha2VyLy4vbm9kZV9tb2R1bGVzL3hzdGF0ZS9lcy9pbnZva2VVdGlscy5qcz9mODdiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fYXNzaWduLCBfX3Jlc3QgfSBmcm9tICcuL192aXJ0dWFsL190c2xpYi5qcyc7XG5pbXBvcnQgJy4vdHlwZXMuanMnO1xuaW1wb3J0IHsgaW52b2tlIH0gZnJvbSAnLi9hY3Rpb25UeXBlcy5qcyc7XG5pbXBvcnQgJy4vdXRpbHMuanMnO1xuaW1wb3J0ICcuL2Vudmlyb25tZW50LmpzJztcblxuZnVuY3Rpb24gdG9JbnZva2VTb3VyY2Uoc3JjKSB7XG4gIGlmICh0eXBlb2Ygc3JjID09PSAnc3RyaW5nJykge1xuICAgIHZhciBzaW1wbGVTcmMgPSB7XG4gICAgICB0eXBlOiBzcmNcbiAgICB9O1xuXG4gICAgc2ltcGxlU3JjLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHNyYztcbiAgICB9OyAvLyB2NCBjb21wYXQgLSBUT0RPOiByZW1vdmUgaW4gdjVcblxuXG4gICAgcmV0dXJuIHNpbXBsZVNyYztcbiAgfVxuXG4gIHJldHVybiBzcmM7XG59XG5mdW5jdGlvbiB0b0ludm9rZURlZmluaXRpb24oaW52b2tlQ29uZmlnKSB7XG4gIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7XG4gICAgdHlwZTogaW52b2tlXG4gIH0sIGludm9rZUNvbmZpZyksIHtcbiAgICB0b0pTT046IGZ1bmN0aW9uICgpIHtcbiAgICAgIGludm9rZUNvbmZpZy5vbkRvbmU7XG4gICAgICAgICAgaW52b2tlQ29uZmlnLm9uRXJyb3I7XG4gICAgICAgICAgdmFyIGludm9rZURlZiA9IF9fcmVzdChpbnZva2VDb25maWcsIFtcIm9uRG9uZVwiLCBcIm9uRXJyb3JcIl0pO1xuXG4gICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIGludm9rZURlZiksIHtcbiAgICAgICAgdHlwZTogaW52b2tlLFxuICAgICAgICBzcmM6IHRvSW52b2tlU291cmNlKGludm9rZUNvbmZpZy5zcmMpXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufVxuXG5leHBvcnQgeyB0b0ludm9rZURlZmluaXRpb24sIHRvSW52b2tlU291cmNlIH07XG4iXSwibmFtZXMiOlsiX19hc3NpZ24iLCJfX3Jlc3QiLCJpbnZva2UiLCJ0b0ludm9rZVNvdXJjZSIsInNyYyIsInNpbXBsZVNyYyIsInR5cGUiLCJ0b1N0cmluZyIsInRvSW52b2tlRGVmaW5pdGlvbiIsImludm9rZUNvbmZpZyIsInRvSlNPTiIsIm9uRG9uZSIsIm9uRXJyb3IiLCJpbnZva2VEZWYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/invokeUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/mapState.js":
/*!********************************************!*\
  !*** ./node_modules/xstate/es/mapState.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mapState: () => (/* binding */ mapState)\n/* harmony export */ });\n/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_virtual/_tslib.js */ \"(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/xstate/es/utils.js\");\n\n\nfunction mapState(stateMap, stateId) {\n    var e_1, _a;\n    var foundStateId;\n    try {\n        for(var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__values)(Object.keys(stateMap)), _c = _b.next(); !_c.done; _c = _b.next()){\n            var mappedStateId = _c.value;\n            if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.matchesState)(mappedStateId, stateId) && (!foundStateId || stateId.length > foundStateId.length)) {\n                foundStateId = mappedStateId;\n            }\n        }\n    } catch (e_1_1) {\n        e_1 = {\n            error: e_1_1\n        };\n    } finally{\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally{\n            if (e_1) throw e_1.error;\n        }\n    }\n    return stateMap[foundStateId];\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL21hcFN0YXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFnRDtBQUNOO0FBRTFDLFNBQVNFLFNBQVNDLFFBQVEsRUFBRUMsT0FBTztJQUNqQyxJQUFJQyxLQUFLQztJQUVULElBQUlDO0lBRUosSUFBSTtRQUNGLElBQUssSUFBSUMsS0FBS1IsMkRBQVFBLENBQUNTLE9BQU9DLElBQUksQ0FBQ1AsWUFBWVEsS0FBS0gsR0FBR0ksSUFBSSxJQUFJLENBQUNELEdBQUdFLElBQUksRUFBRUYsS0FBS0gsR0FBR0ksSUFBSSxHQUFJO1lBQ3ZGLElBQUlFLGdCQUFnQkgsR0FBR0ksS0FBSztZQUU1QixJQUFJZCx1REFBWUEsQ0FBQ2EsZUFBZVYsWUFBYSxFQUFDRyxnQkFBZ0JILFFBQVFZLE1BQU0sR0FBR1QsYUFBYVMsTUFBTSxHQUFHO2dCQUNuR1QsZUFBZU87WUFDakI7UUFDRjtJQUNGLEVBQUUsT0FBT0csT0FBTztRQUNkWixNQUFNO1lBQ0phLE9BQU9EO1FBQ1Q7SUFDRixTQUFVO1FBQ1IsSUFBSTtZQUNGLElBQUlOLE1BQU0sQ0FBQ0EsR0FBR0UsSUFBSSxJQUFLUCxDQUFBQSxLQUFLRSxHQUFHVyxNQUFNLEdBQUdiLEdBQUdjLElBQUksQ0FBQ1o7UUFDbEQsU0FBVTtZQUNSLElBQUlILEtBQUssTUFBTUEsSUFBSWEsS0FBSztRQUMxQjtJQUNGO0lBRUEsT0FBT2YsUUFBUSxDQUFDSSxhQUFhO0FBQy9CO0FBRW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0Y2gtbWFrZXIvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL21hcFN0YXRlLmpzP2I5ZTciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX192YWx1ZXMgfSBmcm9tICcuL192aXJ0dWFsL190c2xpYi5qcyc7XG5pbXBvcnQgeyBtYXRjaGVzU3RhdGUgfSBmcm9tICcuL3V0aWxzLmpzJztcblxuZnVuY3Rpb24gbWFwU3RhdGUoc3RhdGVNYXAsIHN0YXRlSWQpIHtcbiAgdmFyIGVfMSwgX2E7XG5cbiAgdmFyIGZvdW5kU3RhdGVJZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9iID0gX192YWx1ZXMoT2JqZWN0LmtleXMoc3RhdGVNYXApKSwgX2MgPSBfYi5uZXh0KCk7ICFfYy5kb25lOyBfYyA9IF9iLm5leHQoKSkge1xuICAgICAgdmFyIG1hcHBlZFN0YXRlSWQgPSBfYy52YWx1ZTtcblxuICAgICAgaWYgKG1hdGNoZXNTdGF0ZShtYXBwZWRTdGF0ZUlkLCBzdGF0ZUlkKSAmJiAoIWZvdW5kU3RhdGVJZCB8fCBzdGF0ZUlkLmxlbmd0aCA+IGZvdW5kU3RhdGVJZC5sZW5ndGgpKSB7XG4gICAgICAgIGZvdW5kU3RhdGVJZCA9IG1hcHBlZFN0YXRlSWQ7XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChlXzFfMSkge1xuICAgIGVfMSA9IHtcbiAgICAgIGVycm9yOiBlXzFfMVxuICAgIH07XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSBfYS5jYWxsKF9iKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdGF0ZU1hcFtmb3VuZFN0YXRlSWRdO1xufVxuXG5leHBvcnQgeyBtYXBTdGF0ZSB9O1xuIl0sIm5hbWVzIjpbIl9fdmFsdWVzIiwibWF0Y2hlc1N0YXRlIiwibWFwU3RhdGUiLCJzdGF0ZU1hcCIsInN0YXRlSWQiLCJlXzEiLCJfYSIsImZvdW5kU3RhdGVJZCIsIl9iIiwiT2JqZWN0Iiwia2V5cyIsIl9jIiwibmV4dCIsImRvbmUiLCJtYXBwZWRTdGF0ZUlkIiwidmFsdWUiLCJsZW5ndGgiLCJlXzFfMSIsImVycm9yIiwicmV0dXJuIiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/mapState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/match.js":
/*!*****************************************!*\
  !*** ./node_modules/xstate/es/match.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   matchState: () => (/* binding */ matchState)\n/* harmony export */ });\n/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_virtual/_tslib.js */ \"(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\");\n/* harmony import */ var _State_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./State.js */ \"(ssr)/./node_modules/xstate/es/State.js\");\n\n\nfunction matchState(state, patterns, defaultValue) {\n    var e_1, _a;\n    var resolvedState = _State_js__WEBPACK_IMPORTED_MODULE_0__.State.from(state, state instanceof _State_js__WEBPACK_IMPORTED_MODULE_0__.State ? state.context : undefined);\n    try {\n        for(var patterns_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(patterns), patterns_1_1 = patterns_1.next(); !patterns_1_1.done; patterns_1_1 = patterns_1.next()){\n            var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)(patterns_1_1.value, 2), stateValue = _b[0], getValue = _b[1];\n            if (resolvedState.matches(stateValue)) {\n                return getValue(resolvedState);\n            }\n        }\n    } catch (e_1_1) {\n        e_1 = {\n            error: e_1_1\n        };\n    } finally{\n        try {\n            if (patterns_1_1 && !patterns_1_1.done && (_a = patterns_1.return)) _a.call(patterns_1);\n        } finally{\n            if (e_1) throw e_1.error;\n        }\n    }\n    return defaultValue(resolvedState);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL21hdGNoLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF3RDtBQUNyQjtBQUVuQyxTQUFTRyxXQUFXQyxLQUFLLEVBQUVDLFFBQVEsRUFBRUMsWUFBWTtJQUMvQyxJQUFJQyxLQUFLQztJQUVULElBQUlDLGdCQUFnQlAsNENBQUtBLENBQUNRLElBQUksQ0FBQ04sT0FBT0EsaUJBQWlCRiw0Q0FBS0EsR0FBR0UsTUFBTU8sT0FBTyxHQUFHQztJQUUvRSxJQUFJO1FBQ0YsSUFBSyxJQUFJQyxhQUFhYiwyREFBUUEsQ0FBQ0ssV0FBV1MsZUFBZUQsV0FBV0UsSUFBSSxJQUFJLENBQUNELGFBQWFFLElBQUksRUFBRUYsZUFBZUQsV0FBV0UsSUFBSSxHQUFJO1lBQ2hJLElBQUlFLEtBQUtoQix5REFBTUEsQ0FBQ2EsYUFBYUksS0FBSyxFQUFFLElBQ2hDQyxhQUFhRixFQUFFLENBQUMsRUFBRSxFQUNsQkcsV0FBV0gsRUFBRSxDQUFDLEVBQUU7WUFFcEIsSUFBSVIsY0FBY1ksT0FBTyxDQUFDRixhQUFhO2dCQUNyQyxPQUFPQyxTQUFTWDtZQUNsQjtRQUNGO0lBQ0YsRUFBRSxPQUFPYSxPQUFPO1FBQ2RmLE1BQU07WUFDSmdCLE9BQU9EO1FBQ1Q7SUFDRixTQUFVO1FBQ1IsSUFBSTtZQUNGLElBQUlSLGdCQUFnQixDQUFDQSxhQUFhRSxJQUFJLElBQUtSLENBQUFBLEtBQUtLLFdBQVdXLE1BQU0sR0FBR2hCLEdBQUdpQixJQUFJLENBQUNaO1FBQzlFLFNBQVU7WUFDUixJQUFJTixLQUFLLE1BQU1BLElBQUlnQixLQUFLO1FBQzFCO0lBQ0Y7SUFFQSxPQUFPakIsYUFBYUc7QUFDdEI7QUFFc0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRjaC1tYWtlci8uL25vZGVfbW9kdWxlcy94c3RhdGUvZXMvbWF0Y2guanM/NGUxMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX3ZhbHVlcywgX19yZWFkIH0gZnJvbSAnLi9fdmlydHVhbC9fdHNsaWIuanMnO1xuaW1wb3J0IHsgU3RhdGUgfSBmcm9tICcuL1N0YXRlLmpzJztcblxuZnVuY3Rpb24gbWF0Y2hTdGF0ZShzdGF0ZSwgcGF0dGVybnMsIGRlZmF1bHRWYWx1ZSkge1xuICB2YXIgZV8xLCBfYTtcblxuICB2YXIgcmVzb2x2ZWRTdGF0ZSA9IFN0YXRlLmZyb20oc3RhdGUsIHN0YXRlIGluc3RhbmNlb2YgU3RhdGUgPyBzdGF0ZS5jb250ZXh0IDogdW5kZWZpbmVkKTtcblxuICB0cnkge1xuICAgIGZvciAodmFyIHBhdHRlcm5zXzEgPSBfX3ZhbHVlcyhwYXR0ZXJucyksIHBhdHRlcm5zXzFfMSA9IHBhdHRlcm5zXzEubmV4dCgpOyAhcGF0dGVybnNfMV8xLmRvbmU7IHBhdHRlcm5zXzFfMSA9IHBhdHRlcm5zXzEubmV4dCgpKSB7XG4gICAgICB2YXIgX2IgPSBfX3JlYWQocGF0dGVybnNfMV8xLnZhbHVlLCAyKSxcbiAgICAgICAgICBzdGF0ZVZhbHVlID0gX2JbMF0sXG4gICAgICAgICAgZ2V0VmFsdWUgPSBfYlsxXTtcblxuICAgICAgaWYgKHJlc29sdmVkU3RhdGUubWF0Y2hlcyhzdGF0ZVZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZ2V0VmFsdWUocmVzb2x2ZWRTdGF0ZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChlXzFfMSkge1xuICAgIGVfMSA9IHtcbiAgICAgIGVycm9yOiBlXzFfMVxuICAgIH07XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChwYXR0ZXJuc18xXzEgJiYgIXBhdHRlcm5zXzFfMS5kb25lICYmIChfYSA9IHBhdHRlcm5zXzEucmV0dXJuKSkgX2EuY2FsbChwYXR0ZXJuc18xKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkZWZhdWx0VmFsdWUocmVzb2x2ZWRTdGF0ZSk7XG59XG5cbmV4cG9ydCB7IG1hdGNoU3RhdGUgfTtcbiJdLCJuYW1lcyI6WyJfX3ZhbHVlcyIsIl9fcmVhZCIsIlN0YXRlIiwibWF0Y2hTdGF0ZSIsInN0YXRlIiwicGF0dGVybnMiLCJkZWZhdWx0VmFsdWUiLCJlXzEiLCJfYSIsInJlc29sdmVkU3RhdGUiLCJmcm9tIiwiY29udGV4dCIsInVuZGVmaW5lZCIsInBhdHRlcm5zXzEiLCJwYXR0ZXJuc18xXzEiLCJuZXh0IiwiZG9uZSIsIl9iIiwidmFsdWUiLCJzdGF0ZVZhbHVlIiwiZ2V0VmFsdWUiLCJtYXRjaGVzIiwiZV8xXzEiLCJlcnJvciIsInJldHVybiIsImNhbGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/match.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/registry.js":
/*!********************************************!*\
  !*** ./node_modules/xstate/es/registry.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   registry: () => (/* binding */ registry)\n/* harmony export */ });\nvar children = /*#__PURE__*/ new Map();\nvar sessionIdIndex = 0;\nvar registry = {\n    bookId: function() {\n        return \"x:\".concat(sessionIdIndex++);\n    },\n    register: function(id, actor) {\n        children.set(id, actor);\n        return id;\n    },\n    get: function(id) {\n        return children.get(id);\n    },\n    free: function(id) {\n        children.delete(id);\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL3JlZ2lzdHJ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxJQUFJQSxXQUFXLFdBQVcsR0FBRSxJQUFJQztBQUNoQyxJQUFJQyxpQkFBaUI7QUFDckIsSUFBSUMsV0FBVztJQUNiQyxRQUFRO1FBQ04sT0FBTyxLQUFLQyxNQUFNLENBQUNIO0lBQ3JCO0lBQ0FJLFVBQVUsU0FBVUMsRUFBRSxFQUFFQyxLQUFLO1FBQzNCUixTQUFTUyxHQUFHLENBQUNGLElBQUlDO1FBQ2pCLE9BQU9EO0lBQ1Q7SUFDQUcsS0FBSyxTQUFVSCxFQUFFO1FBQ2YsT0FBT1AsU0FBU1UsR0FBRyxDQUFDSDtJQUN0QjtJQUNBSSxNQUFNLFNBQVVKLEVBQUU7UUFDaEJQLFNBQVNZLE1BQU0sQ0FBQ0w7SUFDbEI7QUFDRjtBQUVvQiIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGNoLW1ha2VyLy4vbm9kZV9tb2R1bGVzL3hzdGF0ZS9lcy9yZWdpc3RyeS5qcz83MDk2Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBjaGlsZHJlbiA9IC8qI19fUFVSRV9fKi9uZXcgTWFwKCk7XG52YXIgc2Vzc2lvbklkSW5kZXggPSAwO1xudmFyIHJlZ2lzdHJ5ID0ge1xuICBib29rSWQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJ4OlwiLmNvbmNhdChzZXNzaW9uSWRJbmRleCsrKTtcbiAgfSxcbiAgcmVnaXN0ZXI6IGZ1bmN0aW9uIChpZCwgYWN0b3IpIHtcbiAgICBjaGlsZHJlbi5zZXQoaWQsIGFjdG9yKTtcbiAgICByZXR1cm4gaWQ7XG4gIH0sXG4gIGdldDogZnVuY3Rpb24gKGlkKSB7XG4gICAgcmV0dXJuIGNoaWxkcmVuLmdldChpZCk7XG4gIH0sXG4gIGZyZWU6IGZ1bmN0aW9uIChpZCkge1xuICAgIGNoaWxkcmVuLmRlbGV0ZShpZCk7XG4gIH1cbn07XG5cbmV4cG9ydCB7IHJlZ2lzdHJ5IH07XG4iXSwibmFtZXMiOlsiY2hpbGRyZW4iLCJNYXAiLCJzZXNzaW9uSWRJbmRleCIsInJlZ2lzdHJ5IiwiYm9va0lkIiwiY29uY2F0IiwicmVnaXN0ZXIiLCJpZCIsImFjdG9yIiwic2V0IiwiZ2V0IiwiZnJlZSIsImRlbGV0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/registry.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/scheduler.js":
/*!*********************************************!*\
  !*** ./node_modules/xstate/es/scheduler.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Scheduler: () => (/* binding */ Scheduler)\n/* harmony export */ });\n/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_virtual/_tslib.js */ \"(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\");\n\nvar defaultOptions = {\n    deferEvents: false\n};\nvar Scheduler = /*#__PURE__*/ /** @class */ function() {\n    function Scheduler(options) {\n        this.processingEvent = false;\n        this.queue = [];\n        this.initialized = false;\n        this.options = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, defaultOptions), options);\n    }\n    Scheduler.prototype.initialize = function(callback) {\n        this.initialized = true;\n        if (callback) {\n            if (!this.options.deferEvents) {\n                this.schedule(callback);\n                return;\n            }\n            this.process(callback);\n        }\n        this.flushEvents();\n    };\n    Scheduler.prototype.schedule = function(task) {\n        if (!this.initialized || this.processingEvent) {\n            this.queue.push(task);\n            return;\n        }\n        if (this.queue.length !== 0) {\n            throw new Error(\"Event queue should be empty when it is not processing events\");\n        }\n        this.process(task);\n        this.flushEvents();\n    };\n    Scheduler.prototype.clear = function() {\n        this.queue = [];\n    };\n    Scheduler.prototype.flushEvents = function() {\n        var nextCallback = this.queue.shift();\n        while(nextCallback){\n            this.process(nextCallback);\n            nextCallback = this.queue.shift();\n        }\n    };\n    Scheduler.prototype.process = function(callback) {\n        this.processingEvent = true;\n        try {\n            callback();\n        } catch (e) {\n            // there is no use to keep the future events\n            // as the situation is not anymore the same\n            this.clear();\n            throw e;\n        } finally{\n            this.processingEvent = false;\n        }\n    };\n    return Scheduler;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL3NjaGVkdWxlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFnRDtBQUVoRCxJQUFJQyxpQkFBaUI7SUFDbkJDLGFBQWE7QUFDZjtBQUVBLElBQUlDLFlBQ0osV0FBVyxHQUVYLFdBQVcsR0FDWDtJQUNFLFNBQVNBLFVBQVVDLE9BQU87UUFDeEIsSUFBSSxDQUFDQyxlQUFlLEdBQUc7UUFDdkIsSUFBSSxDQUFDQyxLQUFLLEdBQUcsRUFBRTtRQUNmLElBQUksQ0FBQ0MsV0FBVyxHQUFHO1FBQ25CLElBQUksQ0FBQ0gsT0FBTyxHQUFHSiwyREFBUUEsQ0FBQ0EsMkRBQVFBLENBQUMsQ0FBQyxHQUFHQyxpQkFBaUJHO0lBQ3hEO0lBRUFELFVBQVVLLFNBQVMsQ0FBQ0MsVUFBVSxHQUFHLFNBQVVDLFFBQVE7UUFDakQsSUFBSSxDQUFDSCxXQUFXLEdBQUc7UUFFbkIsSUFBSUcsVUFBVTtZQUNaLElBQUksQ0FBQyxJQUFJLENBQUNOLE9BQU8sQ0FBQ0YsV0FBVyxFQUFFO2dCQUM3QixJQUFJLENBQUNTLFFBQVEsQ0FBQ0Q7Z0JBQ2Q7WUFDRjtZQUVBLElBQUksQ0FBQ0UsT0FBTyxDQUFDRjtRQUNmO1FBRUEsSUFBSSxDQUFDRyxXQUFXO0lBQ2xCO0lBRUFWLFVBQVVLLFNBQVMsQ0FBQ0csUUFBUSxHQUFHLFNBQVVHLElBQUk7UUFDM0MsSUFBSSxDQUFDLElBQUksQ0FBQ1AsV0FBVyxJQUFJLElBQUksQ0FBQ0YsZUFBZSxFQUFFO1lBQzdDLElBQUksQ0FBQ0MsS0FBSyxDQUFDUyxJQUFJLENBQUNEO1lBQ2hCO1FBQ0Y7UUFFQSxJQUFJLElBQUksQ0FBQ1IsS0FBSyxDQUFDVSxNQUFNLEtBQUssR0FBRztZQUMzQixNQUFNLElBQUlDLE1BQU07UUFDbEI7UUFFQSxJQUFJLENBQUNMLE9BQU8sQ0FBQ0U7UUFDYixJQUFJLENBQUNELFdBQVc7SUFDbEI7SUFFQVYsVUFBVUssU0FBUyxDQUFDVSxLQUFLLEdBQUc7UUFDMUIsSUFBSSxDQUFDWixLQUFLLEdBQUcsRUFBRTtJQUNqQjtJQUVBSCxVQUFVSyxTQUFTLENBQUNLLFdBQVcsR0FBRztRQUNoQyxJQUFJTSxlQUFlLElBQUksQ0FBQ2IsS0FBSyxDQUFDYyxLQUFLO1FBRW5DLE1BQU9ELGFBQWM7WUFDbkIsSUFBSSxDQUFDUCxPQUFPLENBQUNPO1lBQ2JBLGVBQWUsSUFBSSxDQUFDYixLQUFLLENBQUNjLEtBQUs7UUFDakM7SUFDRjtJQUVBakIsVUFBVUssU0FBUyxDQUFDSSxPQUFPLEdBQUcsU0FBVUYsUUFBUTtRQUM5QyxJQUFJLENBQUNMLGVBQWUsR0FBRztRQUV2QixJQUFJO1lBQ0ZLO1FBQ0YsRUFBRSxPQUFPVyxHQUFHO1lBQ1YsNENBQTRDO1lBQzVDLDJDQUEyQztZQUMzQyxJQUFJLENBQUNILEtBQUs7WUFDVixNQUFNRztRQUNSLFNBQVU7WUFDUixJQUFJLENBQUNoQixlQUFlLEdBQUc7UUFDekI7SUFDRjtJQUVBLE9BQU9GO0FBQ1Q7QUFFcUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRjaC1tYWtlci8uL25vZGVfbW9kdWxlcy94c3RhdGUvZXMvc2NoZWR1bGVyLmpzPzFmZTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tICcuL192aXJ0dWFsL190c2xpYi5qcyc7XG5cbnZhciBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgZGVmZXJFdmVudHM6IGZhbHNlXG59O1xuXG52YXIgU2NoZWR1bGVyID1cbi8qI19fUFVSRV9fKi9cblxuLyoqIEBjbGFzcyAqL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTY2hlZHVsZXIob3B0aW9ucykge1xuICAgIHRoaXMucHJvY2Vzc2luZ0V2ZW50ID0gZmFsc2U7XG4gICAgdGhpcy5xdWV1ZSA9IFtdO1xuICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMpLCBvcHRpb25zKTtcbiAgfVxuXG4gIFNjaGVkdWxlci5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuXG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5kZWZlckV2ZW50cykge1xuICAgICAgICB0aGlzLnNjaGVkdWxlKGNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnByb2Nlc3MoY2FsbGJhY2spO1xuICAgIH1cblxuICAgIHRoaXMuZmx1c2hFdmVudHMoKTtcbiAgfTtcblxuICBTY2hlZHVsZXIucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHRhc2spIHtcbiAgICBpZiAoIXRoaXMuaW5pdGlhbGl6ZWQgfHwgdGhpcy5wcm9jZXNzaW5nRXZlbnQpIHtcbiAgICAgIHRoaXMucXVldWUucHVzaCh0YXNrKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5xdWV1ZS5sZW5ndGggIT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXZlbnQgcXVldWUgc2hvdWxkIGJlIGVtcHR5IHdoZW4gaXQgaXMgbm90IHByb2Nlc3NpbmcgZXZlbnRzJyk7XG4gICAgfVxuXG4gICAgdGhpcy5wcm9jZXNzKHRhc2spO1xuICAgIHRoaXMuZmx1c2hFdmVudHMoKTtcbiAgfTtcblxuICBTY2hlZHVsZXIucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucXVldWUgPSBbXTtcbiAgfTtcblxuICBTY2hlZHVsZXIucHJvdG90eXBlLmZsdXNoRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBuZXh0Q2FsbGJhY2sgPSB0aGlzLnF1ZXVlLnNoaWZ0KCk7XG5cbiAgICB3aGlsZSAobmV4dENhbGxiYWNrKSB7XG4gICAgICB0aGlzLnByb2Nlc3MobmV4dENhbGxiYWNrKTtcbiAgICAgIG5leHRDYWxsYmFjayA9IHRoaXMucXVldWUuc2hpZnQoKTtcbiAgICB9XG4gIH07XG5cbiAgU2NoZWR1bGVyLnByb3RvdHlwZS5wcm9jZXNzID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5wcm9jZXNzaW5nRXZlbnQgPSB0cnVlO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gdGhlcmUgaXMgbm8gdXNlIHRvIGtlZXAgdGhlIGZ1dHVyZSBldmVudHNcbiAgICAgIC8vIGFzIHRoZSBzaXR1YXRpb24gaXMgbm90IGFueW1vcmUgdGhlIHNhbWVcbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHRocm93IGU7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMucHJvY2Vzc2luZ0V2ZW50ID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBTY2hlZHVsZXI7XG59KCk7XG5cbmV4cG9ydCB7IFNjaGVkdWxlciB9O1xuIl0sIm5hbWVzIjpbIl9fYXNzaWduIiwiZGVmYXVsdE9wdGlvbnMiLCJkZWZlckV2ZW50cyIsIlNjaGVkdWxlciIsIm9wdGlvbnMiLCJwcm9jZXNzaW5nRXZlbnQiLCJxdWV1ZSIsImluaXRpYWxpemVkIiwicHJvdG90eXBlIiwiaW5pdGlhbGl6ZSIsImNhbGxiYWNrIiwic2NoZWR1bGUiLCJwcm9jZXNzIiwiZmx1c2hFdmVudHMiLCJ0YXNrIiwicHVzaCIsImxlbmd0aCIsIkVycm9yIiwiY2xlYXIiLCJuZXh0Q2FsbGJhY2siLCJzaGlmdCIsImUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/scheduler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/schema.js":
/*!******************************************!*\
  !*** ./node_modules/xstate/es/schema.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createSchema: () => (/* binding */ createSchema),\n/* harmony export */   t: () => (/* binding */ t)\n/* harmony export */ });\nfunction createSchema(schema) {\n    return schema;\n}\nvar t = createSchema;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL3NjaGVtYS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLFNBQVNBLGFBQWFDLE1BQU07SUFDMUIsT0FBT0E7QUFDVDtBQUNBLElBQUlDLElBQUlGO0FBRW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0Y2gtbWFrZXIvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL3NjaGVtYS5qcz80Y2Q4Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGNyZWF0ZVNjaGVtYShzY2hlbWEpIHtcbiAgcmV0dXJuIHNjaGVtYTtcbn1cbnZhciB0ID0gY3JlYXRlU2NoZW1hO1xuXG5leHBvcnQgeyBjcmVhdGVTY2hlbWEsIHQgfTtcbiJdLCJuYW1lcyI6WyJjcmVhdGVTY2hlbWEiLCJzY2hlbWEiLCJ0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/schema.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/serviceScope.js":
/*!************************************************!*\
  !*** ./node_modules/xstate/es/serviceScope.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   consume: () => (/* binding */ consume),\n/* harmony export */   provide: () => (/* binding */ provide)\n/* harmony export */ });\n/**\r\n * Maintains a stack of the current service in scope.\r\n * This is used to provide the correct service to spawn().\r\n */ var serviceStack = [];\nvar provide = function(service, fn) {\n    serviceStack.push(service);\n    var result = fn(service);\n    serviceStack.pop();\n    return result;\n};\nvar consume = function(fn) {\n    return fn(serviceStack[serviceStack.length - 1]);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL3NlcnZpY2VTY29wZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7Q0FHQyxHQUNELElBQUlBLGVBQWUsRUFBRTtBQUNyQixJQUFJQyxVQUFVLFNBQVVDLE9BQU8sRUFBRUMsRUFBRTtJQUNqQ0gsYUFBYUksSUFBSSxDQUFDRjtJQUNsQixJQUFJRyxTQUFTRixHQUFHRDtJQUNoQkYsYUFBYU0sR0FBRztJQUNoQixPQUFPRDtBQUNUO0FBQ0EsSUFBSUUsVUFBVSxTQUFVSixFQUFFO0lBQ3hCLE9BQU9BLEdBQUdILFlBQVksQ0FBQ0EsYUFBYVEsTUFBTSxHQUFHLEVBQUU7QUFDakQ7QUFFNEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRjaC1tYWtlci8uL25vZGVfbW9kdWxlcy94c3RhdGUvZXMvc2VydmljZVNjb3BlLmpzPzdkZGUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIE1haW50YWlucyBhIHN0YWNrIG9mIHRoZSBjdXJyZW50IHNlcnZpY2UgaW4gc2NvcGUuXHJcbiAqIFRoaXMgaXMgdXNlZCB0byBwcm92aWRlIHRoZSBjb3JyZWN0IHNlcnZpY2UgdG8gc3Bhd24oKS5cclxuICovXG52YXIgc2VydmljZVN0YWNrID0gW107XG52YXIgcHJvdmlkZSA9IGZ1bmN0aW9uIChzZXJ2aWNlLCBmbikge1xuICBzZXJ2aWNlU3RhY2sucHVzaChzZXJ2aWNlKTtcbiAgdmFyIHJlc3VsdCA9IGZuKHNlcnZpY2UpO1xuICBzZXJ2aWNlU3RhY2sucG9wKCk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xudmFyIGNvbnN1bWUgPSBmdW5jdGlvbiAoZm4pIHtcbiAgcmV0dXJuIGZuKHNlcnZpY2VTdGFja1tzZXJ2aWNlU3RhY2subGVuZ3RoIC0gMV0pO1xufTtcblxuZXhwb3J0IHsgY29uc3VtZSwgcHJvdmlkZSB9O1xuIl0sIm5hbWVzIjpbInNlcnZpY2VTdGFjayIsInByb3ZpZGUiLCJzZXJ2aWNlIiwiZm4iLCJwdXNoIiwicmVzdWx0IiwicG9wIiwiY29uc3VtZSIsImxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/serviceScope.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/stateUtils.js":
/*!**********************************************!*\
  !*** ./node_modules/xstate/es/stateUtils.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAdjList: () => (/* binding */ getAdjList),\n/* harmony export */   getAllChildren: () => (/* binding */ getAllChildren),\n/* harmony export */   getAllStateNodes: () => (/* binding */ getAllStateNodes),\n/* harmony export */   getChildren: () => (/* binding */ getChildren),\n/* harmony export */   getConfiguration: () => (/* binding */ getConfiguration),\n/* harmony export */   getMeta: () => (/* binding */ getMeta),\n/* harmony export */   getTagsFromConfiguration: () => (/* binding */ getTagsFromConfiguration),\n/* harmony export */   getValue: () => (/* binding */ getValue),\n/* harmony export */   has: () => (/* binding */ has),\n/* harmony export */   isInFinalState: () => (/* binding */ isInFinalState),\n/* harmony export */   isLeafNode: () => (/* binding */ isLeafNode),\n/* harmony export */   nextEvents: () => (/* binding */ nextEvents)\n/* harmony export */ });\n/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_virtual/_tslib.js */ \"(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/xstate/es/utils.js\");\n\n\nvar isLeafNode = function(stateNode) {\n    return stateNode.type === \"atomic\" || stateNode.type === \"final\";\n};\nfunction getAllChildren(stateNode) {\n    return Object.keys(stateNode.states).map(function(key) {\n        return stateNode.states[key];\n    });\n}\nfunction getChildren(stateNode) {\n    return getAllChildren(stateNode).filter(function(sn) {\n        return sn.type !== \"history\";\n    });\n}\nfunction getAllStateNodes(stateNode) {\n    var stateNodes = [\n        stateNode\n    ];\n    if (isLeafNode(stateNode)) {\n        return stateNodes;\n    }\n    return stateNodes.concat((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(getChildren(stateNode).map(getAllStateNodes)));\n}\nfunction getConfiguration(prevStateNodes, stateNodes) {\n    var e_1, _a, e_2, _b, e_3, _c, e_4, _d;\n    var prevConfiguration = new Set(prevStateNodes);\n    var prevAdjList = getAdjList(prevConfiguration);\n    var configuration = new Set(stateNodes);\n    try {\n        // add all ancestors\n        for(var configuration_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(configuration), configuration_1_1 = configuration_1.next(); !configuration_1_1.done; configuration_1_1 = configuration_1.next()){\n            var s = configuration_1_1.value;\n            var m = s.parent;\n            while(m && !configuration.has(m)){\n                configuration.add(m);\n                m = m.parent;\n            }\n        }\n    } catch (e_1_1) {\n        e_1 = {\n            error: e_1_1\n        };\n    } finally{\n        try {\n            if (configuration_1_1 && !configuration_1_1.done && (_a = configuration_1.return)) _a.call(configuration_1);\n        } finally{\n            if (e_1) throw e_1.error;\n        }\n    }\n    var adjList = getAdjList(configuration);\n    try {\n        // add descendants\n        for(var configuration_2 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(configuration), configuration_2_1 = configuration_2.next(); !configuration_2_1.done; configuration_2_1 = configuration_2.next()){\n            var s = configuration_2_1.value; // if previously active, add existing child nodes\n            if (s.type === \"compound\" && (!adjList.get(s) || !adjList.get(s).length)) {\n                if (prevAdjList.get(s)) {\n                    prevAdjList.get(s).forEach(function(sn) {\n                        return configuration.add(sn);\n                    });\n                } else {\n                    s.initialStateNodes.forEach(function(sn) {\n                        return configuration.add(sn);\n                    });\n                }\n            } else {\n                if (s.type === \"parallel\") {\n                    try {\n                        for(var _e = (e_3 = void 0, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(getChildren(s))), _f = _e.next(); !_f.done; _f = _e.next()){\n                            var child = _f.value;\n                            if (!configuration.has(child)) {\n                                configuration.add(child);\n                                if (prevAdjList.get(child)) {\n                                    prevAdjList.get(child).forEach(function(sn) {\n                                        return configuration.add(sn);\n                                    });\n                                } else {\n                                    child.initialStateNodes.forEach(function(sn) {\n                                        return configuration.add(sn);\n                                    });\n                                }\n                            }\n                        }\n                    } catch (e_3_1) {\n                        e_3 = {\n                            error: e_3_1\n                        };\n                    } finally{\n                        try {\n                            if (_f && !_f.done && (_c = _e.return)) _c.call(_e);\n                        } finally{\n                            if (e_3) throw e_3.error;\n                        }\n                    }\n                }\n            }\n        }\n    } catch (e_2_1) {\n        e_2 = {\n            error: e_2_1\n        };\n    } finally{\n        try {\n            if (configuration_2_1 && !configuration_2_1.done && (_b = configuration_2.return)) _b.call(configuration_2);\n        } finally{\n            if (e_2) throw e_2.error;\n        }\n    }\n    try {\n        // add all ancestors\n        for(var configuration_3 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(configuration), configuration_3_1 = configuration_3.next(); !configuration_3_1.done; configuration_3_1 = configuration_3.next()){\n            var s = configuration_3_1.value;\n            var m = s.parent;\n            while(m && !configuration.has(m)){\n                configuration.add(m);\n                m = m.parent;\n            }\n        }\n    } catch (e_4_1) {\n        e_4 = {\n            error: e_4_1\n        };\n    } finally{\n        try {\n            if (configuration_3_1 && !configuration_3_1.done && (_d = configuration_3.return)) _d.call(configuration_3);\n        } finally{\n            if (e_4) throw e_4.error;\n        }\n    }\n    return configuration;\n}\nfunction getValueFromAdj(baseNode, adjList) {\n    var childStateNodes = adjList.get(baseNode);\n    if (!childStateNodes) {\n        return {}; // todo: fix?\n    }\n    if (baseNode.type === \"compound\") {\n        var childStateNode = childStateNodes[0];\n        if (childStateNode) {\n            if (isLeafNode(childStateNode)) {\n                return childStateNode.key;\n            }\n        } else {\n            return {};\n        }\n    }\n    var stateValue = {};\n    childStateNodes.forEach(function(csn) {\n        stateValue[csn.key] = getValueFromAdj(csn, adjList);\n    });\n    return stateValue;\n}\nfunction getAdjList(configuration) {\n    var e_5, _a;\n    var adjList = new Map();\n    try {\n        for(var configuration_4 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(configuration), configuration_4_1 = configuration_4.next(); !configuration_4_1.done; configuration_4_1 = configuration_4.next()){\n            var s = configuration_4_1.value;\n            if (!adjList.has(s)) {\n                adjList.set(s, []);\n            }\n            if (s.parent) {\n                if (!adjList.has(s.parent)) {\n                    adjList.set(s.parent, []);\n                }\n                adjList.get(s.parent).push(s);\n            }\n        }\n    } catch (e_5_1) {\n        e_5 = {\n            error: e_5_1\n        };\n    } finally{\n        try {\n            if (configuration_4_1 && !configuration_4_1.done && (_a = configuration_4.return)) _a.call(configuration_4);\n        } finally{\n            if (e_5) throw e_5.error;\n        }\n    }\n    return adjList;\n}\nfunction getValue(rootNode, configuration) {\n    var config = getConfiguration([\n        rootNode\n    ], configuration);\n    return getValueFromAdj(rootNode, getAdjList(config));\n}\nfunction has(iterable, item) {\n    if (Array.isArray(iterable)) {\n        return iterable.some(function(member) {\n            return member === item;\n        });\n    }\n    if (iterable instanceof Set) {\n        return iterable.has(item);\n    }\n    return false; // TODO: fix\n}\nfunction nextEvents(configuration) {\n    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)(new Set((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)(configuration.map(function(sn) {\n        return sn.ownEvents;\n    })), false)))), false);\n}\nfunction isInFinalState(configuration, stateNode) {\n    if (stateNode.type === \"compound\") {\n        return getChildren(stateNode).some(function(s) {\n            return s.type === \"final\" && has(configuration, s);\n        });\n    }\n    if (stateNode.type === \"parallel\") {\n        return getChildren(stateNode).every(function(sn) {\n            return isInFinalState(configuration, sn);\n        });\n    }\n    return false;\n}\nfunction getMeta(configuration) {\n    if (configuration === void 0) {\n        configuration = [];\n    }\n    return configuration.reduce(function(acc, stateNode) {\n        if (stateNode.meta !== undefined) {\n            acc[stateNode.id] = stateNode.meta;\n        }\n        return acc;\n    }, {});\n}\nfunction getTagsFromConfiguration(configuration) {\n    return new Set((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(configuration.map(function(sn) {\n        return sn.tags;\n    })));\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/stateUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/types.js":
/*!*****************************************!*\
  !*** ./node_modules/xstate/es/types.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActionTypes: () => (/* binding */ ActionTypes),\n/* harmony export */   SpecialTargets: () => (/* binding */ SpecialTargets)\n/* harmony export */ });\nvar ActionTypes;\n(function(ActionTypes) {\n    ActionTypes[\"Start\"] = \"xstate.start\";\n    ActionTypes[\"Stop\"] = \"xstate.stop\";\n    ActionTypes[\"Raise\"] = \"xstate.raise\";\n    ActionTypes[\"Send\"] = \"xstate.send\";\n    ActionTypes[\"Cancel\"] = \"xstate.cancel\";\n    ActionTypes[\"NullEvent\"] = \"\";\n    ActionTypes[\"Assign\"] = \"xstate.assign\";\n    ActionTypes[\"After\"] = \"xstate.after\";\n    ActionTypes[\"DoneState\"] = \"done.state\";\n    ActionTypes[\"DoneInvoke\"] = \"done.invoke\";\n    ActionTypes[\"Log\"] = \"xstate.log\";\n    ActionTypes[\"Init\"] = \"xstate.init\";\n    ActionTypes[\"Invoke\"] = \"xstate.invoke\";\n    ActionTypes[\"ErrorExecution\"] = \"error.execution\";\n    ActionTypes[\"ErrorCommunication\"] = \"error.communication\";\n    ActionTypes[\"ErrorPlatform\"] = \"error.platform\";\n    ActionTypes[\"ErrorCustom\"] = \"xstate.error\";\n    ActionTypes[\"Update\"] = \"xstate.update\";\n    ActionTypes[\"Pure\"] = \"xstate.pure\";\n    ActionTypes[\"Choose\"] = \"xstate.choose\";\n})(ActionTypes || (ActionTypes = {}));\nvar SpecialTargets;\n(function(SpecialTargets) {\n    SpecialTargets[\"Parent\"] = \"#_parent\";\n    SpecialTargets[\"Internal\"] = \"#_internal\";\n})(SpecialTargets || (SpecialTargets = {}));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL3R5cGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBSUE7QUFFSCxVQUFVQSxXQUFXO0lBQ3BCQSxXQUFXLENBQUMsUUFBUSxHQUFHO0lBQ3ZCQSxXQUFXLENBQUMsT0FBTyxHQUFHO0lBQ3RCQSxXQUFXLENBQUMsUUFBUSxHQUFHO0lBQ3ZCQSxXQUFXLENBQUMsT0FBTyxHQUFHO0lBQ3RCQSxXQUFXLENBQUMsU0FBUyxHQUFHO0lBQ3hCQSxXQUFXLENBQUMsWUFBWSxHQUFHO0lBQzNCQSxXQUFXLENBQUMsU0FBUyxHQUFHO0lBQ3hCQSxXQUFXLENBQUMsUUFBUSxHQUFHO0lBQ3ZCQSxXQUFXLENBQUMsWUFBWSxHQUFHO0lBQzNCQSxXQUFXLENBQUMsYUFBYSxHQUFHO0lBQzVCQSxXQUFXLENBQUMsTUFBTSxHQUFHO0lBQ3JCQSxXQUFXLENBQUMsT0FBTyxHQUFHO0lBQ3RCQSxXQUFXLENBQUMsU0FBUyxHQUFHO0lBQ3hCQSxXQUFXLENBQUMsaUJBQWlCLEdBQUc7SUFDaENBLFdBQVcsQ0FBQyxxQkFBcUIsR0FBRztJQUNwQ0EsV0FBVyxDQUFDLGdCQUFnQixHQUFHO0lBQy9CQSxXQUFXLENBQUMsY0FBYyxHQUFHO0lBQzdCQSxXQUFXLENBQUMsU0FBUyxHQUFHO0lBQ3hCQSxXQUFXLENBQUMsT0FBTyxHQUFHO0lBQ3RCQSxXQUFXLENBQUMsU0FBUyxHQUFHO0FBQzFCLEdBQUdBLGVBQWdCQSxDQUFBQSxjQUFjLENBQUM7QUFFbEMsSUFBSUM7QUFFSCxVQUFVQSxjQUFjO0lBQ3ZCQSxjQUFjLENBQUMsU0FBUyxHQUFHO0lBQzNCQSxjQUFjLENBQUMsV0FBVyxHQUFHO0FBQy9CLEdBQUdBLGtCQUFtQkEsQ0FBQUEsaUJBQWlCLENBQUM7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGNoLW1ha2VyLy4vbm9kZV9tb2R1bGVzL3hzdGF0ZS9lcy90eXBlcy5qcz81MTA3Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBBY3Rpb25UeXBlcztcblxuKGZ1bmN0aW9uIChBY3Rpb25UeXBlcykge1xuICBBY3Rpb25UeXBlc1tcIlN0YXJ0XCJdID0gXCJ4c3RhdGUuc3RhcnRcIjtcbiAgQWN0aW9uVHlwZXNbXCJTdG9wXCJdID0gXCJ4c3RhdGUuc3RvcFwiO1xuICBBY3Rpb25UeXBlc1tcIlJhaXNlXCJdID0gXCJ4c3RhdGUucmFpc2VcIjtcbiAgQWN0aW9uVHlwZXNbXCJTZW5kXCJdID0gXCJ4c3RhdGUuc2VuZFwiO1xuICBBY3Rpb25UeXBlc1tcIkNhbmNlbFwiXSA9IFwieHN0YXRlLmNhbmNlbFwiO1xuICBBY3Rpb25UeXBlc1tcIk51bGxFdmVudFwiXSA9IFwiXCI7XG4gIEFjdGlvblR5cGVzW1wiQXNzaWduXCJdID0gXCJ4c3RhdGUuYXNzaWduXCI7XG4gIEFjdGlvblR5cGVzW1wiQWZ0ZXJcIl0gPSBcInhzdGF0ZS5hZnRlclwiO1xuICBBY3Rpb25UeXBlc1tcIkRvbmVTdGF0ZVwiXSA9IFwiZG9uZS5zdGF0ZVwiO1xuICBBY3Rpb25UeXBlc1tcIkRvbmVJbnZva2VcIl0gPSBcImRvbmUuaW52b2tlXCI7XG4gIEFjdGlvblR5cGVzW1wiTG9nXCJdID0gXCJ4c3RhdGUubG9nXCI7XG4gIEFjdGlvblR5cGVzW1wiSW5pdFwiXSA9IFwieHN0YXRlLmluaXRcIjtcbiAgQWN0aW9uVHlwZXNbXCJJbnZva2VcIl0gPSBcInhzdGF0ZS5pbnZva2VcIjtcbiAgQWN0aW9uVHlwZXNbXCJFcnJvckV4ZWN1dGlvblwiXSA9IFwiZXJyb3IuZXhlY3V0aW9uXCI7XG4gIEFjdGlvblR5cGVzW1wiRXJyb3JDb21tdW5pY2F0aW9uXCJdID0gXCJlcnJvci5jb21tdW5pY2F0aW9uXCI7XG4gIEFjdGlvblR5cGVzW1wiRXJyb3JQbGF0Zm9ybVwiXSA9IFwiZXJyb3IucGxhdGZvcm1cIjtcbiAgQWN0aW9uVHlwZXNbXCJFcnJvckN1c3RvbVwiXSA9IFwieHN0YXRlLmVycm9yXCI7XG4gIEFjdGlvblR5cGVzW1wiVXBkYXRlXCJdID0gXCJ4c3RhdGUudXBkYXRlXCI7XG4gIEFjdGlvblR5cGVzW1wiUHVyZVwiXSA9IFwieHN0YXRlLnB1cmVcIjtcbiAgQWN0aW9uVHlwZXNbXCJDaG9vc2VcIl0gPSBcInhzdGF0ZS5jaG9vc2VcIjtcbn0pKEFjdGlvblR5cGVzIHx8IChBY3Rpb25UeXBlcyA9IHt9KSk7XG5cbnZhciBTcGVjaWFsVGFyZ2V0cztcblxuKGZ1bmN0aW9uIChTcGVjaWFsVGFyZ2V0cykge1xuICBTcGVjaWFsVGFyZ2V0c1tcIlBhcmVudFwiXSA9IFwiI19wYXJlbnRcIjtcbiAgU3BlY2lhbFRhcmdldHNbXCJJbnRlcm5hbFwiXSA9IFwiI19pbnRlcm5hbFwiO1xufSkoU3BlY2lhbFRhcmdldHMgfHwgKFNwZWNpYWxUYXJnZXRzID0ge30pKTtcblxuZXhwb3J0IHsgQWN0aW9uVHlwZXMsIFNwZWNpYWxUYXJnZXRzIH07XG4iXSwibmFtZXMiOlsiQWN0aW9uVHlwZXMiLCJTcGVjaWFsVGFyZ2V0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/xstate/es/utils.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createInvokeId: () => (/* binding */ createInvokeId),\n/* harmony export */   evaluateGuard: () => (/* binding */ evaluateGuard),\n/* harmony export */   flatten: () => (/* binding */ flatten),\n/* harmony export */   getActionType: () => (/* binding */ getActionType),\n/* harmony export */   getEventType: () => (/* binding */ getEventType),\n/* harmony export */   interopSymbols: () => (/* binding */ interopSymbols),\n/* harmony export */   isActor: () => (/* binding */ isActor),\n/* harmony export */   isArray: () => (/* binding */ isArray),\n/* harmony export */   isBehavior: () => (/* binding */ isBehavior),\n/* harmony export */   isBuiltInEvent: () => (/* binding */ isBuiltInEvent),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isMachine: () => (/* binding */ isMachine),\n/* harmony export */   isObservable: () => (/* binding */ isObservable),\n/* harmony export */   isPromiseLike: () => (/* binding */ isPromiseLike),\n/* harmony export */   isRaisableAction: () => (/* binding */ isRaisableAction),\n/* harmony export */   isStateLike: () => (/* binding */ isStateLike),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   keys: () => (/* binding */ keys),\n/* harmony export */   mapContext: () => (/* binding */ mapContext),\n/* harmony export */   mapFilterValues: () => (/* binding */ mapFilterValues),\n/* harmony export */   mapValues: () => (/* binding */ mapValues),\n/* harmony export */   matchesState: () => (/* binding */ matchesState),\n/* harmony export */   nestedPath: () => (/* binding */ nestedPath),\n/* harmony export */   normalizeTarget: () => (/* binding */ normalizeTarget),\n/* harmony export */   partition: () => (/* binding */ partition),\n/* harmony export */   path: () => (/* binding */ path),\n/* harmony export */   pathToStateValue: () => (/* binding */ pathToStateValue),\n/* harmony export */   pathsToStateValue: () => (/* binding */ pathsToStateValue),\n/* harmony export */   reportUnhandledExceptionOnInvocation: () => (/* binding */ reportUnhandledExceptionOnInvocation),\n/* harmony export */   symbolObservable: () => (/* binding */ symbolObservable),\n/* harmony export */   toArray: () => (/* binding */ toArray),\n/* harmony export */   toArrayStrict: () => (/* binding */ toArrayStrict),\n/* harmony export */   toEventObject: () => (/* binding */ toEventObject),\n/* harmony export */   toGuard: () => (/* binding */ toGuard),\n/* harmony export */   toInvokeSource: () => (/* binding */ toInvokeSource),\n/* harmony export */   toObserver: () => (/* binding */ toObserver),\n/* harmony export */   toSCXMLEvent: () => (/* binding */ toSCXMLEvent),\n/* harmony export */   toStatePath: () => (/* binding */ toStatePath),\n/* harmony export */   toStatePaths: () => (/* binding */ toStatePaths),\n/* harmony export */   toStateValue: () => (/* binding */ toStateValue),\n/* harmony export */   toTransitionConfigArray: () => (/* binding */ toTransitionConfigArray),\n/* harmony export */   uniqueId: () => (/* binding */ uniqueId),\n/* harmony export */   updateContext: () => (/* binding */ updateContext),\n/* harmony export */   updateHistoryStates: () => (/* binding */ updateHistoryStates),\n/* harmony export */   updateHistoryValue: () => (/* binding */ updateHistoryValue),\n/* harmony export */   warn: () => (/* binding */ warn)\n/* harmony export */ });\n/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_virtual/_tslib.js */ \"(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/xstate/es/types.js\");\n/* harmony import */ var _actionTypes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./actionTypes.js */ \"(ssr)/./node_modules/xstate/es/actionTypes.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/xstate/es/constants.js\");\n/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./environment.js */ \"(ssr)/./node_modules/xstate/es/environment.js\");\n\n\n\n\n\nvar _a;\nfunction keys(value) {\n    return Object.keys(value);\n}\nfunction matchesState(parentStateId, childStateId, delimiter) {\n    if (delimiter === void 0) {\n        delimiter = _constants_js__WEBPACK_IMPORTED_MODULE_0__.STATE_DELIMITER;\n    }\n    var parentStateValue = toStateValue(parentStateId, delimiter);\n    var childStateValue = toStateValue(childStateId, delimiter);\n    if (isString(childStateValue)) {\n        if (isString(parentStateValue)) {\n            return childStateValue === parentStateValue;\n        } // Parent more specific than child\n        return false;\n    }\n    if (isString(parentStateValue)) {\n        return parentStateValue in childStateValue;\n    }\n    return Object.keys(parentStateValue).every(function(key) {\n        if (!(key in childStateValue)) {\n            return false;\n        }\n        return matchesState(parentStateValue[key], childStateValue[key]);\n    });\n}\nfunction getEventType(event) {\n    try {\n        return isString(event) || typeof event === \"number\" ? \"\".concat(event) : event.type;\n    } catch (e) {\n        throw new Error(\"Events must be strings or objects with a string event.type property.\");\n    }\n}\nfunction getActionType(action) {\n    try {\n        return isString(action) || typeof action === \"number\" ? \"\".concat(action) : isFunction(action) ? action.name : action.type;\n    } catch (e) {\n        throw new Error(\"Actions must be strings or objects with a string action.type property.\");\n    }\n}\nfunction toStatePath(stateId, delimiter) {\n    try {\n        if (isArray(stateId)) {\n            return stateId;\n        }\n        return stateId.toString().split(delimiter);\n    } catch (e) {\n        throw new Error(\"'\".concat(stateId, \"' is not a valid state path.\"));\n    }\n}\nfunction isStateLike(state) {\n    return typeof state === \"object\" && \"value\" in state && \"context\" in state && \"event\" in state && \"_event\" in state;\n}\nfunction toStateValue(stateValue, delimiter) {\n    if (isStateLike(stateValue)) {\n        return stateValue.value;\n    }\n    if (isArray(stateValue)) {\n        return pathToStateValue(stateValue);\n    }\n    if (typeof stateValue !== \"string\") {\n        return stateValue;\n    }\n    var statePath = toStatePath(stateValue, delimiter);\n    return pathToStateValue(statePath);\n}\nfunction pathToStateValue(statePath) {\n    if (statePath.length === 1) {\n        return statePath[0];\n    }\n    var value = {};\n    var marker = value;\n    for(var i = 0; i < statePath.length - 1; i++){\n        if (i === statePath.length - 2) {\n            marker[statePath[i]] = statePath[i + 1];\n        } else {\n            marker[statePath[i]] = {};\n            marker = marker[statePath[i]];\n        }\n    }\n    return value;\n}\nfunction mapValues(collection, iteratee) {\n    var result = {};\n    var collectionKeys = Object.keys(collection);\n    for(var i = 0; i < collectionKeys.length; i++){\n        var key = collectionKeys[i];\n        result[key] = iteratee(collection[key], key, collection, i);\n    }\n    return result;\n}\nfunction mapFilterValues(collection, iteratee, predicate) {\n    var e_1, _a;\n    var result = {};\n    try {\n        for(var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(Object.keys(collection)), _c = _b.next(); !_c.done; _c = _b.next()){\n            var key = _c.value;\n            var item = collection[key];\n            if (!predicate(item)) {\n                continue;\n            }\n            result[key] = iteratee(item, key, collection);\n        }\n    } catch (e_1_1) {\n        e_1 = {\n            error: e_1_1\n        };\n    } finally{\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally{\n            if (e_1) throw e_1.error;\n        }\n    }\n    return result;\n}\n/**\r\n * Retrieves a value at the given path.\r\n * @param props The deep path to the prop of the desired value\r\n */ var path = function(props) {\n    return function(object) {\n        var e_2, _a;\n        var result = object;\n        try {\n            for(var props_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()){\n                var prop = props_1_1.value;\n                result = result[prop];\n            }\n        } catch (e_2_1) {\n            e_2 = {\n                error: e_2_1\n            };\n        } finally{\n            try {\n                if (props_1_1 && !props_1_1.done && (_a = props_1.return)) _a.call(props_1);\n            } finally{\n                if (e_2) throw e_2.error;\n            }\n        }\n        return result;\n    };\n};\n/**\r\n * Retrieves a value at the given path via the nested accessor prop.\r\n * @param props The deep path to the prop of the desired value\r\n */ function nestedPath(props, accessorProp) {\n    return function(object) {\n        var e_3, _a;\n        var result = object;\n        try {\n            for(var props_2 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(props), props_2_1 = props_2.next(); !props_2_1.done; props_2_1 = props_2.next()){\n                var prop = props_2_1.value;\n                result = result[accessorProp][prop];\n            }\n        } catch (e_3_1) {\n            e_3 = {\n                error: e_3_1\n            };\n        } finally{\n            try {\n                if (props_2_1 && !props_2_1.done && (_a = props_2.return)) _a.call(props_2);\n            } finally{\n                if (e_3) throw e_3.error;\n            }\n        }\n        return result;\n    };\n}\nfunction toStatePaths(stateValue) {\n    if (!stateValue) {\n        return [\n            []\n        ];\n    }\n    if (isString(stateValue)) {\n        return [\n            [\n                stateValue\n            ]\n        ];\n    }\n    var result = flatten(Object.keys(stateValue).map(function(key) {\n        var subStateValue = stateValue[key];\n        if (typeof subStateValue !== \"string\" && (!subStateValue || !Object.keys(subStateValue).length)) {\n            return [\n                [\n                    key\n                ]\n            ];\n        }\n        return toStatePaths(stateValue[key]).map(function(subPath) {\n            return [\n                key\n            ].concat(subPath);\n        });\n    }));\n    return result;\n}\nfunction pathsToStateValue(paths) {\n    var e_4, _a;\n    var result = {};\n    if (paths && paths.length === 1 && paths[0].length === 1) {\n        return paths[0][0];\n    }\n    try {\n        for(var paths_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(paths), paths_1_1 = paths_1.next(); !paths_1_1.done; paths_1_1 = paths_1.next()){\n            var currentPath = paths_1_1.value;\n            var marker = result; // tslint:disable-next-line:prefer-for-of\n            for(var i = 0; i < currentPath.length; i++){\n                var subPath = currentPath[i];\n                if (i === currentPath.length - 2) {\n                    marker[subPath] = currentPath[i + 1];\n                    break;\n                }\n                marker[subPath] = marker[subPath] || {};\n                marker = marker[subPath];\n            }\n        }\n    } catch (e_4_1) {\n        e_4 = {\n            error: e_4_1\n        };\n    } finally{\n        try {\n            if (paths_1_1 && !paths_1_1.done && (_a = paths_1.return)) _a.call(paths_1);\n        } finally{\n            if (e_4) throw e_4.error;\n        }\n    }\n    return result;\n}\nfunction flatten(array) {\n    var _a;\n    return (_a = []).concat.apply(_a, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)(array), false));\n}\nfunction toArrayStrict(value) {\n    if (isArray(value)) {\n        return value;\n    }\n    return [\n        value\n    ];\n}\nfunction toArray(value) {\n    if (value === undefined) {\n        return [];\n    }\n    return toArrayStrict(value);\n}\nfunction mapContext(mapper, context, _event) {\n    var e_5, _a;\n    if (isFunction(mapper)) {\n        return mapper(context, _event.data);\n    }\n    var result = {};\n    try {\n        for(var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(Object.keys(mapper)), _c = _b.next(); !_c.done; _c = _b.next()){\n            var key = _c.value;\n            var subMapper = mapper[key];\n            if (isFunction(subMapper)) {\n                result[key] = subMapper(context, _event.data);\n            } else {\n                result[key] = subMapper;\n            }\n        }\n    } catch (e_5_1) {\n        e_5 = {\n            error: e_5_1\n        };\n    } finally{\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally{\n            if (e_5) throw e_5.error;\n        }\n    }\n    return result;\n}\nfunction isBuiltInEvent(eventType) {\n    return /^(done|error)\\./.test(eventType);\n}\nfunction isPromiseLike(value) {\n    if (value instanceof Promise) {\n        return true;\n    } // Check if shape matches the Promise/A+ specification for a \"thenable\".\n    if (value !== null && (isFunction(value) || typeof value === \"object\") && isFunction(value.then)) {\n        return true;\n    }\n    return false;\n}\nfunction isBehavior(value) {\n    return value !== null && typeof value === \"object\" && \"transition\" in value && typeof value.transition === \"function\";\n}\nfunction partition(items, predicate) {\n    var e_6, _a;\n    var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)([\n        [],\n        []\n    ], 2), truthy = _b[0], falsy = _b[1];\n    try {\n        for(var items_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()){\n            var item = items_1_1.value;\n            if (predicate(item)) {\n                truthy.push(item);\n            } else {\n                falsy.push(item);\n            }\n        }\n    } catch (e_6_1) {\n        e_6 = {\n            error: e_6_1\n        };\n    } finally{\n        try {\n            if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);\n        } finally{\n            if (e_6) throw e_6.error;\n        }\n    }\n    return [\n        truthy,\n        falsy\n    ];\n}\nfunction updateHistoryStates(hist, stateValue) {\n    return mapValues(hist.states, function(subHist, key) {\n        if (!subHist) {\n            return undefined;\n        }\n        var subStateValue = (isString(stateValue) ? undefined : stateValue[key]) || (subHist ? subHist.current : undefined);\n        if (!subStateValue) {\n            return undefined;\n        }\n        return {\n            current: subStateValue,\n            states: updateHistoryStates(subHist, subStateValue)\n        };\n    });\n}\nfunction updateHistoryValue(hist, stateValue) {\n    return {\n        current: stateValue,\n        states: updateHistoryStates(hist, stateValue)\n    };\n}\nfunction updateContext(context, _event, assignActions, state) {\n    if (!_environment_js__WEBPACK_IMPORTED_MODULE_2__.IS_PRODUCTION) {\n        warn(!!context, \"Attempting to update undefined context\");\n    }\n    var updatedContext = context ? assignActions.reduce(function(acc, assignAction) {\n        var e_7, _a;\n        var assignment = assignAction.assignment;\n        var meta = {\n            state: state,\n            action: assignAction,\n            _event: _event\n        };\n        var partialUpdate = {};\n        if (isFunction(assignment)) {\n            partialUpdate = assignment(acc, _event.data, meta);\n        } else {\n            try {\n                for(var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(Object.keys(assignment)), _c = _b.next(); !_c.done; _c = _b.next()){\n                    var key = _c.value;\n                    var propAssignment = assignment[key];\n                    partialUpdate[key] = isFunction(propAssignment) ? propAssignment(acc, _event.data, meta) : propAssignment;\n                }\n            } catch (e_7_1) {\n                e_7 = {\n                    error: e_7_1\n                };\n            } finally{\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                } finally{\n                    if (e_7) throw e_7.error;\n                }\n            }\n        }\n        return Object.assign({}, acc, partialUpdate);\n    }, context) : context;\n    return updatedContext;\n} // tslint:disable-next-line:no-empty\nvar warn = function() {};\nif (!_environment_js__WEBPACK_IMPORTED_MODULE_2__.IS_PRODUCTION) {\n    warn = function(condition, message) {\n        var error = condition instanceof Error ? condition : undefined;\n        if (!error && condition) {\n            return;\n        }\n        if (console !== undefined) {\n            var args = [\n                \"Warning: \".concat(message)\n            ];\n            if (error) {\n                args.push(error);\n            } // tslint:disable-next-line:no-console\n            console.warn.apply(console, args);\n        }\n    };\n}\nfunction isArray(value) {\n    return Array.isArray(value);\n} // tslint:disable-next-line:ban-types\nfunction isFunction(value) {\n    return typeof value === \"function\";\n}\nfunction isString(value) {\n    return typeof value === \"string\";\n}\nfunction toGuard(condition, guardMap) {\n    if (!condition) {\n        return undefined;\n    }\n    if (isString(condition)) {\n        return {\n            type: _constants_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_GUARD_TYPE,\n            name: condition,\n            predicate: guardMap ? guardMap[condition] : undefined\n        };\n    }\n    if (isFunction(condition)) {\n        return {\n            type: _constants_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_GUARD_TYPE,\n            name: condition.name,\n            predicate: condition\n        };\n    }\n    return condition;\n}\nfunction isObservable(value) {\n    try {\n        return \"subscribe\" in value && isFunction(value.subscribe);\n    } catch (e) {\n        return false;\n    }\n}\nvar symbolObservable = /*#__PURE__*/ function() {\n    return typeof Symbol === \"function\" && Symbol.observable || \"@@observable\";\n}(); // TODO: to be removed in v5, left it out just to minimize the scope of the change and maintain compatibility with older versions of integration paackages\nvar interopSymbols = (_a = {}, _a[symbolObservable] = function() {\n    return this;\n}, _a[Symbol.observable] = function() {\n    return this;\n}, _a);\nfunction isMachine(value) {\n    return !!value && \"__xstatenode\" in value;\n}\nfunction isActor(value) {\n    return !!value && typeof value.send === \"function\";\n}\nvar uniqueId = /*#__PURE__*/ function() {\n    var currentId = 0;\n    return function() {\n        currentId++;\n        return currentId.toString(16);\n    };\n}();\nfunction toEventObject(event, payload // id?: TEvent['type']\n) {\n    if (isString(event) || typeof event === \"number\") {\n        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n            type: event\n        }, payload);\n    }\n    return event;\n}\nfunction toSCXMLEvent(event, scxmlEvent) {\n    if (!isString(event) && \"$$type\" in event && event.$$type === \"scxml\") {\n        return event;\n    }\n    var eventObject = toEventObject(event);\n    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n        name: eventObject.type,\n        data: eventObject,\n        $$type: \"scxml\",\n        type: \"external\"\n    }, scxmlEvent);\n}\nfunction toTransitionConfigArray(event, configLike) {\n    var transitions = toArrayStrict(configLike).map(function(transitionLike) {\n        if (typeof transitionLike === \"undefined\" || typeof transitionLike === \"string\" || isMachine(transitionLike)) {\n            return {\n                target: transitionLike,\n                event: event\n            };\n        }\n        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, transitionLike), {\n            event: event\n        });\n    });\n    return transitions;\n}\nfunction normalizeTarget(target) {\n    if (target === undefined || target === _constants_js__WEBPACK_IMPORTED_MODULE_0__.TARGETLESS_KEY) {\n        return undefined;\n    }\n    return toArray(target);\n}\nfunction reportUnhandledExceptionOnInvocation(originalError, currentError, id) {\n    if (!_environment_js__WEBPACK_IMPORTED_MODULE_2__.IS_PRODUCTION) {\n        var originalStackTrace = originalError.stack ? \" Stacktrace was '\".concat(originalError.stack, \"'\") : \"\";\n        if (originalError === currentError) {\n            // tslint:disable-next-line:no-console\n            console.error(\"Missing onError handler for invocation '\".concat(id, \"', error was '\").concat(originalError, \"'.\").concat(originalStackTrace));\n        } else {\n            var stackTrace = currentError.stack ? \" Stacktrace was '\".concat(currentError.stack, \"'\") : \"\"; // tslint:disable-next-line:no-console\n            console.error(\"Missing onError handler and/or unhandled exception/promise rejection for invocation '\".concat(id, \"'. \") + \"Original error: '\".concat(originalError, \"'. \").concat(originalStackTrace, \" Current error is '\").concat(currentError, \"'.\").concat(stackTrace));\n        }\n    }\n}\nfunction evaluateGuard(machine, guard, context, _event, state) {\n    var guards = machine.options.guards;\n    var guardMeta = {\n        state: state,\n        cond: guard,\n        _event: _event\n    }; // TODO: do not hardcode!\n    if (guard.type === _constants_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_GUARD_TYPE) {\n        return ((guards === null || guards === void 0 ? void 0 : guards[guard.name]) || guard.predicate)(context, _event.data, guardMeta);\n    }\n    var condFn = guards === null || guards === void 0 ? void 0 : guards[guard.type];\n    if (!condFn) {\n        throw new Error(\"Guard '\".concat(guard.type, \"' is not implemented on machine '\").concat(machine.id, \"'.\"));\n    }\n    return condFn(context, _event.data, guardMeta);\n}\nfunction toInvokeSource(src) {\n    if (typeof src === \"string\") {\n        return {\n            type: src\n        };\n    }\n    return src;\n}\nfunction toObserver(nextHandler, errorHandler, completionHandler) {\n    var noop = function() {};\n    var isObserver = typeof nextHandler === \"object\";\n    var self = isObserver ? nextHandler : null;\n    return {\n        next: ((isObserver ? nextHandler.next : nextHandler) || noop).bind(self),\n        error: ((isObserver ? nextHandler.error : errorHandler) || noop).bind(self),\n        complete: ((isObserver ? nextHandler.complete : completionHandler) || noop).bind(self)\n    };\n}\nfunction createInvokeId(stateNodeId, index) {\n    return \"\".concat(stateNodeId, \":invocation[\").concat(index, \"]\");\n}\nfunction isRaisableAction(action) {\n    return (action.type === _actionTypes_js__WEBPACK_IMPORTED_MODULE_3__.raise || action.type === _actionTypes_js__WEBPACK_IMPORTED_MODULE_3__.send && action.to === _types_js__WEBPACK_IMPORTED_MODULE_4__.SpecialTargets.Internal) && typeof action.delay !== \"number\";\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/utils.js\n");

/***/ })

};
;