enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

type FriendRequest @model @auth(rules: [{allow: private}]) {
  id: ID!
  status: FriendRequestStatus
  sender: Profile @hasOne
  receiver: Profile @hasOne
}

enum NotificationType {
  FRIEND_REQUEST
  MESSAGE
  GROUP_INVITATION
  GROUP_MESSAGE
}

type Notification @model @auth(rules: [{allow: private}]) {
  id: ID!
  type: NotificationType
  content: String!
  read: Boolean
  target: Profile @hasOne
  originator: Profile @hasOne
}

type Memberships @model @auth(rules: [{allow: private}]) {
  id: ID!
  group: Groups @hasOne
  user: Profile @hasOne
  status: RelationshipStatus
}

type Groups @model @auth(rules: [{allow: private}]) {
  id: ID!
  description: String
  name: String!
  image: String
  createdBy: Profile @hasOne
  members: [Profile] @hasMany(indexName: "byGroups", fields: ["id"])
}

type Matches @model @auth(rules: [{allow: private}]) {
  id: ID!
  user: Profile @hasOne
  matches: [Profile] @hasMany
  rejectedMatches: [Profile] @hasMany
}

enum RelationshipStatus {
  FRIEND
  BLOCKED
  REMOVED
  GROUP
}

type Friendships @model @auth(rules: [{allow: private}]) {
  id: ID!
  friendshipStatus: RelationshipStatus
  updatedBy: ID
  firstUser: Profile @hasOne
  secondUser: Profile @hasOne
}

type Profile @model @auth(rules: [{allow: private}]) {
  id: ID!
  name: String!
  description: String
  languages: String
  zipCode: String
  gamePreference: String
  behaviour: String
  username: String
  bio: String
  photo: String
  coverPhoto: String
  firstName: String
  lastName: String
  age: Int
  country: String
  timeZone: String
  city: String
  region: String
  postalCode: String
  language: String
  favoriteGame: String
  preferredGenre: String
  timeAvailability: String
  preferredTeammateAgeRange: String
  skillLevel: String
  preferredGameMode: String
  preferredRole: String
  playStyle: String
  flexibility: Boolean
  behavior: String
  communicationPreference: String
  toleranceLevel: String
  teamworkLevel: String
  competitivenessLevel: String
  groupsID: ID @index(name: "byGroups")
}
 